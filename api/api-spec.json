{
  "openapi": "3.0.0",
  "info": {
    "title": "Fundscraper API",
    "description": "The REST api methods available for access to the fundscraper system",
    "version": "1.0",
    "contact": {}
  },
  "tags": [],
  "servers": [],
  "components": {
    "schemas": {
      "InvestorIntendedTrades": {
        "type": "object",
        "properties": {
          "id": {
            "type": "number",
            "description": "the unique internal identifier (primary key) of the row"
          },
          "intended_issuer_id": {
            "type": "number",
            "description": "the issuer the investor is intended to trade with"
          },
          "user_id": {
            "type": "number",
            "description": "the investor this is for"
          },
          "intended_trade_amount": {
            "type": "number",
            "description": "the investor intended trade amount"
          },
          "intended_trade_date": {
            "format": "date-time",
            "type": "string",
            "description": "the investor intended trade date"
          },
          "notes": {
            "type": "string",
            "description": "the notes for an investor intended trade"
          },
          "is_deleted": {
            "type": "boolean",
            "description": "if true, this row is &quot;logically&quot; deleted. that is, its not to be used any more and is kept for historical/audit purposes only"
          },
          "last_changed_by_id": {
            "type": "number",
            "description": "the id of the user that made the last change or in the case of its initial creation, the user that created it"
          },
          "createtime": {
            "format": "date-time",
            "type": "string",
            "description": "the point in time this row was first created regardless of modifications"
          },
          "updatetime": {
            "format": "date-time",
            "type": "string",
            "description": "the last point in time this row was modified"
          },
          "intended_issuer": {
            "description": "This was created from the details of the foreign key FK_INVESTOR_INTENDED_TRADES_INTENDED_ISSUER_ID_INTENDED_TRADES and described as: ",
            "allOf": [
              {
                "$ref": "#/components/schemas/UserSocialProfile"
              }
            ]
          },
          "last_changed_by": {
            "description": "This was created from the details of the foreign key FK_INVESTOR_INTENDED_TRADES_LAST_CHANGED_BY_ID_CHANGES and described as: ",
            "allOf": [
              {
                "$ref": "#/components/schemas/AllUser"
              }
            ]
          },
          "user": {
            "description": "This was created from the details of the foreign key FK_INVESTOR_INTENDED_TRADES_USER_ID_INTENDED_TRADES and described as: ",
            "allOf": [
              {
                "$ref": "#/components/schemas/AllUser"
              }
            ]
          }
        },
        "required": [
          "id",
          "intended_issuer_id",
          "user_id",
          "intended_trade_amount",
          "intended_trade_date",
          "notes",
          "is_deleted",
          "last_changed_by_id",
          "createtime",
          "updatetime",
          "intended_issuer",
          "last_changed_by",
          "user"
        ]
      },
      "ProjectBalanceAdjustment": {
        "type": "object",
        "properties": {
          "id": {
            "type": "number",
            "description": "the unique internal identifier (primary key) of the row"
          },
          "project_id": {
            "type": "number",
            "description": "the project this is for"
          },
          "adjustment_type": {
            "type": "number",
            "description": "the type of adjustment"
          },
          "category": {
            "type": "number",
            "description": "a textual coded value represent the category of the earning/fee"
          },
          "description": {
            "type": "string",
            "description": "a description of the earning or fee"
          },
          "amount": {
            "type": "number",
            "description": "the amount it earned"
          },
          "transaction_date": {
            "format": "date-time",
            "type": "string",
            "description": ""
          },
          "is_deleted": {
            "type": "boolean",
            "description": "if true, this row is &quot;logically&quot; deleted. that is, its not to be used any more and is kept for historical/audit purposes only"
          },
          "last_changed_by_id": {
            "type": "number",
            "description": "the id of the user that made the last change or in the case of its initial creation, the user that created it"
          },
          "createtime": {
            "format": "date-time",
            "type": "string",
            "description": "the point in time this row was first created regardless of modifications"
          },
          "updatetime": {
            "format": "date-time",
            "type": "string",
            "description": "the last point in time this row was modified"
          },
          "investor_earnings": {
            "description": "This was created from the details of the foreign key FK_INVESTOR_EARNINGS_PE_ID_INVESTOR_EARNINGS and described as: ",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/InvestorEarning"
            }
          },
          "last_changed_by": {
            "description": "This was created from the details of the foreign key FK_PROJECT_EARNINGS_LAST_CHANGED_BY_ID_CHANGES and described as: ",
            "allOf": [
              {
                "$ref": "#/components/schemas/AllUser"
              }
            ]
          },
          "project": {
            "description": "This was created from the details of the foreign key FK_PROJECT_EARNINGS_PROJECT_ID_ADJUSTMENTS and described as: ",
            "allOf": [
              {
                "$ref": "#/components/schemas/Project"
              }
            ]
          }
        },
        "required": [
          "id",
          "project_id",
          "adjustment_type",
          "category",
          "description",
          "amount",
          "transaction_date",
          "is_deleted",
          "last_changed_by_id",
          "createtime",
          "updatetime",
          "investor_earnings",
          "last_changed_by",
          "project"
        ]
      },
      "InvestorEarning": {
        "type": "object",
        "properties": {
          "id": {
            "type": "number",
            "description": "the unique internal identifier (primary key) of the row"
          },
          "project_earnings_id": {
            "type": "number",
            "description": "the id of project earnings that this is one portion of"
          },
          "user_id": {
            "type": "number",
            "description": "the id of the user that should receive these earnings"
          },
          "project_id": {
            "type": "number",
            "description": "the id of the project that the income/charges relate to"
          },
          "order_id": {
            "type": "number",
            "description": "the id of the order that the adjustment relates to"
          },
          "entity_type": {
            "type": "number",
            "description": "the type of account the transaction was made against"
          },
          "entity_id": {
            "type": "string",
            "description": "md5 of the identifier of the account the transaction was against"
          },
          "user_entity_id": {
            "type": "number",
            "description": "the identifier of the account the transaction was against"
          },
          "type": {
            "type": "number",
            "description": "the type of adjustment"
          },
          "category": {
            "type": "string",
            "description": "predetermined textual description of the type"
          },
          "description": {
            "type": "string",
            "description": "additional descriptive details of the action"
          },
          "amount": {
            "type": "number",
            "description": "the amount of the adjustment"
          },
          "transaction_date": {
            "format": "date-time",
            "type": "string",
            "description": "the date that the amount is expected to be applied"
          },
          "is_deleted": {
            "type": "boolean",
            "description": "if true, this row is &quot;logically&quot; deleted. that is, its not to be used any more and is kept for historical/audit purposes only"
          },
          "last_changed_by_id": {
            "type": "number",
            "description": "the id of the user that made the last change or in the case of its initial creation, the user that created it"
          },
          "createtime": {
            "format": "date-time",
            "type": "string",
            "description": "the point in time this row was first created regardless of modifications"
          },
          "updatetime": {
            "format": "date-time",
            "type": "string",
            "description": "the last point in time this row was modified"
          },
          "events_to_investor_earnings": {
            "description": "This was created from the details of the foreign key FK_EVENTS_TO_INVESTOR_EARNINGS and described as: ",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Event"
            }
          },
          "last_changed_by": {
            "description": "This was created from the details of the foreign key FK_INVESTOR_EARNINGS_LAST_CHANGED_BY_ID_CHANGES and described as: ",
            "allOf": [
              {
                "$ref": "#/components/schemas/AllUser"
              }
            ]
          },
          "order": {
            "description": "This was created from the details of the foreign key FK_INVESTOR_EARNINGS_ORDER_ID_ADJUSTMENTS and described as: ",
            "allOf": [
              {
                "$ref": "#/components/schemas/InvestmentOrder"
              }
            ]
          },
          "project_earnings": {
            "description": "This was created from the details of the foreign key FK_INVESTOR_EARNINGS_PE_ID_INVESTOR_EARNINGS and described as: ",
            "allOf": [
              {
                "$ref": "#/components/schemas/ProjectBalanceAdjustment"
              }
            ]
          },
          "project": {
            "description": "This was created from the details of the foreign key FK_INVESTOR_EARNINGS_PROJECT_ID_INVESTOR_EARNINGS and described as: ",
            "allOf": [
              {
                "$ref": "#/components/schemas/Project"
              }
            ]
          },
          "user_entity": {
            "description": "This was created from the details of the foreign key FK_INVESTOR_EARNINGS_USER_ENTITY_ID_EARNINGS and described as: ",
            "allOf": [
              {
                "$ref": "#/components/schemas/UserEntity"
              }
            ]
          },
          "user": {
            "description": "This was created from the details of the foreign key FK_INVESTOR_EARNINGS_USER_D and described as: ",
            "allOf": [
              {
                "$ref": "#/components/schemas/AllUser"
              }
            ]
          }
        },
        "required": [
          "id",
          "project_earnings_id",
          "user_id",
          "project_id",
          "order_id",
          "entity_type",
          "entity_id",
          "user_entity_id",
          "type",
          "category",
          "description",
          "amount",
          "transaction_date",
          "is_deleted",
          "last_changed_by_id",
          "createtime",
          "updatetime",
          "events_to_investor_earnings",
          "last_changed_by",
          "order",
          "project_earnings",
          "project",
          "user_entity",
          "user"
        ]
      },
      "InvestmentWithdrawal": {
        "type": "object",
        "properties": {
          "id": {
            "type": "number",
            "description": "the unique internal identifier (primary key) of the row"
          },
          "order_id": {
            "type": "number",
            "description": "the id of the order for the withdrawel"
          },
          "amount": {
            "type": "number",
            "description": "the amount to withdraw (may not be identical to the order amount)"
          },
          "bank_name": {
            "type": "string",
            "description": "the name of the bank"
          },
          "bank_institution_number": {
            "type": "string",
            "description": "the id number of the bank"
          },
          "bank_transit": {
            "type": "string",
            "description": "the transit number of the bank"
          },
          "bank_account_number": {
            "type": "string",
            "description": "the account number to put the funds into"
          },
          "bank_address": {
            "type": "string",
            "description": "the address of the bank to send it to"
          },
          "bank_province_id": {
            "type": "number",
            "description": "the province of the bank to send it to"
          },
          "bank_city": {
            "type": "string",
            "description": "the city of the bank to send it to"
          },
          "bank_postal_code": {
            "type": "string",
            "description": "the postal code of the bank to send it to"
          },
          "bank_telephone": {
            "type": "string",
            "description": "the contact telephone number of the bank to send the funds to"
          },
          "number_of_withdrawels": {
            "type": "number",
            "description": "the number of times to execute the withdrawel"
          },
          "status": {
            "type": "number",
            "description": "unused"
          },
          "is_deleted": {
            "type": "boolean",
            "description": "if true, this row is &quot;logically&quot; deleted. that is, its not to be used any more and is kept for historical/audit purposes only"
          },
          "last_changed_by_id": {
            "type": "number",
            "description": "the id of the user that made the last change or in the case of its initial creation, the user that created it"
          },
          "createtime": {
            "format": "date-time",
            "type": "string",
            "description": "the point in time this row was first created regardless of modifications"
          },
          "updatetime": {
            "format": "date-time",
            "type": "string",
            "description": "the last point in time this row was modified"
          },
          "events_to_investment_withdrawel": {
            "description": "This was created from the details of the foreign key FK_EVENTS_TO_INVESTMENT_WITHDRAWEL and described as: ",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Event"
            }
          },
          "bank_province": {
            "description": "This was created from the details of the foreign key FK_INVESTMENT_WITHDRAWAL_TO_PROVINCE and described as: ",
            "allOf": [
              {
                "$ref": "#/components/schemas/Province"
              }
            ]
          },
          "last_changed_by": {
            "description": "This was created from the details of the foreign key FK_INVESTMENT_WITHDRAWAL_LAST_CHANGED_BY_ID_CHANGES and described as: ",
            "allOf": [
              {
                "$ref": "#/components/schemas/AllUser"
              }
            ]
          },
          "order": {
            "description": "This was created from the details of the foreign key FK_INVESTMENT_WITHDRAWAL_HEAD_TO_INVESTMENT_ORDERS and described as: ",
            "allOf": [
              {
                "$ref": "#/components/schemas/InvestmentOrder"
              }
            ]
          }
        },
        "required": [
          "id",
          "order_id",
          "amount",
          "bank_name",
          "bank_institution_number",
          "bank_transit",
          "bank_account_number",
          "bank_address",
          "bank_province_id",
          "bank_city",
          "bank_postal_code",
          "bank_telephone",
          "number_of_withdrawels",
          "status",
          "is_deleted",
          "last_changed_by_id",
          "createtime",
          "updatetime",
          "events_to_investment_withdrawel",
          "bank_province",
          "last_changed_by",
          "order"
        ]
      },
      "Country": {
        "type": "object",
        "properties": {
          "id": {
            "type": "number",
            "description": "the unique internal identifier (primary key) of the row"
          },
          "name": {
            "type": "string",
            "description": "its human readable identifier"
          },
          "isocode2": {
            "type": "string",
            "description": "the 2 character iso code"
          },
          "isocode3": {
            "type": "string",
            "description": "the 3 character iso code"
          },
          "telephone_prefix": {
            "type": "string",
            "description": "the telephone system country code prefix"
          },
          "region_id": {
            "type": "number",
            "description": ""
          },
          "is_deleted": {
            "type": "boolean",
            "description": "if true, this row is &quot;logically&quot; deleted. that is, its not to be used any more and is kept for historical/audit purposes only"
          },
          "last_changed_by_id": {
            "type": "number",
            "description": "the id of the user that made the last change or in the case of its initial creation, the user that created it"
          },
          "updatetime": {
            "format": "date-time",
            "type": "string",
            "description": "the last point in time this row was modified"
          },
          "createtime": {
            "format": "date-time",
            "type": "string",
            "description": "the point in time this row was first created regardless of modifications"
          },
          "all_users_to_countries": {
            "description": "This was created from the details of the foreign key FK_ALL_USERS_TO_COUNTRIES and described as: ",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AllUser"
            }
          },
          "all_users_to_mcountries": {
            "description": "This was created from the details of the foreign key FK_ALL_USERS_TO_MCOUNTRIES and described as: ",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AllUser"
            }
          },
          "last_changed_by": {
            "description": "This was created from the details of the foreign key FK_COUNTRIES_LAST_CHANGED_BY_ID_CHANGES and described as: ",
            "allOf": [
              {
                "$ref": "#/components/schemas/AllUser"
              }
            ]
          },
          "projects": {
            "description": "This was created from the details of the foreign key FK_PROJECTS_COUNTRY_ID_PROJECTS and described as: ",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Project"
            }
          },
          "provinces_to_countries": {
            "description": "This was created from the details of the foreign key FK_PROVINCES_TO_COUNTRIES and described as: ",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Province"
            }
          },
          "investor_companies": {
            "description": "This was created from the details of the foreign key FK_USERS_ENTITY_COUNTRY_ID_INVESTOR_COMPANIES and described as: ",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserEntity"
            }
          },
          "users_socialprofile_country_id": {
            "description": "This was created from the details of the foreign key FK_USERS_SOCIALPROFILE_COUNTRY_ID and described as: ",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserSocialProfile"
            }
          }
        },
        "required": [
          "id",
          "name",
          "isocode2",
          "isocode3",
          "telephone_prefix",
          "region_id",
          "is_deleted",
          "last_changed_by_id",
          "updatetime",
          "createtime",
          "all_users_to_countries",
          "all_users_to_mcountries",
          "last_changed_by",
          "projects",
          "provinces_to_countries",
          "investor_companies",
          "users_socialprofile_country_id"
        ]
      },
      "Province": {
        "type": "object",
        "properties": {
          "id": {
            "type": "number",
            "description": "the unique internal identifier (primary key) of the row"
          },
          "name": {
            "type": "string",
            "description": "the human readable identifier"
          },
          "country_id": {
            "type": "number",
            "description": "the id of the country it is in"
          },
          "code": {
            "type": "string",
            "description": "the code typically used to denote it inside the country"
          },
          "latitude": {
            "type": "number",
            "description": "the latitude of its geographic center"
          },
          "longitude": {
            "type": "number",
            "description": "the longitude of its geographic center"
          },
          "timezone": {
            "type": "string",
            "description": "the most commonly known or used timezone in it"
          },
          "visible": {
            "type": "boolean",
            "description": "if true it should be shown in pick lists"
          },
          "is_deleted": {
            "type": "boolean",
            "description": "if true, this row is &quot;logically&quot; deleted. that is, its not to be used any more and is kept for historical/audit purposes only"
          },
          "last_changed_by_id": {
            "type": "number",
            "description": "the id of the user that made the last change or in the case of its initial creation, the user that created it"
          },
          "createtime": {
            "format": "date-time",
            "type": "string",
            "description": "the point in time this row was first created regardless of modifications"
          },
          "updatetime": {
            "format": "date-time",
            "type": "string",
            "description": "the last point in time this row was modified"
          },
          "all_users_to_mprovinces": {
            "description": "This was created from the details of the foreign key FK_ALL_USERS_TO_MPROVINCES and described as: ",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AllUser"
            }
          },
          "all_users_to_province": {
            "description": "This was created from the details of the foreign key FK_ALL_USERS_TO_PROVINCE and described as: ",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AllUser"
            }
          },
          "investment_withdrawal_to_province": {
            "description": "This was created from the details of the foreign key FK_INVESTMENT_WITHDRAWAL_TO_PROVINCE and described as: ",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/InvestmentWithdrawal"
            }
          },
          "projects": {
            "description": "This was created from the details of the foreign key FK_PROJECTS_PROVINCE_ID_PROJECTS and described as: ",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Project"
            }
          },
          "country": {
            "description": "This was created from the details of the foreign key FK_PROVINCES_TO_COUNTRIES and described as: ",
            "allOf": [
              {
                "$ref": "#/components/schemas/Country"
              }
            ]
          },
          "last_changed_by": {
            "description": "This was created from the details of the foreign key FK_PROVINCES_LAST_CHANGED_BY_ID_CHANGES and described as: ",
            "allOf": [
              {
                "$ref": "#/components/schemas/AllUser"
              }
            ]
          },
          "investor_companies": {
            "description": "",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserEntity"
            }
          },
          "users_socialprofile_jurisdiction_id_profiles": {
            "description": "This was created from the details of the foreign key FK_USERS_SOCIALPROFILE_JURISDICTION_ID_PROFILES and described as: ",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserSocialProfile"
            }
          },
          "users_socialprofile_province_id": {
            "description": "This was created from the details of the foreign key FK_USERS_SOCIALPROFILE_PROVINCE_ID and described as: ",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserSocialProfile"
            }
          },
          "users_socialprofile_statute_id_to_provinces": {
            "description": "This was created from the details of the foreign key FK_USERS_SOCIALPROFILE_STATUTE_ID_TO_PROVINCES and described as: ",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserSocialProfile"
            }
          }
        },
        "required": [
          "id",
          "name",
          "country_id",
          "code",
          "latitude",
          "longitude",
          "timezone",
          "visible",
          "is_deleted",
          "last_changed_by_id",
          "createtime",
          "updatetime",
          "all_users_to_mprovinces",
          "all_users_to_province",
          "investment_withdrawal_to_province",
          "projects",
          "country",
          "last_changed_by",
          "investor_companies",
          "users_socialprofile_jurisdiction_id_profiles",
          "users_socialprofile_province_id",
          "users_socialprofile_statute_id_to_provinces"
        ]
      },
      "RegistrationQuestion": {
        "type": "object",
        "properties": {
          "id": {
            "type": "number",
            "description": "the unique internal identifier (primary key) of the row"
          },
          "category": {
            "type": "number",
            "description": "the category of the question"
          },
          "question": {
            "type": "string",
            "description": "the textual identifier (key phrase) of the question to ask"
          },
          "wellknown": {
            "type": "string",
            "description": ""
          },
          "content": {
            "type": "string",
            "description": "the body text of the question to ask"
          },
          "question_set": {
            "type": "number",
            "description": "the set of questions (version) this set belongs to"
          },
          "representative_image": {
            "type": "string",
            "description": "a url to an image that can be used to represent the question"
          },
          "answer_type": {
            "type": "number",
            "description": "the type of presentation to use to present the asnwer"
          },
          "type_3_range": {
            "type": "string",
            "description": "if its question type 3, this is a string with 2 numbers separated by a comma. those values are the low and high of the permitted range"
          },
          "type_3_total": {
            "type": "number",
            "description": "if its question type 3, this what the sum of the answers must match (eg, 100%)"
          },
          "slider_display": {
            "type": "boolean",
            "description": ""
          },
          "answer_choice_1": {
            "type": "string",
            "description": "the first possible choice as an answer"
          },
          "answer1_image": {
            "type": "string",
            "description": "a url to an image that can be used to represent the first answer choice"
          },
          "answer_choice_2": {
            "type": "string",
            "description": "the second possible choice as an answer"
          },
          "answer2_image": {
            "type": "string",
            "description": "a url to an image that can be used to represent the second answer choice"
          },
          "answer_choice_3": {
            "type": "string",
            "description": "the third possible choice as an answer"
          },
          "answer3_image": {
            "type": "string",
            "description": "a url to an image that can be used to represent the third answer choice"
          },
          "answer_choice_4": {
            "type": "string",
            "description": "the fourth possible choice as an answer"
          },
          "answer4_image": {
            "type": "string",
            "description": "a url to an image that can be used to represent the fourth answer choice"
          },
          "answer_choice_5": {
            "type": "string",
            "description": "the fifth possible choice as an answer"
          },
          "answer5_image": {
            "type": "string",
            "description": "a url to an image that can be used to represent the fifth answer choice"
          },
          "answer_choice_6": {
            "type": "string",
            "description": "the sixth possible choice as an answer"
          },
          "answer6_image": {
            "type": "string",
            "description": "a url to an image that can be used to represent the sixth answer choice"
          },
          "answer_choice_7": {
            "type": "string",
            "description": "the seventh possible choice as an answer"
          },
          "answer7_image": {
            "type": "string",
            "description": "a url to an image that can be used to represent the seventh answer choice"
          },
          "answer_choice_8": {
            "type": "string",
            "description": "the eigth possible choice as an answer"
          },
          "answer8_image": {
            "type": "string",
            "description": "a url to an image that can be used to represent the eigth answer choice"
          },
          "answer_choice_9": {
            "type": "string",
            "description": "the ninth possible choice as an answer"
          },
          "answer9_image": {
            "type": "string",
            "description": "a url to an image that can be used to represent the ninth answer choice"
          },
          "answer_choice_10": {
            "type": "string",
            "description": "the tenth possible choice as an answer"
          },
          "answer10_image": {
            "type": "string",
            "description": "a url to an image that can be used to represent the tenth answer choice"
          },
          "sort_order": {
            "type": "number",
            "description": "the ordinal position of this question in the list of questions to ask"
          },
          "visible": {
            "type": "boolean",
            "description": "if true the question should be shown otherwise is should not be shown"
          },
          "is_deleted": {
            "type": "boolean",
            "description": "if true, this row is &quot;logically&quot; deleted. that is, its not to be used any more and is kept for historical/audit purposes only"
          },
          "last_changed_by_id": {
            "type": "number",
            "description": "the id of the user that made the last change or in the case of its initial creation, the user that created it"
          },
          "updatetime": {
            "format": "date-time",
            "type": "string",
            "description": "the last point in time this row was modified"
          },
          "createtime": {
            "format": "date-time",
            "type": "string",
            "description": "the point in time this row was first created regardless of modifications"
          },
          "last_changed_by": {
            "description": "This was created from the details of the foreign key FK_REGISTRATION_QUESTIONARY_LAST_CHANGED_BY_ID_CHANGES and described as: ",
            "allOf": [
              {
                "$ref": "#/components/schemas/AllUser"
              }
            ]
          },
          "answers": {
            "description": "This was created from the details of the foreign key FK_USERS_QUESTIONARY_QUESTION_ID_ANSWERS and described as: ",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserAnswer"
            }
          }
        },
        "required": [
          "id",
          "category",
          "question",
          "wellknown",
          "content",
          "question_set",
          "representative_image",
          "answer_type",
          "type_3_range",
          "type_3_total",
          "slider_display",
          "answer_choice_1",
          "answer1_image",
          "answer_choice_2",
          "answer2_image",
          "answer_choice_3",
          "answer3_image",
          "answer_choice_4",
          "answer4_image",
          "answer_choice_5",
          "answer5_image",
          "answer_choice_6",
          "answer6_image",
          "answer_choice_7",
          "answer7_image",
          "answer_choice_8",
          "answer8_image",
          "answer_choice_9",
          "answer9_image",
          "answer_choice_10",
          "answer10_image",
          "sort_order",
          "visible",
          "is_deleted",
          "last_changed_by_id",
          "updatetime",
          "createtime",
          "last_changed_by",
          "answers"
        ]
      },
      "UserAnswer": {
        "type": "object",
        "properties": {
          "id": {
            "type": "number",
            "description": "the unique internal identifier (primary key) of the row"
          },
          "user_id": {
            "type": "number",
            "description": "the user this is for"
          },
          "entity_id": {
            "type": "number",
            "description": "the id of the user entity that they were acting on the behalf of when they answered it"
          },
          "category": {
            "type": "number",
            "description": "the identification of what category the question is about"
          },
          "question_id": {
            "type": "number",
            "description": "the id of the question that was answered"
          },
          "question_text": {
            "type": "string",
            "description": "the text of the question when it was asked. assuming the original question has not change this should still match it"
          },
          "answer_type": {
            "type": "number",
            "description": "the way on the ui in which the question was answer"
          },
          "answer_text": {
            "type": "string",
            "description": "the response the user provided. if its a multipart response then its a collection of caret (^) separated answers"
          },
          "is_confirmed": {
            "type": "boolean",
            "description": "identify if the answer has been confirmed"
          },
          "notes": {
            "type": "string",
            "description": "extra notes by admin for the user answer of a question"
          },
          "status": {
            "type": "number",
            "description": "unused"
          },
          "is_deleted": {
            "type": "boolean",
            "description": "if true, this row is &quot;logically&quot; deleted. that is, its not to be used any more and is kept for historical/audit purposes only"
          },
          "last_changed_by_id": {
            "type": "number",
            "description": "the id of the user that made the last change or in the case of its initial creation, the user that created it"
          },
          "createtime": {
            "format": "date-time",
            "type": "string",
            "description": "the point in time this row was first created regardless of modifications"
          },
          "updatetime": {
            "format": "date-time",
            "type": "string",
            "description": "the last point in time this row was modified"
          },
          "entity": {
            "description": "This was created from the details of the foreign key FK_USERS_QUESTIONARY_ENTITY_ANSWERS and described as: ",
            "allOf": [
              {
                "$ref": "#/components/schemas/UserEntity"
              }
            ]
          },
          "last_changed_by": {
            "description": "This was created from the details of the foreign key FK_USERS_QUESTIONARY_LAST_CHANGED_BY_ID_CHANGES and described as: ",
            "allOf": [
              {
                "$ref": "#/components/schemas/AllUser"
              }
            ]
          },
          "question": {
            "description": "This was created from the details of the foreign key FK_USERS_QUESTIONARY_QUESTION_ID_ANSWERS and described as: ",
            "allOf": [
              {
                "$ref": "#/components/schemas/RegistrationQuestion"
              }
            ]
          },
          "user": {
            "description": "This was created from the details of the foreign key FK_USERS_QUESTIONARY_USER_ID_ANSWERS and described as: ",
            "allOf": [
              {
                "$ref": "#/components/schemas/AllUser"
              }
            ]
          }
        },
        "required": [
          "id",
          "user_id",
          "entity_id",
          "category",
          "question_id",
          "question_text",
          "answer_type",
          "answer_text",
          "is_confirmed",
          "notes",
          "status",
          "is_deleted",
          "last_changed_by_id",
          "createtime",
          "updatetime",
          "entity",
          "last_changed_by",
          "question",
          "user"
        ]
      },
      "UserEntity": {
        "type": "object",
        "properties": {
          "id": {
            "type": "number",
            "description": "the unique internal identifier (primary key) of the row"
          },
          "type": {
            "type": "number",
            "description": "the type of entitye this is. for trusts its 2"
          },
          "user_id": {
            "type": "number",
            "description": "the user this is for"
          },
          "client_number": {
            "type": "string",
            "description": "the fs id for the corporation"
          },
          "name": {
            "type": "string",
            "description": "the legal name of the corporation"
          },
          "address": {
            "type": "string",
            "description": "the street addresss of where the corporation is located"
          },
          "address2": {
            "type": "string",
            "description": "the second line of the street address for where the corporation is located"
          },
          "apt_number": {
            "type": "string",
            "description": ""
          },
          "country_id": {
            "type": "number",
            "description": "the id of the country where the company is located"
          },
          "province_id": {
            "type": "number",
            "description": "the id of the province for where the company is located"
          },
          "zip": {
            "type": "string",
            "description": "the postal identifier for where the company is located"
          },
          "city": {
            "type": "string",
            "description": "the city for where the company is located"
          },
          "pdf_file": {
            "type": "string",
            "description": "a url to an additional document if required to clarify disbursements"
          },
          "status": {
            "type": "number",
            "description": "the usability state of the trust"
          },
          "is_deleted": {
            "type": "boolean",
            "description": "if true, this row is &quot;logically&quot; deleted. that is, its not to be used any more and is kept for historical/audit purposes only"
          },
          "createtime": {
            "format": "date-time",
            "type": "string",
            "description": "the point in time this row was first created regardless of modifications"
          },
          "last_changed_by_id": {
            "type": "number",
            "description": "the id of the user that made the last change or in the case of its initial creation, the user that created it"
          },
          "updatetime": {
            "format": "date-time",
            "type": "string",
            "description": "the last point in time this row was modified"
          },
          "ffba_association_to_user_entity": {
            "description": "This was created from the details of the foreign key FK_FFBA_ASSOCIATION_TO_USER_ENTITY and described as: ",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FfbaAssociation"
            }
          },
          "earnings": {
            "description": "This was created from the details of the foreign key FK_INVESTOR_EARNINGS_USER_ENTITY_ID_EARNINGS and described as: ",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/InvestorEarning"
            }
          },
          "users_banking_details_to_user_entity": {
            "description": "This was created from the details of the foreign key FK_USERS_BANKING_DETAILS_TO_USER_ENTITY and described as: ",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserBankingDetails"
            }
          },
          "company_province": {
            "description": "This was created from the details of the foreign key FK_USERS_ENTITY_COMPANY_PROVINCE_ID_INVESTOR_COMPANIES and described as: ",
            "allOf": [
              {
                "$ref": "#/components/schemas/Province"
              }
            ]
          },
          "country": {
            "description": "This was created from the details of the foreign key FK_USERS_ENTITY_COUNTRY_ID_INVESTOR_COMPANIES and described as: ",
            "allOf": [
              {
                "$ref": "#/components/schemas/Country"
              }
            ]
          },
          "last_changed_by": {
            "description": "This was created from the details of the foreign key FK_USERS_ENTITY_LAST_CHANGED_BY_ID_CHANGES and described as: ",
            "allOf": [
              {
                "$ref": "#/components/schemas/AllUser"
              }
            ]
          },
          "province": {
            "description": "This was created from the details of the foreign key FK_USERS_ENTITY_PROVINCE_ID_INVESTOR_COMPANIES and described as: ",
            "allOf": [
              {
                "$ref": "#/components/schemas/Province"
              }
            ]
          },
          "user": {
            "description": "This was created from the details of the foreign key FK_USERS_ENTITY_USER_ID_ENTITIES and described as: ",
            "allOf": [
              {
                "$ref": "#/components/schemas/AllUser"
              }
            ]
          },
          "users_questionary_entity_answers": {
            "description": "This was created from the details of the foreign key FK_USERS_QUESTIONARY_ENTITY_ANSWERS and described as: ",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserAnswer"
            }
          }
        },
        "required": [
          "id",
          "type",
          "user_id",
          "client_number",
          "name",
          "address",
          "address2",
          "apt_number",
          "country_id",
          "province_id",
          "zip",
          "city",
          "pdf_file",
          "status",
          "is_deleted",
          "createtime",
          "last_changed_by_id",
          "updatetime",
          "ffba_association_to_user_entity",
          "earnings",
          "users_banking_details_to_user_entity",
          "company_province",
          "country",
          "last_changed_by",
          "province",
          "user",
          "users_questionary_entity_answers"
        ]
      },
      "FfbaAssociation": {
        "type": "object",
        "properties": {
          "id": {
            "type": "number",
            "description": "the unique internal identifier (primary key) of the row"
          },
          "user_id": {
            "type": "number",
            "description": "the foreign ID of the user side of this relationship"
          },
          "project_id": {
            "type": "number",
            "description": "the foreign ID of the project side of this relationship"
          },
          "entity_id": {
            "type": "number",
            "description": "the foreign ID of the entity this relationship extends through, if relevant"
          },
          "is_director": {
            "type": "boolean",
            "description": "if true, the user is a director at the issuer"
          },
          "is_executive_officer": {
            "type": "boolean",
            "description": "if true, the user is an executive officer at the issuer"
          },
          "is_control_person": {
            "type": "boolean",
            "description": "if true, the user is a control person at the issuer"
          },
          "is_founder": {
            "type": "boolean",
            "description": "if true, the user is a founder of the issuer"
          },
          "is_family_member": {
            "type": "boolean",
            "description": "if true, the user is a family member of a contact at the issuer"
          },
          "is_friend": {
            "type": "boolean",
            "description": "if true, the user is a close personal friend of a contact at the issuer"
          },
          "is_associate": {
            "type": "boolean",
            "description": "if true, the user is a close business associate of a contact at the issuer"
          },
          "contact_first_name": {
            "type": "string",
            "description": "the first name of the users contact at the issuer"
          },
          "contact_last_name": {
            "type": "string",
            "description": "the last name of the users contact at the issuer"
          },
          "contact_position": {
            "type": "string",
            "description": "the position of the users contact at the issuer"
          },
          "contact_relationship": {
            "type": "string",
            "description": "the familial relationship the user has with their contact at the issuer"
          },
          "contact_years_known": {
            "type": "number",
            "description": "the number of years the user has known their contact at the issuer"
          },
          "contact_email": {
            "type": "string",
            "description": "the email address of the users contact at the issuer"
          },
          "contact_phone": {
            "type": "string",
            "description": "the phone number of the users contact at the issuer"
          },
          "is_deleted": {
            "type": "boolean",
            "description": "if true, this row is &quot;logically&quot; deleted. that is, its not to be used any more and is kept for historical/audit purposes only"
          },
          "last_changed_by_id": {
            "type": "number",
            "description": "the id of the user that made the last change or in the case of its initial creation, the user that created it"
          },
          "updatetime": {
            "format": "date-time",
            "type": "string",
            "description": "the last point in time this row was modified"
          },
          "createtime": {
            "format": "date-time",
            "type": "string",
            "description": "the point in time this row was first created regardless of modifications"
          },
          "entity": {
            "description": "This was created from the details of the foreign key FK_FFBA_ASSOCIATION_TO_USER_ENTITY and described as: ",
            "allOf": [
              {
                "$ref": "#/components/schemas/UserEntity"
              }
            ]
          },
          "last_changed_by": {
            "description": "This was created from the details of the foreign key FK_FFBA_ASSOCIATION_LAST_CHANGED_BY_ID_CHANGES and described as: ",
            "allOf": [
              {
                "$ref": "#/components/schemas/AllUser"
              }
            ]
          },
          "project": {
            "description": "This was created from the details of the foreign key FK_FFBA_ASSOCIATION_TO_PROJECT and described as: ",
            "allOf": [
              {
                "$ref": "#/components/schemas/Project"
              }
            ]
          },
          "user": {
            "description": "This was created from the details of the foreign key FK_FFBA_ASSOCIATION_TO_USER and described as: ",
            "allOf": [
              {
                "$ref": "#/components/schemas/AllUser"
              }
            ]
          }
        },
        "required": [
          "id",
          "user_id",
          "project_id",
          "entity_id",
          "is_director",
          "is_executive_officer",
          "is_control_person",
          "is_founder",
          "is_family_member",
          "is_friend",
          "is_associate",
          "contact_first_name",
          "contact_last_name",
          "contact_position",
          "contact_relationship",
          "contact_years_known",
          "contact_email",
          "contact_phone",
          "is_deleted",
          "last_changed_by_id",
          "updatetime",
          "createtime",
          "entity",
          "last_changed_by",
          "project",
          "user"
        ]
      },
      "InvestmentTransaction": {
        "type": "object",
        "properties": {
          "id": {
            "type": "number",
            "description": "the unique internal identifier (primary key) of the row"
          },
          "entity_type": {
            "type": "number",
            "description": "the type of account the transaction was made against"
          },
          "entity_id": {
            "type": "string",
            "description": "md5 of the identifier of the account the transaction was against"
          },
          "user_entity_id": {
            "type": "number",
            "description": "the identifier of the account the transaction was against"
          },
          "order_no": {
            "type": "string",
            "description": "the human identifier of the order"
          },
          "order_id": {
            "type": "number",
            "description": "the identifier of the order"
          },
          "activity": {
            "type": "number",
            "description": "the type of activity that occured"
          },
          "activity_desc": {
            "type": "string",
            "description": "a terse sentence describing the action"
          },
          "number_of_shares": {
            "type": "number",
            "description": "the number of shares that transacted"
          },
          "amount_per_share": {
            "type": "number",
            "description": "the CAD dollar value per share"
          },
          "credit": {
            "type": "number",
            "description": "the amount credited to the account"
          },
          "debit": {
            "type": "number",
            "description": "the amount debited against the account"
          },
          "is_cancelled": {
            "type": "boolean",
            "description": "is the transaction still valid?"
          },
          "user_id": {
            "type": "number",
            "description": "the user who is the receiptient of the transaction"
          },
          "project_id": {
            "type": "number",
            "description": "the identifier of the project that the transaction was placed against"
          },
          "transaction_date": {
            "format": "date-time",
            "type": "string",
            "description": "the date of the order"
          },
          "eft_file": {
            "type": "string",
            "description": "the name of the eft file this transaction was sent in"
          },
          "investor_earning_id": {
            "type": "number",
            "description": "the identifier of the investor_earning this transaction was created as part of, if any"
          },
          "is_deleted": {
            "type": "boolean",
            "description": "if true, this row is &quot;logically&quot; deleted. that is, its not to be used any more and is kept for historical/audit purposes only"
          },
          "last_changed_by_id": {
            "type": "number",
            "description": "the id of the user that made the last change or in the case of its initial creation, the user that created it"
          },
          "createtime": {
            "format": "date-time",
            "type": "string",
            "description": "the point in time this row was first created regardless of modifications"
          },
          "updatetime": {
            "format": "date-time",
            "type": "string",
            "description": "the last point in time this row was modified"
          },
          "events_to_investment_transaction": {
            "description": "This was created from the details of the foreign key FK_EVENTS_TO_INVESTMENT_TRANSACTION and described as: ",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Event"
            }
          },
          "investor_earning": {
            "description": "This was created from the details of the foreign key FK_INVESTMENT_TRANSACTION_INVESTOR_EARNING_ID and described as: ",
            "allOf": [
              {
                "$ref": "#/components/schemas/InvestorEarning"
              }
            ]
          },
          "last_changed_by": {
            "description": "This was created from the details of the foreign key FK_INVESTMENT_TRANSACTION_LAST_CHANGED_BY_ID_CHANGES and described as: ",
            "allOf": [
              {
                "$ref": "#/components/schemas/AllUser"
              }
            ]
          },
          "order": {
            "description": "This was created from the details of the foreign key FK_INVESTMENT_TRANSACTION_ORDER_ID and described as: ",
            "allOf": [
              {
                "$ref": "#/components/schemas/InvestmentOrder"
              }
            ]
          },
          "project": {
            "description": "This was created from the details of the foreign key FK_INVESTMENT_TRANSACTION_PROJECT_ID_TRANSACTIONS and described as: ",
            "allOf": [
              {
                "$ref": "#/components/schemas/Project"
              }
            ]
          },
          "user_entity": {
            "description": "This was created from the details of the foreign key FK_INVESTMENT_TRANSACTION_USER_ENTITY_ID and described as: ",
            "allOf": [
              {
                "$ref": "#/components/schemas/UserEntity"
              }
            ]
          },
          "user": {
            "description": "This was created from the details of the foreign key FK_INVESTMENT_TRANSACTION_USER_ID_TRANSACTIONS and described as: ",
            "allOf": [
              {
                "$ref": "#/components/schemas/AllUser"
              }
            ]
          }
        },
        "required": [
          "id",
          "entity_type",
          "entity_id",
          "user_entity_id",
          "order_no",
          "order_id",
          "activity",
          "activity_desc",
          "number_of_shares",
          "amount_per_share",
          "credit",
          "debit",
          "is_cancelled",
          "user_id",
          "project_id",
          "transaction_date",
          "eft_file",
          "investor_earning_id",
          "is_deleted",
          "last_changed_by_id",
          "createtime",
          "updatetime",
          "events_to_investment_transaction",
          "investor_earning",
          "last_changed_by",
          "order",
          "project",
          "user_entity",
          "user"
        ]
      },
      "InvestmentWatchlist": {
        "type": "object",
        "properties": {
          "id": {
            "type": "number",
            "description": "the unique internal identifier (primary key) of the row"
          },
          "user_id": {
            "type": "number",
            "description": "the user that is watching"
          },
          "project_id": {
            "type": "number",
            "description": "the id of the project that is being watched"
          },
          "at20": {
            "type": "boolean",
            "description": "true if the user has been notified of 20% being placed"
          },
          "at40": {
            "type": "boolean",
            "description": "true if the user has been notified of 20% being placed"
          },
          "at60": {
            "type": "boolean",
            "description": "true if the user has been notified of 40% being placed"
          },
          "at80": {
            "type": "boolean",
            "description": " true if the user has been notified of 60% being placed"
          },
          "at100": {
            "type": "boolean",
            "description": "true if the user has been notified of 80% being placed"
          },
          "in_active": {
            "type": "boolean",
            "description": "if true, its an active watch otherwise its disabled"
          },
          "is_deleted": {
            "type": "boolean",
            "description": "if true, this row is &quot;logically&quot; deleted. that is, its not to be used any more and is kept for historical/audit purposes only"
          },
          "last_changed_by_id": {
            "type": "number",
            "description": "the id of the user that made the last change or in the case of its initial creation, the user that created it"
          },
          "createtime": {
            "format": "date-time",
            "type": "string",
            "description": "the point in time this row was first created regardless of modifications"
          },
          "updatetime": {
            "format": "date-time",
            "type": "string",
            "description": "the last point in time this row was modified"
          },
          "last_changed_by": {
            "description": "This was created from the details of the foreign key FK_INVESTMENT_WATCHLIST_LAST_CHANGED_BY_ID_CHANGES and described as: ",
            "allOf": [
              {
                "$ref": "#/components/schemas/AllUser"
              }
            ]
          },
          "project": {
            "description": "This was created from the details of the foreign key FK_INVESTMENT_WATCHLIST_PROJECT_ID_WATCHES and described as: ",
            "allOf": [
              {
                "$ref": "#/components/schemas/Project"
              }
            ]
          },
          "user": {
            "description": "This was created from the details of the foreign key FK_INVESTMENT_WATCHLIST_USER_ID_WATCHES and described as: ",
            "allOf": [
              {
                "$ref": "#/components/schemas/AllUser"
              }
            ]
          }
        },
        "required": [
          "id",
          "user_id",
          "project_id",
          "at20",
          "at40",
          "at60",
          "at80",
          "at100",
          "in_active",
          "is_deleted",
          "last_changed_by_id",
          "createtime",
          "updatetime",
          "last_changed_by",
          "project",
          "user"
        ]
      },
      "ProjectAccount": {
        "type": "object",
        "properties": {
          "id": {
            "type": "number",
            "description": "the unique internal identifier (primary key) of the row"
          },
          "project_id": {
            "type": "number",
            "description": "the project this is for"
          },
          "method": {
            "type": "number",
            "description": "unused"
          },
          "eligibility_types": {
            "type": "string",
            "description": ""
          },
          "payment_type": {
            "type": "number",
            "description": "the method in which the funds are transferred"
          },
          "trust_name": {
            "type": "string",
            "description": "the name of the projects trust organization. this needs to be the name of the account holder"
          },
          "trust_address": {
            "type": "string",
            "description": "the address of the trust"
          },
          "trust_contact": {
            "type": "string",
            "description": " the primary contact of the projects trust"
          },
          "institution": {
            "type": "string",
            "description": "the name of the institution that will receive the funds"
          },
          "institution_number": {
            "type": "string",
            "description": "the identifier of the institution"
          },
          "branch_number": {
            "type": "string",
            "description": "the identifier of the branch at the institution"
          },
          "bank_account_number": {
            "type": "string",
            "description": "the bank account number the trust maintains at the branch"
          },
          "branch_mailing_address": {
            "type": "string",
            "description": "the address of the institution"
          },
          "swift_code": {
            "type": "string",
            "description": "the swift code for the institution"
          },
          "sort_order": {
            "type": "number",
            "description": "the ordinal position of this account in the list of accounts for the project"
          },
          "custom_text": {
            "type": "string",
            "description": ""
          },
          "is_active": {
            "type": "boolean",
            "description": "if true, the method is still active and can used"
          },
          "is_deleted": {
            "type": "boolean",
            "description": "if true, this row is &quot;logically&quot; deleted. that is, its not to be used any more and is kept for historical/audit purposes only"
          },
          "last_changed_by_id": {
            "type": "number",
            "description": "the id of the user that made the last change or in the case of its initial creation, the user that created it"
          },
          "createtime": {
            "format": "date-time",
            "type": "string",
            "description": "the point in time this row was first created regardless of modifications"
          },
          "updatetime": {
            "format": "date-time",
            "type": "string",
            "description": "the last point in time this row was modified"
          },
          "last_changed_by": {
            "description": "This was created from the details of the foreign key FK_PAYMENT_METHODS_LAST_CHANGED_BY_ID_CHANGES and described as: ",
            "allOf": [
              {
                "$ref": "#/components/schemas/AllUser"
              }
            ]
          },
          "project": {
            "description": "This was created from the details of the foreign key FK_PAYMENT_METHODS_PROJECT_ID_ACCOUNTS and described as: ",
            "allOf": [
              {
                "$ref": "#/components/schemas/Project"
              }
            ]
          }
        },
        "required": [
          "id",
          "project_id",
          "method",
          "eligibility_types",
          "payment_type",
          "trust_name",
          "trust_address",
          "trust_contact",
          "institution",
          "institution_number",
          "branch_number",
          "bank_account_number",
          "branch_mailing_address",
          "swift_code",
          "sort_order",
          "custom_text",
          "is_active",
          "is_deleted",
          "last_changed_by_id",
          "createtime",
          "updatetime",
          "last_changed_by",
          "project"
        ]
      },
      "ProjectDocusignMapping": {
        "type": "object",
        "properties": {
          "id": {
            "type": "number",
            "description": "the unique internal identifier (primary key) of the row"
          },
          "project_applied_to_id": {
            "type": "number",
            "description": "the project this is for"
          },
          "ordinal_application_order": {
            "type": "number",
            "description": ""
          },
          "docusign_template_guid": {
            "type": "string",
            "description": ""
          },
          "dil_conditions_to_apply": {
            "type": "string",
            "description": ""
          },
          "merge_rules": {
            "type": "string",
            "description": ""
          },
          "is_deleted": {
            "type": "boolean",
            "description": "if true, this row is &quot;logically&quot; deleted. that is, its not to be used any more and is kept for historical/audit purposes only"
          },
          "last_changed_by_id": {
            "type": "number",
            "description": "the id of the user that made the last change or in the case of its initial creation, the user that created it"
          },
          "createtime": {
            "format": "date-time",
            "type": "string",
            "description": "the point in time this row was first created regardless of modifications"
          },
          "updatetime": {
            "format": "date-time",
            "type": "string",
            "description": "the last point in time this row was modified"
          },
          "last_changed_by": {
            "description": "This was created from the details of the foreign key FK_PROJECT_DOCUSIGN_MAPPINGS_LAST_CHANGED_BY_ID_CHANGES and described as: ",
            "allOf": [
              {
                "$ref": "#/components/schemas/AllUser"
              }
            ]
          },
          "project_applied_to": {
            "description": "This was created from the details of the foreign key FK_PROJECT_DOCUSIGN_MAPPINGS_PROJECT_ID_DOCUSIGN_MAPPINGS and described as: ",
            "allOf": [
              {
                "$ref": "#/components/schemas/Project"
              }
            ]
          }
        },
        "required": [
          "id",
          "project_applied_to_id",
          "ordinal_application_order",
          "docusign_template_guid",
          "dil_conditions_to_apply",
          "merge_rules",
          "is_deleted",
          "last_changed_by_id",
          "createtime",
          "updatetime",
          "last_changed_by",
          "project_applied_to"
        ]
      },
      "ProjectEntityDetail": {
        "type": "object",
        "properties": {
          "id": {
            "type": "number",
            "description": "the unique internal identifier (primary key) of the row"
          },
          "project_entity_id": {
            "type": "number",
            "description": "the id of the entity this is details for"
          },
          "f1": {
            "type": "string",
            "description": "the first piece of details. the exact use and type are determined by the entity type"
          },
          "f2": {
            "type": "string",
            "description": "the 2nd piece of details. the exact use and type are determined by the entity type"
          },
          "f3": {
            "type": "string",
            "description": "the 3rd piece of details. the exact use and type are determined by the entity type"
          },
          "f4": {
            "type": "string",
            "description": "the fourth piece of details. the exact use and type are determined by the entity type"
          },
          "f5": {
            "type": "string",
            "description": "the fifth piece of details. the exact use and type are determined by the entity type"
          },
          "f6": {
            "type": "string",
            "description": "the sixth piece of details. the exact use and type are determined by the entity type"
          },
          "f7": {
            "type": "string",
            "description": "the sevenh piece of details. the exact use and type are determined by the entity type"
          },
          "f8": {
            "type": "string",
            "description": "the eigth piece of details. the exact use and type are determined by the entity type"
          },
          "f9": {
            "type": "string",
            "description": "the ninth piece of details. the exact use and type are determined by the entity type"
          },
          "f10": {
            "type": "string",
            "description": "the tenth piece of details. the exact use and type are determined by the entity type"
          },
          "is_deleted": {
            "type": "boolean",
            "description": "if true, this row is &quot;logically&quot; deleted. that is, its not to be used any more and is kept for historical/audit purposes only"
          },
          "last_changed_by_id": {
            "type": "number",
            "description": "the id of the user that made the last change or in the case of its initial creation, the user that created it"
          },
          "createtime": {
            "format": "date-time",
            "type": "string",
            "description": "the point in time this row was first created regardless of modifications"
          },
          "updatetime": {
            "format": "date-time",
            "type": "string",
            "description": "the last point in time this row was modified"
          },
          "last_changed_by": {
            "description": "This was created from the details of the foreign key FK_PROJECT_ENTITY_DETAILS_LAST_CHANGED_BY_ID_CHANGES and described as: ",
            "allOf": [
              {
                "$ref": "#/components/schemas/AllUser"
              }
            ]
          },
          "project_entity": {
            "description": "This was created from the details of the foreign key FK_PROJECT_ENTITY_DETAILS_PROJECT_ENTITY_ID_DETAILS and described as: ",
            "allOf": [
              {
                "$ref": "#/components/schemas/ProjectEntity"
              }
            ]
          }
        },
        "required": [
          "id",
          "project_entity_id",
          "f1",
          "f2",
          "f3",
          "f4",
          "f5",
          "f6",
          "f7",
          "f8",
          "f9",
          "f10",
          "is_deleted",
          "last_changed_by_id",
          "createtime",
          "updatetime",
          "last_changed_by",
          "project_entity"
        ]
      },
      "ProjectImage": {
        "type": "object",
        "properties": {
          "id": {
            "type": "number",
            "description": "the unique internal identifier (primary key) of the row"
          },
          "project_id": {
            "type": "number",
            "description": "the project this is for"
          },
          "project_entity_id": {
            "type": "number",
            "description": "the id of the entity its for"
          },
          "title": {
            "type": "string",
            "description": "the title to show with it"
          },
          "image": {
            "type": "string",
            "description": "a url to the location of the image"
          },
          "sort_order": {
            "type": "number",
            "description": "the ordinal value of the image in the list of images"
          },
          "is_deleted": {
            "type": "boolean",
            "description": "if true, this row is &quot;logically&quot; deleted. that is, its not to be used any more and is kept for historical/audit purposes only"
          },
          "last_changed_by_id": {
            "type": "number",
            "description": "the id of the user that made the last change or in the case of its initial creation, the user that created it"
          },
          "createtime": {
            "format": "date-time",
            "type": "string",
            "description": "the point in time this row was first created regardless of modifications"
          },
          "updatetime": {
            "format": "date-time",
            "type": "string",
            "description": "the last point in time this row was modified"
          },
          "last_changed_by": {
            "description": "This was created from the details of the foreign key FK_PROJECT_IMAGES_LAST_CHANGED_BY_ID_CHANGES and described as: ",
            "allOf": [
              {
                "$ref": "#/components/schemas/AllUser"
              }
            ]
          },
          "project_entity": {
            "description": "This was created from the details of the foreign key FK_PROJECT_IMAGES_PROJECT_ENTITY_ID_IMAGES and described as: ",
            "allOf": [
              {
                "$ref": "#/components/schemas/ProjectEntity"
              }
            ]
          },
          "project": {
            "description": "This was created from the details of the foreign key FK_PROJECT_IMAGES_PROJECT_ID_IMAGES and described as: ",
            "allOf": [
              {
                "$ref": "#/components/schemas/Project"
              }
            ]
          }
        },
        "required": [
          "id",
          "project_id",
          "project_entity_id",
          "title",
          "image",
          "sort_order",
          "is_deleted",
          "last_changed_by_id",
          "createtime",
          "updatetime",
          "last_changed_by",
          "project_entity",
          "project"
        ]
      },
      "ProjectKeybacker": {
        "type": "object",
        "properties": {
          "id": {
            "type": "number",
            "description": "the unique internal identifier (primary key) of the row"
          },
          "project_id": {
            "type": "number",
            "description": "the project this is for"
          },
          "project_entity_id": {
            "type": "number",
            "description": ""
          },
          "name": {
            "type": "string",
            "description": ""
          },
          "type": {
            "type": "string",
            "description": ""
          },
          "city": {
            "type": "string",
            "description": ""
          },
          "work": {
            "type": "string",
            "description": ""
          },
          "info": {
            "type": "string",
            "description": ""
          },
          "image": {
            "type": "string",
            "description": ""
          },
          "sort_order": {
            "type": "number",
            "description": ""
          },
          "is_deleted": {
            "type": "boolean",
            "description": "if true, this row is &quot;logically&quot; deleted. that is, its not to be used any more and is kept for historical/audit purposes only"
          },
          "last_changed_by_id": {
            "type": "number",
            "description": "the id of the user that made the last change or in the case of its initial creation, the user that created it"
          },
          "createtime": {
            "format": "date-time",
            "type": "string",
            "description": "the point in time this row was first created regardless of modifications"
          },
          "updatetime": {
            "format": "date-time",
            "type": "string",
            "description": "the last point in time this row was modified"
          },
          "last_changed_by": {
            "description": "This was created from the details of the foreign key FK_PROJECT_KEYBACKERS_LAST_CHANGED_BY_ID_CHANGES and described as: ",
            "allOf": [
              {
                "$ref": "#/components/schemas/AllUser"
              }
            ]
          },
          "project_entity": {
            "description": "This was created from the details of the foreign key FK_PROJECT_KEYBACKERS_PROJECT_ENTITY_ID_BACKERS and described as: ",
            "allOf": [
              {
                "$ref": "#/components/schemas/ProjectEntity"
              }
            ]
          },
          "project": {
            "description": "This was created from the details of the foreign key FK_PROJECT_KEYBACKERS_PROJECT_ID_BACKERS and described as: ",
            "allOf": [
              {
                "$ref": "#/components/schemas/Project"
              }
            ]
          }
        },
        "required": [
          "id",
          "project_id",
          "project_entity_id",
          "name",
          "type",
          "city",
          "work",
          "info",
          "image",
          "sort_order",
          "is_deleted",
          "last_changed_by_id",
          "createtime",
          "updatetime",
          "last_changed_by",
          "project_entity",
          "project"
        ]
      },
      "ProjectEntity": {
        "type": "object",
        "properties": {
          "id": {
            "type": "number",
            "description": "the unique internal identifier (primary key) of the row"
          },
          "project_id": {
            "type": "number",
            "description": "the project this is for"
          },
          "tab_id": {
            "type": "number",
            "description": "the numerical identier of the tab this should be shown on. there is no construct for tabs so those are inferred from this value"
          },
          "entity_type": {
            "type": "number",
            "description": "the categorzation of the entity. this used for decoding what to do with and how to represent its details"
          },
          "title": {
            "type": "string",
            "description": "the title or textual display for this item"
          },
          "title_2": {
            "type": "string",
            "description": "a secondary title or textual display for this item"
          },
          "contents": {
            "type": "string",
            "description": "a textual description of this entity"
          },
          "image": {
            "type": "string",
            "description": "a url to an image to use to display at the heading"
          },
          "visible": {
            "type": "boolean",
            "description": "if true, this item should be shown"
          },
          "sort_order": {
            "type": "number",
            "description": "the ordinal position of this entity within the project"
          },
          "is_deleted": {
            "type": "boolean",
            "description": "if true, this row is &quot;logically&quot; deleted. that is, its not to be used any more and is kept for historical/audit purposes only"
          },
          "last_changed_by_id": {
            "type": "number",
            "description": "the id of the user that made the last change or in the case of its initial creation, the user that created it"
          },
          "createtime": {
            "format": "date-time",
            "type": "string",
            "description": "the point in time this row was first created regardless of modifications"
          },
          "updatetime": {
            "format": "date-time",
            "type": "string",
            "description": "the last point in time this row was modified"
          },
          "last_changed_by": {
            "description": "This was created from the details of the foreign key FK_PROJECT_ENTITY_LAST_CHANGED_BY_ID_CHANGES and described as: ",
            "allOf": [
              {
                "$ref": "#/components/schemas/AllUser"
              }
            ]
          },
          "project": {
            "description": "This was created from the details of the foreign key FK_PROJECT_ENTITY_PROJECT_ID_ENTITIES and described as: ",
            "allOf": [
              {
                "$ref": "#/components/schemas/Project"
              }
            ]
          },
          "details": {
            "description": "This was created from the details of the foreign key FK_PROJECT_ENTITY_DETAILS_PROJECT_ENTITY_ID_DETAILS and described as: ",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ProjectEntityDetail"
            }
          },
          "images": {
            "description": "This was created from the details of the foreign key FK_PROJECT_IMAGES_PROJECT_ENTITY_ID_IMAGES and described as: ",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ProjectImage"
            }
          },
          "backers": {
            "description": "This was created from the details of the foreign key FK_PROJECT_KEYBACKERS_PROJECT_ENTITY_ID_BACKERS and described as: ",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ProjectKeybacker"
            }
          }
        },
        "required": [
          "id",
          "project_id",
          "tab_id",
          "entity_type",
          "title",
          "title_2",
          "contents",
          "image",
          "visible",
          "sort_order",
          "is_deleted",
          "last_changed_by_id",
          "createtime",
          "updatetime",
          "last_changed_by",
          "project",
          "details",
          "images",
          "backers"
        ]
      },
      "ProjectPdf": {
        "type": "object",
        "properties": {
          "id": {
            "type": "number",
            "description": "the unique internal identifier (primary key) of the row"
          },
          "project_id": {
            "type": "number",
            "description": "the project this is for"
          },
          "project_entity_id": {
            "type": "number",
            "description": "the (optional) id of the project entity this is for"
          },
          "title": {
            "type": "string",
            "description": "the human readable identifier for the document"
          },
          "filename": {
            "type": "string",
            "description": "a url to the pdf"
          },
          "visible": {
            "type": "boolean",
            "description": "if true, the document is shown"
          },
          "sort_order": {
            "type": "number",
            "description": "the ordinal position of this document within others"
          },
          "is_deleted": {
            "type": "boolean",
            "description": "if true, this row is &quot;logically&quot; deleted. that is, its not to be used any more and is kept for historical/audit purposes only"
          },
          "last_changed_by_id": {
            "type": "number",
            "description": "the id of the user that made the last change or in the case of its initial creation, the user that created it"
          },
          "createtime": {
            "format": "date-time",
            "type": "string",
            "description": "the point in time this row was first created regardless of modifications"
          },
          "updatetime": {
            "format": "date-time",
            "type": "string",
            "description": "the last point in time this row was modified"
          },
          "last_changed_by": {
            "description": "This was created from the details of the foreign key FK_PROJECT_PDFS_LAST_CHANGED_BY_ID_CHANGES and described as: ",
            "allOf": [
              {
                "$ref": "#/components/schemas/AllUser"
              }
            ]
          },
          "project": {
            "description": "This was created from the details of the foreign key FK_PROJECT_PDFS_PROJECT_ID_PDFS and described as: ",
            "allOf": [
              {
                "$ref": "#/components/schemas/Project"
              }
            ]
          }
        },
        "required": [
          "id",
          "project_id",
          "project_entity_id",
          "title",
          "filename",
          "visible",
          "sort_order",
          "is_deleted",
          "last_changed_by_id",
          "createtime",
          "updatetime",
          "last_changed_by",
          "project"
        ]
      },
      "ProjectStatusReport": {
        "type": "object",
        "properties": {
          "id": {
            "type": "number",
            "description": "the unique internal identifier (primary key) of the row"
          },
          "project_id": {
            "type": "number",
            "description": "the project this is for"
          },
          "contents": {
            "type": "string",
            "description": "a textual synopsis of the contents of the report"
          },
          "document": {
            "type": "string",
            "description": "a url to where a file with the details of the report is located, typically pdf"
          },
          "report_date": {
            "format": "date-time",
            "type": "string",
            "description": "the date the report was issued FOR, not when it was issued"
          },
          "is_deleted": {
            "type": "boolean",
            "description": "if true, this row is &quot;logically&quot; deleted. that is, its not to be used any more and is kept for historical/audit purposes only"
          },
          "last_changed_by_id": {
            "type": "number",
            "description": "the id of the user that made the last change or in the case of its initial creation, the user that created it"
          },
          "updatetime": {
            "format": "date-time",
            "type": "string",
            "description": "the last point in time this row was modified"
          },
          "createtime": {
            "format": "date-time",
            "type": "string",
            "description": "the point in time this row was first created regardless of modifications"
          },
          "last_changed_by": {
            "description": "This was created from the details of the foreign key FK_PROJECT_STATUS_REPORTS_LAST_CHANGED_BY_ID_CHANGES and described as: ",
            "allOf": [
              {
                "$ref": "#/components/schemas/AllUser"
              }
            ]
          },
          "project": {
            "description": "This was created from the details of the foreign key FK_PROJECT_STATUS_REPORTS_PROJECT_ID_STATUS_REPORTS and described as: ",
            "allOf": [
              {
                "$ref": "#/components/schemas/Project"
              }
            ]
          }
        },
        "required": [
          "id",
          "project_id",
          "contents",
          "document",
          "report_date",
          "is_deleted",
          "last_changed_by_id",
          "updatetime",
          "createtime",
          "last_changed_by",
          "project"
        ]
      },
      "ProjectTaxReport": {
        "type": "object",
        "properties": {
          "id": {
            "type": "number",
            "description": "the unique internal identifier (primary key) of the row"
          },
          "project_id": {
            "type": "number",
            "description": "the project this is for"
          },
          "user_id": {
            "type": "number",
            "description": "the id of the user the taxation is for"
          },
          "taxation_year": {
            "type": "number",
            "description": "the calendar year this represents taxes for"
          },
          "remarks": {
            "type": "string",
            "description": "general remarks about the taxes"
          },
          "document": {
            "type": "string",
            "description": "a url to a file that has the details, typically a pdf"
          },
          "view_count": {
            "type": "number",
            "description": "the number of times its used"
          },
          "is_published": {
            "type": "boolean",
            "description": "if true it has been published"
          },
          "is_deleted": {
            "type": "boolean",
            "description": "if true, this row is &quot;logically&quot; deleted. that is, its not to be used any more and is kept for historical/audit purposes only"
          },
          "last_changed_by_id": {
            "type": "number",
            "description": "the id of the user that made the last change or in the case of its initial creation, the user that created it"
          },
          "createtime": {
            "format": "date-time",
            "type": "string",
            "description": "the point in time this row was first created regardless of modifications"
          },
          "updatetime": {
            "format": "date-time",
            "type": "string",
            "description": "the last point in time this row was modified"
          },
          "last_changed_by": {
            "description": "This was created from the details of the foreign key FK_PROJECT_TAX_REPORTS_LAST_CHANGED_BY_ID_CHANGES and described as: ",
            "allOf": [
              {
                "$ref": "#/components/schemas/AllUser"
              }
            ]
          },
          "project": {
            "description": "This was created from the details of the foreign key FK_PROJECT_TAX_REPORTS_PROJECT_ID_TAX_REPORTS and described as: ",
            "allOf": [
              {
                "$ref": "#/components/schemas/Project"
              }
            ]
          },
          "user": {
            "description": "This was created from the details of the foreign key FK_PROJECT_TAX_REPORTS_USER_ID_TAX_REPORTS and described as: ",
            "allOf": [
              {
                "$ref": "#/components/schemas/AllUser"
              }
            ]
          }
        },
        "required": [
          "id",
          "project_id",
          "user_id",
          "taxation_year",
          "remarks",
          "document",
          "view_count",
          "is_published",
          "is_deleted",
          "last_changed_by_id",
          "createtime",
          "updatetime",
          "last_changed_by",
          "project",
          "user"
        ]
      },
      "ProjectTaxSummary": {
        "type": "object",
        "properties": {
          "id": {
            "type": "number",
            "description": "the unique internal identifier (primary key) of the row"
          },
          "project_id": {
            "type": "number",
            "description": "the project this is for"
          },
          "taxation_year": {
            "type": "number",
            "description": "the calendar year this represents taxes for"
          },
          "remarks": {
            "type": "string",
            "description": "general remarks about the taxes"
          },
          "document": {
            "type": "string",
            "description": "a url to a file that has the details, typically an excel file"
          },
          "view_count": {
            "type": "number",
            "description": "the number of times its used"
          },
          "is_published": {
            "type": "boolean",
            "description": "if true tax reports based ont it have been published"
          },
          "xml_generated": {
            "type": "boolean",
            "description": "if true an XML report based on it has been generated"
          },
          "is_deleted": {
            "type": "boolean",
            "description": "if true, this row is &quot;logically&quot; deleted. that is, its not to be used any more and is kept for historical/audit purposes only"
          },
          "last_changed_by_id": {
            "type": "number",
            "description": "the id of the user that made the last change or in the case of its initial creation, the user that created it"
          },
          "createtime": {
            "format": "date-time",
            "type": "string",
            "description": "the point in time this row was first created regardless of modifications"
          },
          "updatetime": {
            "format": "date-time",
            "type": "string",
            "description": "the last point in time this row was modified"
          },
          "last_changed_by": {
            "description": "This was created from the details of the foreign key FK_PROJECT_TAX_SUMMARIES_LAST_CHANGED_BY_ID_CHANGES and described as: ",
            "allOf": [
              {
                "$ref": "#/components/schemas/AllUser"
              }
            ]
          },
          "project": {
            "description": "This was created from the details of the foreign key FK_PROJECT_TAX_SUMMARIES_PROJECT_ID_TAX_SUMMARIES and described as: ",
            "allOf": [
              {
                "$ref": "#/components/schemas/Project"
              }
            ]
          }
        },
        "required": [
          "id",
          "project_id",
          "taxation_year",
          "remarks",
          "document",
          "view_count",
          "is_published",
          "xml_generated",
          "is_deleted",
          "last_changed_by_id",
          "createtime",
          "updatetime",
          "last_changed_by",
          "project"
        ]
      },
      "ExemptDistributionOption": {
        "type": "object",
        "properties": {
          "id": {
            "type": "number",
            "description": "the unique internal identifier (primary key) of the row"
          },
          "category": {
            "type": "number",
            "description": "the type of option it is"
          },
          "code": {
            "type": "string",
            "description": "a short code denotig the option"
          },
          "detail": {
            "type": "string",
            "description": "a more verbose description of the option"
          },
          "sort_order": {
            "type": "number",
            "description": "the ordinal position of the item in a list of these items"
          },
          "inactive": {
            "type": "boolean",
            "description": "if true, the item is no longer active and should not be used"
          },
          "regional_variation_of": {
            "type": "string",
            "description": "the name of the item this row, and others, are regional variations of"
          },
          "is_deleted": {
            "type": "boolean",
            "description": "if true, this row is &quot;logically&quot; deleted. that is, its not to be used any more and is kept for historical/audit purposes only"
          },
          "last_changed_by_id": {
            "type": "number",
            "description": "the id of the user that made the last change or in the case of its initial creation, the user that created it"
          },
          "createtime": {
            "format": "date-time",
            "type": "string",
            "description": "the point in time this row was first created regardless of modifications"
          },
          "updatetime": {
            "format": "date-time",
            "type": "string",
            "description": "the last point in time this row was modified"
          },
          "last_changed_by": {
            "description": "This was created from the details of the foreign key FK_PROJECT_ROED_LAST_CHANGED_BY_ID_CHANGES and described as: ",
            "allOf": [
              {
                "$ref": "#/components/schemas/AllUser"
              }
            ]
          },
          "projects": {
            "description": "This was created from the details of the foreign key FK_PROJECTS_ROED_SECURITYCODE_PROJECTS and described as: ",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Project"
            }
          }
        },
        "required": [
          "id",
          "category",
          "code",
          "detail",
          "sort_order",
          "inactive",
          "regional_variation_of",
          "is_deleted",
          "last_changed_by_id",
          "createtime",
          "updatetime",
          "last_changed_by",
          "projects"
        ]
      },
      "RoedSchedule1": {
        "type": "object",
        "properties": {
          "id": {
            "type": "number",
            "description": "the unique internal identifier (primary key) of the row"
          },
          "name": {
            "type": "string",
            "description": "a human readable identifier of the report"
          },
          "remarks": {
            "type": "string",
            "description": "general remarks about the report"
          },
          "project_id": {
            "type": "number",
            "description": "the project it belongs to"
          },
          "document": {
            "type": "string",
            "description": "a url to a file that has the report, usually an excel file"
          },
          "filed_rows_to_ignore": {
            "type": "string",
            "description": "a list of rows to be ignored in the filed document"
          },
          "status": {
            "type": "number",
            "description": "the current state of the schedule 1"
          },
          "is_deleted": {
            "type": "boolean",
            "description": "if true, this row is &quot;logically&quot; deleted. that is, its not to be used any more and is kept for historical/audit purposes only"
          },
          "last_changed_by_id": {
            "type": "number",
            "description": "the id of the user that made the last change or in the case of its initial creation, the user that created it"
          },
          "createtime": {
            "format": "date-time",
            "type": "string",
            "description": "the point in time this row was first created regardless of modifications"
          },
          "updatetime": {
            "format": "date-time",
            "type": "string",
            "description": "the last point in time this row was modified"
          },
          "orders": {
            "description": "This was created from the details of the foreign key FK_INVESTMENT_ORDERS_ROED_SCHEDULE1_ID_ORDERS and described as: ",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/InvestmentOrder"
            }
          },
          "last_changed_by": {
            "description": "This was created from the details of the foreign key FK_ROED_SCHEDULE1S_LAST_CHANGED_BY_ID_CHANGES and described as: ",
            "allOf": [
              {
                "$ref": "#/components/schemas/AllUser"
              }
            ]
          },
          "project": {
            "description": "This was created from the details of the foreign key FK_ROED_SCHEDULE1S_TO_PROJECTS and described as: ",
            "allOf": [
              {
                "$ref": "#/components/schemas/Project"
              }
            ]
          }
        },
        "required": [
          "id",
          "name",
          "remarks",
          "project_id",
          "document",
          "filed_rows_to_ignore",
          "status",
          "is_deleted",
          "last_changed_by_id",
          "createtime",
          "updatetime",
          "orders",
          "last_changed_by",
          "project"
        ]
      },
      "WebHook": {
        "type": "object",
        "properties": {
          "id": {
            "type": "number",
            "description": "the unique internal identifier (primary key) of the row"
          },
          "event_type": {
            "type": "string",
            "description": "the type of event that triggers this hook being called"
          },
          "url": {
            "type": "string",
            "description": "the url that gets called"
          },
          "user_id": {
            "type": "number",
            "description": "the user that the hook listens to"
          },
          "project_id": {
            "type": "number",
            "description": "the project that the hook listens to"
          },
          "issuer_id": {
            "type": "number",
            "description": "the issuer (social profile) the that hook listens to"
          },
          "is_deleted": {
            "type": "boolean",
            "description": "if true, this row is &quot;logically&quot; deleted. that is, its not to be used any more and is kept for historical/audit purposes only"
          },
          "last_changed_by_id": {
            "type": "number",
            "description": "the id of the user that made the last change or in the case of its initial creation, the user that created it"
          },
          "updatetime": {
            "format": "date-time",
            "type": "string",
            "description": "the last point in time this row was modified"
          },
          "createtime": {
            "format": "date-time",
            "type": "string",
            "description": "the point in time this row was first created regardless of modifications"
          },
          "issuer": {
            "description": "This was created from the details of the foreign key FK_WEB_HOOKS_TO_ISSUER and described as: ",
            "allOf": [
              {
                "$ref": "#/components/schemas/UserSocialProfile"
              }
            ]
          },
          "last_changed_by": {
            "description": "This was created from the details of the foreign key FK_WEB_HOOKS_LAST_CHANGED_BY_ID_CHANGES and described as: ",
            "allOf": [
              {
                "$ref": "#/components/schemas/AllUser"
              }
            ]
          },
          "project": {
            "description": "This was created from the details of the foreign key FK_WEB_HOOKS_PROJECT and described as: ",
            "allOf": [
              {
                "$ref": "#/components/schemas/Project"
              }
            ]
          },
          "user": {
            "description": "This was created from the details of the foreign key FK_WEB_HOOKS_TO_USER and described as: ",
            "allOf": [
              {
                "$ref": "#/components/schemas/AllUser"
              }
            ]
          }
        },
        "required": [
          "id",
          "event_type",
          "url",
          "user_id",
          "project_id",
          "issuer_id",
          "is_deleted",
          "last_changed_by_id",
          "updatetime",
          "createtime",
          "issuer",
          "last_changed_by",
          "project",
          "user"
        ]
      },
      "Project": {
        "type": "object",
        "properties": {
          "id": {
            "type": "number",
            "description": "the unique internal identifier (primary key) of the row"
          },
          "project_no": {
            "type": "number",
            "description": "the human readable identifier of the project"
          },
          "name": {
            "type": "string",
            "description": "the spoken identifier of the project"
          },
          "legal_name": {
            "type": "string",
            "description": "the registered, legal representation of the human readable identifier"
          },
          "short_name": {
            "type": "string",
            "description": "a short-form human-readable identifier for when the long-form identifier is too long"
          },
          "unit_class": {
            "type": "string",
            "description": "the class of the units on offer"
          },
          "unit_series": {
            "type": "string",
            "description": "the series of the units on offer"
          },
          "seoname": {
            "type": "string",
            "description": "the name to use in seo placement"
          },
          "contents": {
            "type": "string",
            "description": "a verbose description of the project, essentially a first level marketing description"
          },
          "sponsor_label": {
            "type": "boolean",
            "description": "if true, show the sponsor label"
          },
          "issuer_id": {
            "type": "number",
            "description": "the id of the organization that is issuing the project"
          },
          "project_stage": {
            "type": "number",
            "description": "a classification of where the project is along in its life cycle"
          },
          "notification": {
            "type": "boolean",
            "description": "if true (1) send notifications to investors"
          },
          "capital_type": {
            "type": "number",
            "description": ""
          },
          "asset_type": {
            "type": "number",
            "description": "the type of asset being offered"
          },
          "development_type": {
            "type": "number",
            "description": "the type of development"
          },
          "sync_to_hubspot": {
            "type": "number",
            "description": "if true, move the data to hubspot"
          },
          "offering_amount": {
            "type": "number",
            "description": "the amount that is being raised"
          },
          "annual_irr": {
            "type": "string",
            "description": "the expected range of annual return"
          },
          "loan_to_value_ratio": {
            "type": "string",
            "description": "the percentage of overall value the load represents"
          },
          "matrix_id": {
            "type": "number",
            "description": "?"
          },
          "matrix_input": {
            "type": "string",
            "description": "?"
          },
          "currency_label": {
            "type": "number",
            "description": "the currency the prices are quoted in"
          },
          "total_share": {
            "type": "number",
            "description": "the total number of shares for purchase"
          },
          "share_price": {
            "type": "number",
            "description": "the current price shares are being offered for purchase at"
          },
          "market_price": {
            "type": "number",
            "description": "the perceived market value of the shares"
          },
          "sale_price": {
            "type": "number",
            "description": "the price the shares have most recently transacted at"
          },
          "default_share": {
            "type": "number",
            "description": ""
          },
          "min_share": {
            "type": "number",
            "description": "the minimum number of shares that must be purchased to participate in this project"
          },
          "max_share": {
            "type": "number",
            "description": "the maximum number of shares that can be owned when a party is participating in the project"
          },
          "interest_rate": {
            "type": "string",
            "description": "the percentage rate, expressed as a string, interest will be charged at"
          },
          "investment_term": {
            "type": "string",
            "description": "the length of the investment (typed free form)"
          },
          "minimum_duration_units": {
            "type": "number",
            "description": ""
          },
          "maximum_duration_units": {
            "type": "number",
            "description": ""
          },
          "minimum_duration_type": {
            "type": "number",
            "description": "the period of time used in minimum duration"
          },
          "maximum_duration_type": {
            "type": "number",
            "description": "the period of time used in maximum duration"
          },
          "daysleft_flag": {
            "type": "boolean",
            "description": "the number of days left for funding activities"
          },
          "funded_flag": {
            "type": "boolean",
            "description": "if true, all funds have been raised and it is closed to further investments"
          },
          "dividend_desc": {
            "type": "string",
            "description": "a narrative of where/how the dividends, if any, are expected to be returned from"
          },
          "debt_seniority": {
            "type": "number",
            "description": "a statement of the order in which this debt is repaid compared to other debt"
          },
          "redeem_ability": {
            "type": "string",
            "description": "if true, it can be redeemed prior to ending"
          },
          "investment_eligibility": {
            "type": "string",
            "description": "the type of accounts and/or organizations that can take advantage of this funding"
          },
          "redemption_info": {
            "type": "string",
            "description": "the rules that must be obsered about redeeming shares"
          },
          "address": {
            "type": "string",
            "description": "the street/local address of the project"
          },
          "zip": {
            "type": "string",
            "description": "the postal code of the project"
          },
          "city": {
            "type": "string",
            "description": "the municiple location of the porject"
          },
          "province_id": {
            "type": "number",
            "description": "the id of the province that the project is in"
          },
          "country_id": {
            "type": "number",
            "description": "the id of the country the project is in"
          },
          "image": {
            "type": "string",
            "description": "a url to the primary image to display for marketing this project"
          },
          "credit_guarantee": {
            "type": "string",
            "description": "a description of the assets, steps and/or actions to ensure there is no loss of captial to investors"
          },
          "issuer_business": {
            "type": "string",
            "description": "the primary business the issuer engages in"
          },
          "agent_name": {
            "type": "string",
            "description": "the name of the organization that is placing the securities"
          },
          "commission_type": {
            "type": "number",
            "description": "the method use for determining the commission paid to the agent"
          },
          "agent_commission": {
            "type": "number",
            "description": "the numberical amount for the commission that agent is taking. this has to be used with commission_type to determine whether its a pecentage or dollar amount"
          },
          "registrant_contact": {
            "type": "string",
            "description": "the contact details for the registrant"
          },
          "use_of_proceeds": {
            "type": "string",
            "description": "a statement of how the issuer intends to use the funds that are raised"
          },
          "additional_desc": {
            "type": "string",
            "description": "additional ^ separated name value pairs of properties about the project. eg Trustee~Some Trust Company, or such other trust company as may be selected by the Manager^Auditor~KPMG LLP^Fund Administrator~My Fund Services Ltd."
          },
          "acknowledgements": {
            "type": "string",
            "description": "a ^ separated list of questions that the user must acknowledge prior to investing"
          },
          "long_desc": {
            "type": "string",
            "description": "a longer descriptive text for display"
          },
          "disclaimer_note": {
            "type": "string",
            "description": "text to show as a disclaime prior to investments proceeding"
          },
          "properties": {
            "type": "string",
            "description": "a ^ separated list of key value pairs to provide additional properties about the project"
          },
          "tabs": {
            "type": "string",
            "description": "a ^ separate list of the name of tabs to display project entities on"
          },
          "is_private": {
            "type": "boolean",
            "description": "if true, it should be private"
          },
          "private_ids": {
            "type": "string",
            "description": "a comma separate list of user ids that are specifically permitted to view this project even if its private"
          },
          "auto_invite": {
            "type": "boolean",
            "description": ""
          },
          "allow_ineligible": {
            "type": "boolean",
            "description": ""
          },
          "system_status": {
            "type": "number",
            "description": "the state of the project for use in the system"
          },
          "drip_available": {
            "type": "boolean",
            "description": "if true, project has a dividend reinvestment plan available, and the user should be asked if they wish to sign up for it in the order process"
          },
          "use_system_om": {
            "type": "boolean",
            "description": "if true, the project should use the OM programmed into the system rather than DocuSign"
          },
          "calc_months_remaining": {
            "type": "boolean",
            "description": "if true, the project should automatically calculate the months remaining in the term for display on the front end"
          },
          "allow_joint_subscription": {
            "type": "boolean",
            "description": "if true, the project allows for joint subscription, and should ask the user if they intend to do so during the order process"
          },
          "investments_locked": {
            "type": "boolean",
            "description": "if true, the project does not currently allow for any further orders to be started"
          },
          "hide_est_complete_date": {
            "type": "boolean",
            "description": "if true, the project will not show its estimated completion date in the UI"
          },
          "continuous_offering": {
            "type": "boolean",
            "description": "if true, the projects settlement date should always be the first of the following month"
          },
          "show_on_home": {
            "type": "boolean",
            "description": "if true, this should be shown on the &quot;home&quot; page"
          },
          "over_subscriptions": {
            "type": "boolean",
            "description": "if true over subscriptions should be allowed"
          },
          "exempt_option_id": {
            "type": "number",
            "description": "the id of its exemption"
          },
          "roed_exemption": {
            "type": "boolean",
            "description": "if true it is exempt"
          },
          "roed_exemption_list": {
            "type": "string",
            "description": "stores a CSV list of IDs for the ROED exemptions under which investors can invest in this project"
          },
          "view_counts": {
            "type": "number",
            "description": "?"
          },
          "sort_order": {
            "type": "number",
            "description": "the ordinal position of the project displayed with others"
          },
          "docusign_template_dev_test": {
            "type": "string",
            "description": "the docusign id of the docusign template that will be used for testing signing documents"
          },
          "docusign_template_production": {
            "type": "string",
            "description": "the docusign id of the docusign template that will be used for production document signing.  NOTE: this should always be a clone of the dev/test document. A change should occur in test first then be COPIED to prod"
          },
          "docusign_template_merge_rules": {
            "type": "string",
            "description": "the rules for merging data from the database into docusign. NOTE: its important that both the dev/test and prod documents match this mapping!"
          },
          "docusign_additional_recipients_sending_order": {
            "type": "string",
            "description": ""
          },
          "docusign_additional_recipients_role_name": {
            "type": "string",
            "description": ""
          },
          "docusign_additional_recipients_person_name": {
            "type": "string",
            "description": ""
          },
          "docusign_additional_recipients_person_email": {
            "type": "string",
            "description": ""
          },
          "trust_company_names": {
            "type": "string",
            "description": "a CSV list of the names of the trust companies involved with this project"
          },
          "funding_start": {
            "format": "date-time",
            "type": "string",
            "description": "the point in time that funding will start being placed"
          },
          "funding_expiry": {
            "format": "date-time",
            "type": "string",
            "description": "the date that funding is set to cease even if its not full"
          },
          "maturity_date": {
            "format": "date-time",
            "type": "string",
            "description": "the date that the investment completes/matures/ends"
          },
          "hubspot_id": {
            "type": "string",
            "description": ""
          },
          "is_deleted": {
            "type": "boolean",
            "description": "if true, this row is &quot;logically&quot; deleted. that is, its not to be used any more and is kept for historical/audit purposes only"
          },
          "last_changed_by_id": {
            "type": "number",
            "description": "the id of the user that made the last change or in the case of its initial creation, the user that created it"
          },
          "createtime": {
            "format": "date-time",
            "type": "string",
            "description": "the point in time this row was first created regardless of modifications"
          },
          "updatetime": {
            "format": "date-time",
            "type": "string",
            "description": "the last point in time this row was modified"
          },
          "events_project": {
            "description": "This was created from the details of the foreign key EVENTS_PROJECT and described as: ",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Event"
            }
          },
          "ffba_association_to_project": {
            "description": "This was created from the details of the foreign key FK_FFBA_ASSOCIATION_TO_PROJECT and described as: ",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FfbaAssociation"
            }
          },
          "orders": {
            "description": "This was created from the details of the foreign key FK_INVESTMENT_ORDERS_PROJECT_ID_ORDERS and described as: ",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/InvestmentOrder"
            }
          },
          "transactions": {
            "description": "This was created from the details of the foreign key FK_INVESTMENT_TRANSACTION_PROJECT_ID_TRANSACTIONS and described as: ",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/InvestmentTransaction"
            }
          },
          "watches": {
            "description": "This was created from the details of the foreign key FK_INVESTMENT_WATCHLIST_PROJECT_ID_WATCHES and described as: ",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/InvestmentWatchlist"
            }
          },
          "investor_earnings": {
            "description": "This was created from the details of the foreign key FK_INVESTOR_EARNINGS_PROJECT_ID_INVESTOR_EARNINGS and described as: ",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/InvestorEarning"
            }
          },
          "accounts": {
            "description": "This was created from the details of the foreign key FK_PAYMENT_METHODS_PROJECT_ID_ACCOUNTS and described as: ",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ProjectAccount"
            }
          },
          "project_docusign_mappings_project_id_docusign_mappings": {
            "description": "This was created from the details of the foreign key FK_PROJECT_DOCUSIGN_MAPPINGS_PROJECT_ID_DOCUSIGN_MAPPINGS and described as: ",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ProjectDocusignMapping"
            }
          },
          "adjustments": {
            "description": "This was created from the details of the foreign key FK_PROJECT_EARNINGS_PROJECT_ID_ADJUSTMENTS and described as: ",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ProjectBalanceAdjustment"
            }
          },
          "entities": {
            "description": "This was created from the details of the foreign key FK_PROJECT_ENTITY_PROJECT_ID_ENTITIES and described as: ",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ProjectEntity"
            }
          },
          "images": {
            "description": "This was created from the details of the foreign key FK_PROJECT_IMAGES_PROJECT_ID_IMAGES and described as: ",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ProjectImage"
            }
          },
          "backers": {
            "description": "This was created from the details of the foreign key FK_PROJECT_KEYBACKERS_PROJECT_ID_BACKERS and described as: ",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ProjectKeybacker"
            }
          },
          "pdfs": {
            "description": "This was created from the details of the foreign key FK_PROJECT_PDFS_PROJECT_ID_PDFS and described as: ",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ProjectPdf"
            }
          },
          "status_reports": {
            "description": "This was created from the details of the foreign key FK_PROJECT_STATUS_REPORTS_PROJECT_ID_STATUS_REPORTS and described as: ",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ProjectStatusReport"
            }
          },
          "tax_reports": {
            "description": "This was created from the details of the foreign key FK_PROJECT_TAX_REPORTS_PROJECT_ID_TAX_REPORTS and described as: ",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ProjectTaxReport"
            }
          },
          "tax_summaries": {
            "description": "This was created from the details of the foreign key FK_PROJECT_TAX_SUMMARIES_PROJECT_ID_TAX_SUMMARIES and described as: ",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ProjectTaxSummary"
            }
          },
          "country": {
            "description": "This was created from the details of the foreign key FK_PROJECTS_COUNTRY_ID_PROJECTS and described as: ",
            "allOf": [
              {
                "$ref": "#/components/schemas/Country"
              }
            ]
          },
          "issuer": {
            "description": "This was created from the details of the foreign key FK_PROJECTS_ISSUER_ID_PROJECTS and described as: ",
            "allOf": [
              {
                "$ref": "#/components/schemas/UserSocialProfile"
              }
            ]
          },
          "last_changed_by": {
            "description": "This was created from the details of the foreign key FK_PROJECTS_LAST_CHANGED_BY_ID_CHANGES and described as: ",
            "allOf": [
              {
                "$ref": "#/components/schemas/AllUser"
              }
            ]
          },
          "province": {
            "description": "This was created from the details of the foreign key FK_PROJECTS_PROVINCE_ID_PROJECTS and described as: ",
            "allOf": [
              {
                "$ref": "#/components/schemas/Province"
              }
            ]
          },
          "exempt_option": {
            "description": "This was created from the details of the foreign key FK_PROJECTS_ROED_SECURITYCODE_PROJECTS and described as: ",
            "allOf": [
              {
                "$ref": "#/components/schemas/ExemptDistributionOption"
              }
            ]
          },
          "roed_schedule1_s_to_projects": {
            "description": "This was created from the details of the foreign key FK_ROED_SCHEDULE1S_TO_PROJECTS and described as: ",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RoedSchedule1"
            }
          },
          "users_socialprofile_project_id_profiles": {
            "description": "This was created from the details of the foreign key FK_USERS_SOCIALPROFILE_PROJECT_ID_PROFILES and described as: ",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserSocialProfile"
            }
          },
          "web_hooks_project": {
            "description": "This was created from the details of the foreign key FK_WEB_HOOKS_PROJECT and described as: ",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/WebHook"
            }
          }
        },
        "required": [
          "id",
          "project_no",
          "name",
          "legal_name",
          "short_name",
          "unit_class",
          "unit_series",
          "seoname",
          "contents",
          "sponsor_label",
          "issuer_id",
          "project_stage",
          "notification",
          "capital_type",
          "asset_type",
          "development_type",
          "sync_to_hubspot",
          "offering_amount",
          "annual_irr",
          "loan_to_value_ratio",
          "matrix_id",
          "matrix_input",
          "currency_label",
          "total_share",
          "share_price",
          "market_price",
          "sale_price",
          "default_share",
          "min_share",
          "max_share",
          "interest_rate",
          "investment_term",
          "minimum_duration_units",
          "maximum_duration_units",
          "minimum_duration_type",
          "maximum_duration_type",
          "daysleft_flag",
          "funded_flag",
          "dividend_desc",
          "debt_seniority",
          "redeem_ability",
          "investment_eligibility",
          "redemption_info",
          "address",
          "zip",
          "city",
          "province_id",
          "country_id",
          "image",
          "credit_guarantee",
          "issuer_business",
          "agent_name",
          "commission_type",
          "agent_commission",
          "registrant_contact",
          "use_of_proceeds",
          "additional_desc",
          "acknowledgements",
          "long_desc",
          "disclaimer_note",
          "properties",
          "tabs",
          "is_private",
          "private_ids",
          "auto_invite",
          "allow_ineligible",
          "system_status",
          "drip_available",
          "use_system_om",
          "calc_months_remaining",
          "allow_joint_subscription",
          "investments_locked",
          "hide_est_complete_date",
          "continuous_offering",
          "show_on_home",
          "over_subscriptions",
          "exempt_option_id",
          "roed_exemption",
          "roed_exemption_list",
          "view_counts",
          "sort_order",
          "docusign_template_dev_test",
          "docusign_template_production",
          "docusign_template_merge_rules",
          "docusign_additional_recipients_sending_order",
          "docusign_additional_recipients_role_name",
          "docusign_additional_recipients_person_name",
          "docusign_additional_recipients_person_email",
          "trust_company_names",
          "funding_start",
          "funding_expiry",
          "maturity_date",
          "hubspot_id",
          "is_deleted",
          "last_changed_by_id",
          "createtime",
          "updatetime",
          "events_project",
          "ffba_association_to_project",
          "orders",
          "transactions",
          "watches",
          "investor_earnings",
          "accounts",
          "project_docusign_mappings_project_id_docusign_mappings",
          "adjustments",
          "entities",
          "images",
          "backers",
          "pdfs",
          "status_reports",
          "tax_reports",
          "tax_summaries",
          "country",
          "issuer",
          "last_changed_by",
          "province",
          "exempt_option",
          "roed_schedule1_s_to_projects",
          "users_socialprofile_project_id_profiles",
          "web_hooks_project"
        ]
      },
      "ProjectInterest": {
        "type": "object",
        "properties": {
          "id": {
            "type": "number",
            "description": "the unique internal identifier (primary key) of the row"
          },
          "interest_by_id": {
            "type": "number",
            "description": "the id of the profile of the person interested"
          },
          "interest_in_id": {
            "type": "number",
            "description": "the id of the property they have an interest in"
          },
          "amount_to_invest": {
            "type": "number",
            "description": "an amount the person would expect to invest"
          },
          "time_until_investment": {
            "type": "string",
            "description": "the time period that they would like to invest within"
          },
          "remarks": {
            "type": "string",
            "description": "general remarks about the potential invesmtent"
          },
          "status": {
            "type": "number",
            "description": "doesnt seem used"
          },
          "is_deleted": {
            "type": "boolean",
            "description": "if true, this row is &quot;logically&quot; deleted. that is, its not to be used any more and is kept for historical/audit purposes only"
          },
          "last_changed_by_id": {
            "type": "number",
            "description": "the id of the user that made the last change or in the case of its initial creation, the user that created it"
          },
          "createtime": {
            "format": "date-time",
            "type": "string",
            "description": "the point in time this row was first created regardless of modifications"
          },
          "updatetime": {
            "format": "date-time",
            "type": "string",
            "description": "the last point in time this row was modified"
          },
          "interest_by": {
            "description": "This was created from the details of the foreign key FK_PROPERTY_INTEREST_INTEREST_BY_ID_INTERESTS and described as: ",
            "allOf": [
              {
                "$ref": "#/components/schemas/UserSocialProfile"
              }
            ]
          },
          "interest_in": {
            "description": "This was created from the details of the foreign key FK_PROPERTY_INTEREST_INTEREST_IN_ID_INVESTOR_INTERESTS and described as: ",
            "allOf": [
              {
                "$ref": "#/components/schemas/UserSocialProfile"
              }
            ]
          },
          "last_changed_by": {
            "description": "This was created from the details of the foreign key FK_PROPERTY_INTEREST_LAST_CHANGED_BY_ID_CHANGES and described as: ",
            "allOf": [
              {
                "$ref": "#/components/schemas/AllUser"
              }
            ]
          }
        },
        "required": [
          "id",
          "interest_by_id",
          "interest_in_id",
          "amount_to_invest",
          "time_until_investment",
          "remarks",
          "status",
          "is_deleted",
          "last_changed_by_id",
          "createtime",
          "updatetime",
          "interest_by",
          "interest_in",
          "last_changed_by"
        ]
      },
      "UserIssuerAssociation": {
        "type": "object",
        "properties": {
          "id": {
            "type": "number",
            "description": "the unique, internal identifier for the association"
          },
          "user_id": {
            "type": "number",
            "description": "the id of the user that has a direct association with an issuer"
          },
          "issuer_id": {
            "type": "number",
            "description": "the issuer that has the association with the user"
          },
          "association_type": {
            "type": "string",
            "description": "a characterization of the association between the user and the issuer"
          },
          "is_deleted": {
            "type": "boolean",
            "description": "if true, this row is &quot;logically&quot; deleted. that is, its not to be used any more and is kept for historical/audit purposes only"
          },
          "last_changed_by_id": {
            "type": "number",
            "description": "the id of the user that made the last change or in the case of its initial creation, the user that created it"
          },
          "createtime": {
            "format": "date-time",
            "type": "string",
            "description": "the point in time this row was first created regardless of modifications"
          },
          "updatetime": {
            "format": "date-time",
            "type": "string",
            "description": "the last point in time this row was modified"
          },
          "issuer": {
            "description": "This was created from the details of the foreign key FK_USER_ISSUER_ASSOCIATIONS_TO_ISSUER_ID_ASSOCIATED_USERS and described as: ",
            "allOf": [
              {
                "$ref": "#/components/schemas/UserSocialProfile"
              }
            ]
          },
          "last_changed_by": {
            "description": "This was created from the details of the foreign key FK_USER_ISSUER_ASSOCIATIONS_LAST_CHANGED_BY_ID_CHANGES and described as: ",
            "allOf": [
              {
                "$ref": "#/components/schemas/AllUser"
              }
            ]
          },
          "user": {
            "description": "This was created from the details of the foreign key FK_USER_ISSUER_ASSOCIATIONS_TO_USER_ID_ISSUER_ASSOCIATIONS and described as: ",
            "allOf": [
              {
                "$ref": "#/components/schemas/AllUser"
              }
            ]
          }
        },
        "required": [
          "id",
          "user_id",
          "issuer_id",
          "association_type",
          "is_deleted",
          "last_changed_by_id",
          "createtime",
          "updatetime",
          "issuer",
          "last_changed_by",
          "user"
        ]
      },
      "SocialProfileFollowing": {
        "type": "object",
        "properties": {
          "id": {
            "type": "number",
            "description": "the unique internal identifier (primary key) of the row"
          },
          "following_id": {
            "type": "number",
            "description": "the id of the user that is being observed"
          },
          "follower_id": {
            "type": "number",
            "description": "the id of the user that is observing"
          },
          "status": {
            "type": "number",
            "description": "the current state of the connection"
          },
          "is_deleted": {
            "type": "boolean",
            "description": "if true, this row is &quot;logically&quot; deleted. that is, its not to be used any more and is kept for historical/audit purposes only"
          },
          "last_changed_by_id": {
            "type": "number",
            "description": "the id of the user that made the last change or in the case of its initial creation, the user that created it"
          },
          "createtime": {
            "format": "date-time",
            "type": "string",
            "description": "the point in time this row was first created regardless of modifications"
          },
          "updatetime": {
            "format": "date-time",
            "type": "string",
            "description": "the last point in time this row was modified"
          },
          "last_changed_by": {
            "description": "This was created from the details of the foreign key FK_USERS_SOCIAL_LINKUP_LAST_CHANGED_BY_ID_CHANGES and described as: ",
            "allOf": [
              {
                "$ref": "#/components/schemas/AllUser"
              }
            ]
          },
          "follower": {
            "description": "This was created from the details of the foreign key FK_USERS_SOCIAL_LINKUP_LINK_ID_FOLLOWERS and described as: ",
            "allOf": [
              {
                "$ref": "#/components/schemas/UserSocialProfile"
              }
            ]
          },
          "following": {
            "description": "This was created from the details of the foreign key FK_USERS_SOCIAL_LINKUP_PROFILE_ID_FOLLOWING and described as: ",
            "allOf": [
              {
                "$ref": "#/components/schemas/UserSocialProfile"
              }
            ]
          }
        },
        "required": [
          "id",
          "following_id",
          "follower_id",
          "status",
          "is_deleted",
          "last_changed_by_id",
          "createtime",
          "updatetime",
          "last_changed_by",
          "follower",
          "following"
        ]
      },
      "UserSocialPost": {
        "type": "object",
        "properties": {
          "id": {
            "type": "number",
            "description": "the unique internal identifier (primary key) of the row"
          },
          "post_type": {
            "type": "string",
            "description": "a categorization of the post type. some of the fields below are directly dependent upon the post type for their context"
          },
          "profile_id": {
            "type": "number",
            "description": "the id of the user profile that originated the item to be shared"
          },
          "related_profile_id": {
            "type": "number",
            "description": "the id of of a related profile. the specific purpose of this link is dependent upon the type of post"
          },
          "related_post_id": {
            "type": "number",
            "description": "the id of a post that this is related to"
          },
          "status": {
            "type": "number",
            "description": "the state the post may be in"
          },
          "post": {
            "type": "string",
            "description": "the text of this post"
          },
          "image": {
            "type": "string",
            "description": "a url to an image to display alongside this post"
          },
          "link": {
            "type": "string",
            "description": "doesnt seem to be used"
          },
          "is_deleted": {
            "type": "boolean",
            "description": "if true, this row is &quot;logically&quot; deleted. that is, its not to be used any more and is kept for historical/audit purposes only"
          },
          "last_changed_by_id": {
            "type": "number",
            "description": "the id of the user that made the last change or in the case of its initial creation, the user that created it"
          },
          "createtime": {
            "format": "date-time",
            "type": "string",
            "description": "the point in time this row was first created regardless of modifications"
          },
          "updatetime": {
            "format": "date-time",
            "type": "string",
            "description": "the last point in time this row was modified"
          },
          "last_changed_by": {
            "description": "This was created from the details of the foreign key FK_USERS_SOCIAL_POST_LAST_CHANGED_BY_ID_CHANGES and described as: ",
            "allOf": [
              {
                "$ref": "#/components/schemas/AllUser"
              }
            ]
          },
          "related_profile": {
            "description": "This was created from the details of the foreign key FK_USERS_SOCIAL_POST_LINK_ID_POSTS and described as: ",
            "allOf": [
              {
                "$ref": "#/components/schemas/UserSocialProfile"
              }
            ]
          },
          "profile": {
            "description": "This was created from the details of the foreign key FK_USERS_SOCIAL_POST_PROFILE_ID_POSTS and described as: ",
            "allOf": [
              {
                "$ref": "#/components/schemas/UserSocialProfile"
              }
            ]
          },
          "related_post": {
            "description": "This was created from the details of the foreign key FK_USERS_SOCIAL_POST_RELATED_POST_ID_RELATED_TO and described as: ",
            "allOf": [
              {
                "$ref": "#/components/schemas/UserSocialPost"
              }
            ]
          },
          "related_to": {
            "description": "This was created from the details of the foreign key FK_USERS_SOCIAL_POST_RELATED_POST_ID_RELATED_TO and described as: ",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserSocialPost"
            }
          }
        },
        "required": [
          "id",
          "post_type",
          "profile_id",
          "related_profile_id",
          "related_post_id",
          "status",
          "post",
          "image",
          "link",
          "is_deleted",
          "last_changed_by_id",
          "createtime",
          "updatetime",
          "last_changed_by",
          "related_profile",
          "profile",
          "related_post",
          "related_to"
        ]
      },
      "UserSocialProfile": {
        "type": "object",
        "properties": {
          "id": {
            "type": "number",
            "description": "the unique internal identifier (primary key) of the row"
          },
          "user_id": {
            "type": "number",
            "description": "the user this is for"
          },
          "name": {
            "type": "string",
            "description": "the name of the project the profile is for"
          },
          "image": {
            "type": "string",
            "description": "a url to an image to use to represent the profile"
          },
          "facebook": {
            "type": "string",
            "description": "a url to the facebook presence for the profile"
          },
          "twitter": {
            "type": "string",
            "description": "a url to the twitter feed for the profile"
          },
          "linkedin": {
            "type": "string",
            "description": "a url to the linked in presence for the profile"
          },
          "status": {
            "type": "number",
            "description": "?"
          },
          "notification": {
            "type": "boolean",
            "description": "for user profiles, if true the user should receive notification"
          },
          "is_deleted": {
            "type": "boolean",
            "description": "if true, this row is &quot;logically&quot; deleted. that is, its not to be used any more and is kept for historical/audit purposes only"
          },
          "last_changed_by_id": {
            "type": "number",
            "description": "the id of the user that made the last change or in the case of its initial creation, the user that created it"
          },
          "createtime": {
            "format": "date-time",
            "type": "string",
            "description": "the point in time this row was first created regardless of modifications"
          },
          "updatetime": {
            "format": "date-time",
            "type": "string",
            "description": "the last point in time this row was modified"
          },
          "all_users_cobranded_to_social_profile": {
            "description": "This was created from the details of the foreign key FK_ALL_USERS_COBRANDED_TO_SOCIAL_PROFILE and described as: ",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AllUser"
            }
          },
          "events_to_issuer": {
            "description": "This was created from the details of the foreign key FK_EVENTS_TO_ISSUER and described as: ",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Event"
            }
          },
          "orders": {
            "description": "This was created from the details of the foreign key FK_INVESTMENT_ORDERS_ISSUER_ID_ORDERS and described as: ",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/InvestmentOrder"
            }
          },
          "intended_trades": {
            "description": "This was created from the details of the foreign key FK_INVESTOR_INTENDED_TRADES_INTENDED_ISSUER_ID_INTENDED_TRADES and described as: ",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/InvestorIntendedTrades"
            }
          },
          "projects": {
            "description": "This was created from the details of the foreign key FK_PROJECTS_ISSUER_ID_PROJECTS and described as: ",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Project"
            }
          },
          "interests": {
            "description": "This was created from the details of the foreign key FK_PROPERTY_INTEREST_INTEREST_BY_ID_INTERESTS and described as: ",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ProjectInterest"
            }
          },
          "investor_interests": {
            "description": "This was created from the details of the foreign key FK_PROPERTY_INTEREST_INTEREST_IN_ID_INVESTOR_INTERESTS and described as: ",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ProjectInterest"
            }
          },
          "user_issuer_associations_to_issuer_id_associated_users": {
            "description": "This was created from the details of the foreign key FK_USER_ISSUER_ASSOCIATIONS_TO_ISSUER_ID_ASSOCIATED_USERS and described as: ",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserIssuerAssociation"
            }
          },
          "followers": {
            "description": "This was created from the details of the foreign key FK_USERS_SOCIAL_LINKUP_LINK_ID_FOLLOWERS and described as: ",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SocialProfileFollowing"
            }
          },
          "following": {
            "description": "This was created from the details of the foreign key FK_USERS_SOCIAL_LINKUP_PROFILE_ID_FOLLOWING and described as: ",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SocialProfileFollowing"
            }
          },
          "posts": {
            "description": "",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserSocialPost"
            }
          },
          "country": {
            "description": "This was created from the details of the foreign key FK_USERS_SOCIALPROFILE_COUNTRY_ID and described as: ",
            "allOf": [
              {
                "$ref": "#/components/schemas/Country"
              }
            ]
          },
          "jurisdiction": {
            "description": "This was created from the details of the foreign key FK_USERS_SOCIALPROFILE_JURISDICTION_ID_PROFILES and described as: ",
            "allOf": [
              {
                "$ref": "#/components/schemas/Province"
              }
            ]
          },
          "last_changed_by": {
            "description": "This was created from the details of the foreign key FK_USERS_SOCIALPROFILE_LAST_CHANGED_BY_ID_CHANGES and described as: ",
            "allOf": [
              {
                "$ref": "#/components/schemas/AllUser"
              }
            ]
          },
          "project": {
            "description": "This was created from the details of the foreign key FK_USERS_SOCIALPROFILE_PROJECT_ID_PROFILES and described as: ",
            "allOf": [
              {
                "$ref": "#/components/schemas/Project"
              }
            ]
          },
          "province": {
            "description": "This was created from the details of the foreign key FK_USERS_SOCIALPROFILE_PROVINCE_ID and described as: ",
            "allOf": [
              {
                "$ref": "#/components/schemas/Province"
              }
            ]
          },
          "statute": {
            "description": "This was created from the details of the foreign key FK_USERS_SOCIALPROFILE_STATUTE_ID_TO_PROVINCES and described as: ",
            "allOf": [
              {
                "$ref": "#/components/schemas/Province"
              }
            ]
          },
          "user": {
            "description": "This was created from the details of the foreign key FK_USERS_SOCIALPROFILE_USER_ID_PROFILES and described as: ",
            "allOf": [
              {
                "$ref": "#/components/schemas/AllUser"
              }
            ]
          },
          "web_hooks_to_issuer": {
            "description": "This was created from the details of the foreign key FK_WEB_HOOKS_TO_ISSUER and described as: ",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/WebHook"
            }
          }
        },
        "required": [
          "id",
          "user_id",
          "name",
          "image",
          "facebook",
          "twitter",
          "linkedin",
          "status",
          "notification",
          "is_deleted",
          "last_changed_by_id",
          "createtime",
          "updatetime",
          "all_users_cobranded_to_social_profile",
          "events_to_issuer",
          "orders",
          "intended_trades",
          "projects",
          "interests",
          "investor_interests",
          "user_issuer_associations_to_issuer_id_associated_users",
          "followers",
          "following",
          "posts",
          "country",
          "jurisdiction",
          "last_changed_by",
          "project",
          "province",
          "statute",
          "user",
          "web_hooks_to_issuer"
        ]
      },
      "BackgroundProcess": {
        "type": "object",
        "properties": {
          "id": {
            "type": "number",
            "description": "the unique internal identifier (primary key) of the row"
          },
          "cmd_line": {
            "type": "string",
            "description": ""
          },
          "started_at": {
            "format": "date-time",
            "type": "string",
            "description": "if set, the point in time the process is known to have started"
          },
          "finished_at": {
            "format": "date-time",
            "type": "string",
            "description": "if set, the point in time that the process is known to have finished"
          },
          "succeeded": {
            "type": "boolean",
            "description": "if true, the process executed successfully"
          },
          "is_deleted": {
            "type": "boolean",
            "description": "if true, this row is &quot;logically&quot; deleted. that is, its not to be used any more and is kept for historical/audit purposes only"
          },
          "last_changed_by_id": {
            "type": "number",
            "description": "the id of the user that made the last change or in the case of its initial creation, the user that created it"
          },
          "createtime": {
            "format": "date-time",
            "type": "string",
            "description": "the point in time this row was first created regardless of modifications"
          },
          "updatetime": {
            "format": "date-time",
            "type": "string",
            "description": "the last point in time this row was modified"
          },
          "last_changed_by": {
            "description": "This was created from the details of the foreign key FK_BACKGROUND_PROCESSS_LASTUSER_LAST_CHANGED_BY_ID_CHANGES and described as: ",
            "allOf": [
              {
                "$ref": "#/components/schemas/AllUser"
              }
            ]
          }
        },
        "required": [
          "id",
          "cmd_line",
          "started_at",
          "finished_at",
          "succeeded",
          "is_deleted",
          "last_changed_by_id",
          "createtime",
          "updatetime",
          "last_changed_by"
        ]
      },
      "ImportedContact": {
        "type": "object",
        "properties": {
          "id": {
            "type": "number",
            "description": "the unique internal identifier (primary key) of the row"
          },
          "user_id": {
            "type": "number",
            "description": "the user that imported the contact"
          },
          "source": {
            "type": "string",
            "description": "the name of the system or service that the contacts were received from"
          },
          "contact_as_original_json": {
            "type": "string",
            "description": "the list of contacts exactly as the source system provided them in json"
          },
          "contact_as_json": {
            "type": "string",
            "description": "the imported list of contacts adjusted for local user in json format"
          },
          "is_deleted": {
            "type": "boolean",
            "description": "if true, this row is &quot;logically&quot; deleted. that is, its not to be used any more and is kept for historical/audit purposes only"
          },
          "last_changed_by_id": {
            "type": "number",
            "description": "the id of the user that made the last change or in the case of its initial creation, the user that created it"
          },
          "updatetime": {
            "format": "date-time",
            "type": "string",
            "description": "the last point in time this row was modified"
          },
          "createtime": {
            "format": "date-time",
            "type": "string",
            "description": "the point in time this row was first created regardless of modifications"
          },
          "last_changed_by": {
            "description": "This was created from the details of the foreign key FK_IMPORTED_CONTACTS_LAST_CHANGED_BY_ID_CHANGES and described as: ",
            "allOf": [
              {
                "$ref": "#/components/schemas/AllUser"
              }
            ]
          },
          "user": {
            "description": "This was created from the details of the foreign key FK_IMPORTED_CONTACTS_USER_ID_CONTACTS and described as: ",
            "allOf": [
              {
                "$ref": "#/components/schemas/AllUser"
              }
            ]
          }
        },
        "required": [
          "id",
          "user_id",
          "source",
          "contact_as_original_json",
          "contact_as_json",
          "is_deleted",
          "last_changed_by_id",
          "updatetime",
          "createtime",
          "last_changed_by",
          "user"
        ]
      },
      "OrderAcknowledgement": {
        "type": "object",
        "properties": {
          "id": {
            "type": "number",
            "description": "the unique internal identifier (primary key) of the row"
          },
          "user_id": {
            "type": "number",
            "description": "the user that made the acknowledgement"
          },
          "order_id": {
            "type": "number",
            "description": "the id of order that was acknowledged"
          },
          "acknowledgement_order": {
            "type": "number",
            "description": "the id of the question that was asked"
          },
          "question_text": {
            "type": "string",
            "description": "the text of the question that was asked."
          },
          "answer": {
            "type": "string",
            "description": "the decoded value of the text"
          },
          "answer_text": {
            "type": "string",
            "description": "the text answered"
          },
          "additional_answer": {
            "type": "string",
            "description": ""
          },
          "is_deleted": {
            "type": "boolean",
            "description": "if true, this row is &quot;logically&quot; deleted. that is, its not to be used any more and is kept for historical/audit purposes only"
          },
          "last_changed_by_id": {
            "type": "number",
            "description": "the id of the user that made the last change or in the case of its initial creation, the user that created it"
          },
          "createtime": {
            "format": "date-time",
            "type": "string",
            "description": "the point in time this row was first created regardless of modifications"
          },
          "updatetime": {
            "format": "date-time",
            "type": "string",
            "description": "the last point in time this row was modified"
          },
          "last_changed_by": {
            "description": "This was created from the details of the foreign key FK_INVESTOR_ACK_ORDERS_LAST_CHANGED_BY_ID_CHANGES and described as: ",
            "allOf": [
              {
                "$ref": "#/components/schemas/AllUser"
              }
            ]
          },
          "order": {
            "description": "This was created from the details of the foreign key FK_INVESTOR_ACK_ORDERS_ORDER_ID_ACKNOWLEDGEMENT_DETAILS and described as: ",
            "allOf": [
              {
                "$ref": "#/components/schemas/InvestmentOrder"
              }
            ]
          },
          "user": {
            "description": "This was created from the details of the foreign key FK_INVESTOR_ACK_ORDERS_USER_ORDER_ACKNOWLEDGEMENTS and described as: ",
            "allOf": [
              {
                "$ref": "#/components/schemas/AllUser"
              }
            ]
          }
        },
        "required": [
          "id",
          "user_id",
          "order_id",
          "acknowledgement_order",
          "question_text",
          "answer",
          "answer_text",
          "additional_answer",
          "is_deleted",
          "last_changed_by_id",
          "createtime",
          "updatetime",
          "last_changed_by",
          "order",
          "user"
        ]
      },
      "Mail": {
        "type": "object",
        "properties": {
          "id": {
            "type": "number",
            "description": "the unique internal identifier (primary key) of the row"
          },
          "to_id": {
            "type": "number",
            "description": "the id of the use it was sent to"
          },
          "from_id": {
            "type": "number",
            "description": "the id of the user who sent it"
          },
          "address_sent_to": {
            "type": "string",
            "description": "the smtp email address it was sent to. it may not be the current email address of the to_user"
          },
          "subject": {
            "type": "string",
            "description": "the subject line"
          },
          "body": {
            "type": "string",
            "description": "the body/text of the email"
          },
          "raw_body": {
            "type": "string",
            "description": "the complete body of the email that gets sent to the smtp server"
          },
          "sent_ok": {
            "type": "boolean",
            "description": "has the email been sent to the smtp server successfully yet"
          },
          "attachment": {
            "type": "string",
            "description": "the name of a file attachement that was sent with it. it is not specified where/if that file continues to exist"
          },
          "flag": {
            "type": "boolean",
            "description": "did the sender flag it?"
          },
          "stared": {
            "type": "boolean",
            "description": "did the sender star it?"
          },
          "status": {
            "type": "number",
            "description": "the current state of the email"
          },
          "is_deleted": {
            "type": "boolean",
            "description": "if true, this row is &quot;logically&quot; deleted. that is, its not to be used any more and is kept for historical/audit purposes only"
          },
          "last_changed_by_id": {
            "type": "number",
            "description": "the id of the user that made the last change or in the case of its initial creation, the user that created it"
          },
          "createtime": {
            "format": "date-time",
            "type": "string",
            "description": "the point in time this row was first created regardless of modifications"
          },
          "updatetime": {
            "format": "date-time",
            "type": "string",
            "description": "the last point in time this row was modified"
          },
          "from": {
            "description": "This was created from the details of the foreign key FK_MAILS_FROM_ID_SENT_EMAILS and described as: ",
            "allOf": [
              {
                "$ref": "#/components/schemas/AllUser"
              }
            ]
          },
          "last_changed_by": {
            "description": "This was created from the details of the foreign key FK_MAILS_LAST_CHANGED_BY_ID_CHANGES and described as: ",
            "allOf": [
              {
                "$ref": "#/components/schemas/AllUser"
              }
            ]
          },
          "to": {
            "description": "This was created from the details of the foreign key FK_MAILS_TO_ID_RECEIVED_EMAILS and described as: ",
            "allOf": [
              {
                "$ref": "#/components/schemas/AllUser"
              }
            ]
          }
        },
        "required": [
          "id",
          "to_id",
          "from_id",
          "address_sent_to",
          "subject",
          "body",
          "raw_body",
          "sent_ok",
          "attachment",
          "flag",
          "stared",
          "status",
          "is_deleted",
          "last_changed_by_id",
          "createtime",
          "updatetime",
          "from",
          "last_changed_by",
          "to"
        ]
      },
      "AdminModule": {
        "type": "object",
        "properties": {
          "id": {
            "type": "number",
            "description": "the unique internal identifier (primary key) of the row"
          },
          "sub_id": {
            "type": "number",
            "description": "the id of the module that this is a child of"
          },
          "name": {
            "type": "string",
            "description": "the human readable identifier of the module (its name)"
          },
          "module_seo": {
            "type": "string",
            "description": "the identifier to use for seo for the module"
          },
          "module_icon": {
            "type": "string",
            "description": "a url to the icon to use to represent the module"
          },
          "status": {
            "type": "number",
            "description": "unused"
          },
          "sort_order": {
            "type": "number",
            "description": "the ordinal position of the module"
          },
          "is_deleted": {
            "type": "boolean",
            "description": "if true, this row is &quot;logically&quot; deleted. that is, its not to be used any more and is kept for historical/audit purposes only"
          },
          "last_changed_by_id": {
            "type": "number",
            "description": "the id of the user that made the last change or in the case of its initial creation, the user that created it"
          },
          "createtime": {
            "format": "date-time",
            "type": "string",
            "description": "the point in time this row was first created regardless of modifications"
          },
          "updatetime": {
            "format": "date-time",
            "type": "string",
            "description": "the last point in time this row was modified"
          },
          "grants": {
            "description": "This was created from the details of the foreign key FK_MODULE_ACCESS_MODULE_ID_GRANTS and described as: ",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ModuleAccess"
            }
          },
          "last_changed_by": {
            "description": "This was created from the details of the foreign key FK_MODULES_LAST_CHANGED_BY_ID_CHANGES and described as: ",
            "allOf": [
              {
                "$ref": "#/components/schemas/AllUser"
              }
            ]
          },
          "sub": {
            "description": "This was created from the details of the foreign key FK_MODULES_SUB_ID_CHILD_MODULES and described as: ",
            "allOf": [
              {
                "$ref": "#/components/schemas/AdminModule"
              }
            ]
          },
          "child_modules": {
            "description": "This was created from the details of the foreign key FK_MODULES_SUB_ID_CHILD_MODULES and described as: ",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AdminModule"
            }
          }
        },
        "required": [
          "id",
          "sub_id",
          "name",
          "module_seo",
          "module_icon",
          "status",
          "sort_order",
          "is_deleted",
          "last_changed_by_id",
          "createtime",
          "updatetime",
          "grants",
          "last_changed_by",
          "sub",
          "child_modules"
        ]
      },
      "ModuleAccess": {
        "type": "object",
        "properties": {
          "id": {
            "type": "number",
            "description": "the unique internal identifier (primary key) of the row"
          },
          "user_id": {
            "type": "number",
            "description": "the id of the user that is given the permissions"
          },
          "module_id": {
            "type": "number",
            "description": "the id of the module that the permissions are granted on"
          },
          "can_view": {
            "type": "boolean",
            "description": "if true, the user can view items"
          },
          "can_add": {
            "type": "boolean",
            "description": "if true, the user can create new items"
          },
          "can_edit": {
            "type": "boolean",
            "description": "if true, the user can alter existing items"
          },
          "can_delete": {
            "type": "boolean",
            "description": "if true, the user can delete items"
          },
          "is_deleted": {
            "type": "boolean",
            "description": "if true, this row is &quot;logically&quot; deleted. that is, its not to be used any more and is kept for historical/audit purposes only"
          },
          "last_changed_by_id": {
            "type": "number",
            "description": "the id of the user that made the last change or in the case of its initial creation, the user that created it"
          },
          "createtime": {
            "format": "date-time",
            "type": "string",
            "description": "the point in time this row was first created regardless of modifications"
          },
          "updatetime": {
            "format": "date-time",
            "type": "string",
            "description": "the last point in time this row was modified"
          },
          "last_changed_by": {
            "description": "This was created from the details of the foreign key FK_MODULE_ACCESS_LAST_CHANGED_BY_ID_CHANGES and described as: ",
            "allOf": [
              {
                "$ref": "#/components/schemas/AllUser"
              }
            ]
          },
          "module": {
            "description": "This was created from the details of the foreign key FK_MODULE_ACCESS_MODULE_ID_GRANTS and described as: ",
            "allOf": [
              {
                "$ref": "#/components/schemas/AdminModule"
              }
            ]
          },
          "user": {
            "description": "This was created from the details of the foreign key FK_MODULE_ACCESS_USER_ID_ACCESSIBLE_MODULES and described as: ",
            "allOf": [
              {
                "$ref": "#/components/schemas/AllUser"
              }
            ]
          }
        },
        "required": [
          "id",
          "user_id",
          "module_id",
          "can_view",
          "can_add",
          "can_edit",
          "can_delete",
          "is_deleted",
          "last_changed_by_id",
          "createtime",
          "updatetime",
          "last_changed_by",
          "module",
          "user"
        ]
      },
      "SupportEngineer": {
        "type": "object",
        "properties": {
          "id": {
            "type": "number",
            "description": "the unique internal identifier (primary key) of the row"
          },
          "user_id": {
            "type": "number",
            "description": "the id of the user who performs support"
          },
          "first_name": {
            "type": "string",
            "description": "the users first name"
          },
          "last_name": {
            "type": "string",
            "description": "the users last name"
          },
          "title": {
            "type": "string",
            "description": "the identifier of the role the person performs for support"
          },
          "phone": {
            "type": "string",
            "description": "the telephone number to use to contact them"
          },
          "email": {
            "type": "string",
            "description": "the email address to use to contact the person"
          },
          "image": {
            "type": "string",
            "description": "a url to the photo used to represent the support person"
          },
          "content": {
            "type": "string",
            "description": "a paragraph describing the persons role"
          },
          "profile_cap": {
            "type": "number",
            "description": "uncertain"
          },
          "sort_order": {
            "type": "number",
            "description": "the ordinal position of the engineer"
          },
          "visible": {
            "type": "boolean",
            "description": "if true the support engineer should be shown"
          },
          "is_deleted": {
            "type": "boolean",
            "description": "if true, this row is &quot;logically&quot; deleted. that is, its not to be used any more and is kept for historical/audit purposes only"
          },
          "updatetime": {
            "format": "date-time",
            "type": "string",
            "description": "the last point in time this row was modified"
          },
          "last_changed_by_id": {
            "type": "number",
            "description": "the id of the user that made the last change or in the case of its initial creation, the user that created it"
          },
          "createtime": {
            "format": "date-time",
            "type": "string",
            "description": "the point in time this row was first created regardless of modifications"
          },
          "last_changed_by": {
            "description": "This was created from the details of the foreign key FK_SUPPORT_ENGINEERS_LAST_CHANGED_BY_ID_CHANGES and described as: ",
            "allOf": [
              {
                "$ref": "#/components/schemas/AllUser"
              }
            ]
          },
          "user": {
            "description": "This was created from the details of the foreign key FK_SUPPORT_ENGINEERS_USER_ID_OWNER_USER and described as: ",
            "allOf": [
              {
                "$ref": "#/components/schemas/AllUser"
              }
            ]
          }
        },
        "required": [
          "id",
          "user_id",
          "first_name",
          "last_name",
          "title",
          "phone",
          "email",
          "image",
          "content",
          "profile_cap",
          "sort_order",
          "visible",
          "is_deleted",
          "updatetime",
          "last_changed_by_id",
          "createtime",
          "last_changed_by",
          "user"
        ]
      },
      "UserRelationship": {
        "type": "object",
        "properties": {
          "id": {
            "type": "number",
            "description": "the unique internal identifier (primary key) of the row"
          },
          "user_1_id": {
            "type": "number",
            "description": "one of the users involved in the relationship"
          },
          "user_2_id": {
            "type": "number",
            "description": "one of the users involved in the relationship"
          },
          "relationship_type": {
            "type": "string",
            "description": "the nature of the relationship (enumerated)"
          },
          "is_deleted": {
            "type": "boolean",
            "description": "if true, this row is &quot;logically&quot; deleted. that is, its not to be used any more and is kept for historical/audit purposes only"
          },
          "last_changed_by_id": {
            "type": "number",
            "description": "the id of the user that made the last change or in the case of its initial creation, the user that created it"
          },
          "updatetime": {
            "format": "date-time",
            "type": "string",
            "description": "the last point in time this row was modified"
          },
          "createtime": {
            "format": "date-time",
            "type": "string",
            "description": "the point in time this row was first created regardless of modifications"
          },
          "last_changed_by": {
            "description": "This was created from the details of the foreign key FK_USER_RELATIONSHIP_LAST_CHANGED_BY_ID_CHANGES and described as: ",
            "allOf": [
              {
                "$ref": "#/components/schemas/AllUser"
              }
            ]
          },
          "user_1": {
            "description": "This was created from the details of the foreign key FK_USER_RELATIONSHIP_TO_USER_1 and described as: ",
            "allOf": [
              {
                "$ref": "#/components/schemas/AllUser"
              }
            ]
          },
          "user_2": {
            "description": "This was created from the details of the foreign key FK_USER_RELATIONSHIP_TO_USER_2 and described as: ",
            "allOf": [
              {
                "$ref": "#/components/schemas/AllUser"
              }
            ]
          }
        },
        "required": [
          "id",
          "user_1_id",
          "user_2_id",
          "relationship_type",
          "is_deleted",
          "last_changed_by_id",
          "updatetime",
          "createtime",
          "last_changed_by",
          "user_1",
          "user_2"
        ]
      },
      "UserFinancialKyc": {
        "type": "object",
        "properties": {
          "id": {
            "type": "number",
            "description": "the unique internal identifier (primary key) of the row"
          },
          "user_id": {
            "type": "number",
            "description": "the user this is for"
          },
          "employment_status": {
            "type": "string",
            "description": "the type of employment the user currently enagages in."
          },
          "employer": {
            "type": "string",
            "description": "the name of the organization that the user was employed by at the time"
          },
          "industry": {
            "type": "string",
            "description": "the industry the employment was engaged in"
          },
          "position": {
            "type": "string",
            "description": "the title/position the person held for their employment"
          },
          "years": {
            "type": "string",
            "description": "the number of years that the person has been working for that employer"
          },
          "income_includes_partner": {
            "type": "string",
            "description": "text describing how income is being reported. Combined with spouse, single"
          },
          "year_entered": {
            "type": "number",
            "description": "the current year when these details were entered"
          },
          "income_current_year": {
            "type": "number",
            "description": "projected income for the current year"
          },
          "income_previous_year": {
            "type": "number",
            "description": "actual income for the previous year"
          },
          "income_two_years_ago": {
            "type": "number",
            "description": "actual income for 2 years ago"
          },
          "net_financial_assest_range": {
            "type": "number",
            "description": "a range of their net financial assets"
          },
          "advisor_dealer": {
            "type": "string",
            "description": "are they currently an advisor dealer?"
          },
          "represents_advisor_dealer": {
            "type": "string",
            "description": "does this person represent an advisor dealer?"
          },
          "acting_on_account_for_advisor_dealer": {
            "type": "string",
            "description": "are they managing an account for an advisor dealer"
          },
          "net_assets_range": {
            "type": "number",
            "description": "their net assets in a range"
          },
          "income_curr_new": {
            "type": "number",
            "description": ""
          },
          "income_curr1_new": {
            "type": "number",
            "description": ""
          },
          "income_curr2_new": {
            "type": "number",
            "description": ""
          },
          "income_net_new": {
            "type": "number",
            "description": ""
          },
          "assets_net_new": {
            "type": "number",
            "description": ""
          },
          "last_changed_by_id": {
            "type": "number",
            "description": "the id of the user that made the last change or in the case of its initial creation, the user that created it"
          },
          "is_deleted": {
            "type": "boolean",
            "description": "if true, this row is &quot;logically&quot; deleted. that is, its not to be used any more and is kept for historical/audit purposes only"
          },
          "createtime": {
            "format": "date-time",
            "type": "string",
            "description": "the point in time this row was first created regardless of modifications"
          },
          "updatetime": {
            "format": "date-time",
            "type": "string",
            "description": "the last point in time this row was modified"
          },
          "last_changed_by": {
            "description": "This was created from the details of the foreign key FK_USERS_EMPLOYMENT_LAST_CHANGED_BY_ID_CHANGES and described as: ",
            "allOf": [
              {
                "$ref": "#/components/schemas/AllUser"
              }
            ]
          },
          "user": {
            "description": "This was created from the details of the foreign key FK_USERS_EMPLOYMENT_USER_ID_FINANCIAL_KYC and described as: ",
            "allOf": [
              {
                "$ref": "#/components/schemas/AllUser"
              }
            ]
          }
        },
        "required": [
          "id",
          "user_id",
          "employment_status",
          "employer",
          "industry",
          "position",
          "years",
          "income_includes_partner",
          "year_entered",
          "income_current_year",
          "income_previous_year",
          "income_two_years_ago",
          "net_financial_assest_range",
          "advisor_dealer",
          "represents_advisor_dealer",
          "acting_on_account_for_advisor_dealer",
          "net_assets_range",
          "income_curr_new",
          "income_curr1_new",
          "income_curr2_new",
          "income_net_new",
          "assets_net_new",
          "last_changed_by_id",
          "is_deleted",
          "createtime",
          "updatetime",
          "last_changed_by",
          "user"
        ]
      },
      "UserInvitation": {
        "type": "object",
        "properties": {
          "id": {
            "type": "number",
            "description": "the unique internal identifier (primary key) of the row"
          },
          "user_id": {
            "type": "number",
            "description": "the user this is for"
          },
          "first_name": {
            "type": "string",
            "description": "the first name of the person that was invited"
          },
          "last_name": {
            "type": "string",
            "description": "the last name of the person that was invited"
          },
          "email": {
            "type": "string",
            "description": "the email address that the invitation was sent to"
          },
          "message": {
            "type": "string",
            "description": "the message that was entered by the user to extended the invitations"
          },
          "status": {
            "type": "number",
            "description": "unused"
          },
          "is_deleted": {
            "type": "boolean",
            "description": "if true, this row is &quot;logically&quot; deleted. that is, its not to be used any more and is kept for historical/audit purposes only"
          },
          "last_changed_by_id": {
            "type": "number",
            "description": "the id of the user that made the last change or in the case of its initial creation, the user that created it"
          },
          "createtime": {
            "format": "date-time",
            "type": "string",
            "description": "the point in time this row was first created regardless of modifications"
          },
          "updatetime": {
            "format": "date-time",
            "type": "string",
            "description": "the last point in time this row was modified"
          },
          "last_changed_by": {
            "description": "This was created from the details of the foreign key FK_USERS_INVITEE_LAST_CHANGED_BY_ID_CHANGES and described as: ",
            "allOf": [
              {
                "$ref": "#/components/schemas/AllUser"
              }
            ]
          },
          "user": {
            "description": "This was created from the details of the foreign key FK_USERS_INVITEE_USER_ID_INVITATIONS and described as: ",
            "allOf": [
              {
                "$ref": "#/components/schemas/AllUser"
              }
            ]
          }
        },
        "required": [
          "id",
          "user_id",
          "first_name",
          "last_name",
          "email",
          "message",
          "status",
          "is_deleted",
          "last_changed_by_id",
          "createtime",
          "updatetime",
          "last_changed_by",
          "user"
        ]
      },
      "UserPdf": {
        "type": "object",
        "properties": {
          "id": {
            "type": "number",
            "description": "the unique internal identifier (primary key) of the row"
          },
          "user_id": {
            "type": "number",
            "description": "the user this is for"
          },
          "order_id": {
            "type": "number",
            "description": "an order that the document is related to"
          },
          "pdf_type": {
            "type": "string",
            "description": "a textual (non-code) categorization of the purpose of the pdf"
          },
          "pdf_name": {
            "type": "string",
            "description": "a url to the pdf"
          },
          "exel_name": {
            "type": "string",
            "description": "unused"
          },
          "relevant_month": {
            "type": "number",
            "description": "if the pdf is relevant to a given point in time, such as a bank statement, this is the month of that point in time"
          },
          "relevant_year": {
            "type": "number",
            "description": "if the pdf is relevant to a given point in time, such as a bank statement, this is the year of that point in time"
          },
          "remarks": {
            "type": "string",
            "description": "generic remarks about what the pdf is"
          },
          "effective_date": {
            "format": "date-time",
            "type": "string",
            "description": "an effective date of the pdf"
          },
          "is_deleted": {
            "type": "boolean",
            "description": "if true, this row is &quot;logically&quot; deleted. that is, its not to be used any more and is kept for historical/audit purposes only"
          },
          "last_changed_by_id": {
            "type": "number",
            "description": "the id of the user that made the last change or in the case of its initial creation, the user that created it"
          },
          "createtime": {
            "format": "date-time",
            "type": "string",
            "description": "the point in time this row was first created regardless of modifications"
          },
          "updatetime": {
            "format": "date-time",
            "type": "string",
            "description": "the last point in time this row was modified"
          },
          "events_to_users_pdf": {
            "description": "This was created from the details of the foreign key FK_EVENTS_TO_USERS_PDF and described as: ",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Event"
            }
          },
          "last_changed_by": {
            "description": "This was created from the details of the foreign key FK_USERS_PDF_LAST_CHANGED_BY_ID_CHANGES and described as: ",
            "allOf": [
              {
                "$ref": "#/components/schemas/AllUser"
              }
            ]
          },
          "order": {
            "description": "This was created from the details of the foreign key FK_USERS_PDF_ORDER_ID_PDFS and described as: ",
            "allOf": [
              {
                "$ref": "#/components/schemas/InvestmentOrder"
              }
            ]
          },
          "user": {
            "description": "This was created from the details of the foreign key FK_USERS_PDF_USER_ID_PDFS and described as: ",
            "allOf": [
              {
                "$ref": "#/components/schemas/AllUser"
              }
            ]
          }
        },
        "required": [
          "id",
          "user_id",
          "order_id",
          "pdf_type",
          "pdf_name",
          "exel_name",
          "relevant_month",
          "relevant_year",
          "remarks",
          "effective_date",
          "is_deleted",
          "last_changed_by_id",
          "createtime",
          "updatetime",
          "events_to_users_pdf",
          "last_changed_by",
          "order",
          "user"
        ]
      },
      "UserRequest": {
        "type": "object",
        "properties": {
          "id": {
            "type": "number",
            "description": "the unique internal identifier (primary key) of the row"
          },
          "user_id": {
            "type": "number",
            "description": "the user this is for"
          },
          "request": {
            "type": "string",
            "description": "a textual code representing the type of request"
          },
          "message": {
            "type": "string",
            "description": "the body message of the request. this is a sentence or paragraph"
          },
          "status": {
            "type": "number",
            "description": "the state in which a request may be"
          },
          "is_deleted": {
            "type": "boolean",
            "description": "if true, this row is &quot;logically&quot; deleted. that is, its not to be used any more and is kept for historical/audit purposes only"
          },
          "last_changed_by_id": {
            "type": "number",
            "description": "the id of the user that made the last change or in the case of its initial creation, the user that created it"
          },
          "createtime": {
            "format": "date-time",
            "type": "string",
            "description": "the point in time this row was first created regardless of modifications"
          },
          "updatetime": {
            "format": "date-time",
            "type": "string",
            "description": "the last point in time this row was modified"
          },
          "last_changed_by": {
            "description": "This was created from the details of the foreign key FK_USERS_REQUEST_LAST_CHANGED_BY_ID_CHANGES and described as: ",
            "allOf": [
              {
                "$ref": "#/components/schemas/AllUser"
              }
            ]
          },
          "user": {
            "description": "This was created from the details of the foreign key FK_USERS_REQUEST_USER_ID_REQUESTS and described as: ",
            "allOf": [
              {
                "$ref": "#/components/schemas/AllUser"
              }
            ]
          }
        },
        "required": [
          "id",
          "user_id",
          "request",
          "message",
          "status",
          "is_deleted",
          "last_changed_by_id",
          "createtime",
          "updatetime",
          "last_changed_by",
          "user"
        ]
      },
      "UserSubscription": {
        "type": "object",
        "properties": {
          "id": {
            "type": "number",
            "description": "the unique internal identifier (primary key) of the row"
          },
          "user_id": {
            "type": "number",
            "description": "the user this is for"
          },
          "flag": {
            "type": "string",
            "description": "a textual categorization of what the user is asking for notifications about"
          },
          "email": {
            "type": "string",
            "description": "the email address to send the notifications to"
          },
          "status": {
            "type": "number",
            "description": "the current state of the subscription"
          },
          "is_deleted": {
            "type": "boolean",
            "description": "if true, this row is &quot;logically&quot; deleted. that is, its not to be used any more and is kept for historical/audit purposes only"
          },
          "last_changed_by_id": {
            "type": "number",
            "description": "the id of the user that made the last change or in the case of its initial creation, the user that created it"
          },
          "createtime": {
            "format": "date-time",
            "type": "string",
            "description": "the point in time this row was first created regardless of modifications"
          },
          "updatetime": {
            "format": "date-time",
            "type": "string",
            "description": "the last point in time this row was modified"
          },
          "last_changed_by": {
            "description": "This was created from the details of the foreign key FK_USERS_SUBSCRIBE_LAST_CHANGED_BY_ID_CHANGES and described as: ",
            "allOf": [
              {
                "$ref": "#/components/schemas/AllUser"
              }
            ]
          },
          "user": {
            "description": "This was created from the details of the foreign key FK_USERS_SUBSCRIBE_USER_ID_SUBSCRIPTIONS and described as: ",
            "allOf": [
              {
                "$ref": "#/components/schemas/AllUser"
              }
            ]
          }
        },
        "required": [
          "id",
          "user_id",
          "flag",
          "email",
          "status",
          "is_deleted",
          "last_changed_by_id",
          "createtime",
          "updatetime",
          "last_changed_by",
          "user"
        ]
      },
      "AllUser": {
        "type": "object",
        "properties": {
          "id": {
            "type": "number",
            "description": "the unique internal identifier (primary key) of the row"
          },
          "user_type": {
            "type": "string",
            "description": "the category of user this is (i&#x3D;investor, a&#x3D;admin, c&#x3D;issuer admin)"
          },
          "first_name": {
            "type": "string",
            "description": "the first name of the person who uses the account"
          },
          "last_name": {
            "type": "string",
            "description": "the last name of the person who uses the account"
          },
          "avatar_image_file_name": {
            "type": "string",
            "description": "the name of the file that holds the avatars picture. this is the resouce relative, not site relative."
          },
          "email": {
            "type": "string",
            "description": "the email address that identifies the account"
          },
          "last_login": {
            "format": "date-time",
            "type": "string",
            "description": "the last point in time the user logged in"
          },
          "last_ip": {
            "type": "string",
            "description": "the last ip that they used to access the site from"
          },
          "identity_provider": {
            "type": "string",
            "description": "the name of the service that verifies the identity of the user (according to azure b2c))"
          },
          "user_principle_name": {
            "type": "string",
            "description": "the identifier for the user in the b2c system"
          },
          "preferences_as_json": {
            "type": "string",
            "description": "json format values that are used by applications as preferences"
          },
          "is_deleted": {
            "type": "boolean",
            "description": "if true, this row is &quot;logically&quot; deleted. that is, its not to be used any more and is kept for historical/audit purposes only"
          },
          "last_changed_by_id": {
            "type": "number",
            "description": "the id of the user that made the last change or in the case of its initial creation, the user that created it"
          },
          "createtime": {
            "format": "date-time",
            "type": "string",
            "description": "the point in time this row was first created regardless of modifications"
          },
          "updatetime": {
            "format": "date-time",
            "type": "string",
            "description": "the last point in time this row was modified"
          },
          "cobranded_client_of": {
            "description": "This was created from the details of the foreign key FK_ALL_USERS_COBRANDED_TO_SOCIAL_PROFILE and described as: ",
            "allOf": [
              {
                "$ref": "#/components/schemas/UserSocialProfile"
              }
            ]
          },
          "country": {
            "description": "This was created from the details of the foreign key FK_ALL_USERS_TO_COUNTRIES and described as: ",
            "allOf": [
              {
                "$ref": "#/components/schemas/Country"
              }
            ]
          },
          "last_changed_by": {
            "description": "This was created from the details of the foreign key FK_ALL_USERS_LAST_CHANGED_BY_ID_CHANGES and described as: ",
            "allOf": [
              {
                "$ref": "#/components/schemas/AllUser"
              }
            ]
          },
          "changes": {
            "description": "",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/WebHook"
            }
          },
          "mailing_country": {
            "description": "This was created from the details of the foreign key FK_ALL_USERS_TO_MCOUNTRIES and described as: ",
            "allOf": [
              {
                "$ref": "#/components/schemas/Country"
              }
            ]
          },
          "mailing_province": {
            "description": "This was created from the details of the foreign key FK_ALL_USERS_TO_MPROVINCES and described as: ",
            "allOf": [
              {
                "$ref": "#/components/schemas/Province"
              }
            ]
          },
          "province": {
            "description": "This was created from the details of the foreign key FK_ALL_USERS_TO_PROVINCE and described as: ",
            "allOf": [
              {
                "$ref": "#/components/schemas/Province"
              }
            ]
          },
          "background_processs_lastuser_last_changed_by_id_changes": {
            "description": "This was created from the details of the foreign key FK_BACKGROUND_PROCESSS_LASTUSER_LAST_CHANGED_BY_ID_CHANGES and described as: ",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BackgroundProcess"
            }
          },
          "events_to_user": {
            "description": "This was created from the details of the foreign key FK_EVENTS_TO_USER and described as: ",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Event"
            }
          },
          "ffba_association_to_user": {
            "description": "This was created from the details of the foreign key FK_FFBA_ASSOCIATION_TO_USER and described as: ",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FfbaAssociation"
            }
          },
          "contacts": {
            "description": "This was created from the details of the foreign key FK_IMPORTED_CONTACTS_USER_ID_CONTACTS and described as: ",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ImportedContact"
            }
          },
          "investment_orders_joint_subscriber_to_user": {
            "description": "This was created from the details of the foreign key FK_INVESTMENT_ORDERS_JOINT_SUBSCRIBER_TO_USER and described as: ",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/InvestmentOrder"
            }
          },
          "orders": {
            "description": "This was created from the details of the foreign key FK_INVESTMENT_ORDERS_USER_ID_ORDERS and described as: ",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/InvestmentOrder"
            }
          },
          "transactions": {
            "description": "This was created from the details of the foreign key FK_INVESTMENT_TRANSACTION_USER_ID_TRANSACTIONS and described as: ",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/InvestmentTransaction"
            }
          },
          "watches": {
            "description": "This was created from the details of the foreign key FK_INVESTMENT_WATCHLIST_USER_ID_WATCHES and described as: ",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/InvestmentWatchlist"
            }
          },
          "investor_ack_orders_user_order_acknowledgements": {
            "description": "This was created from the details of the foreign key FK_INVESTOR_ACK_ORDERS_USER_ORDER_ACKNOWLEDGEMENTS and described as: ",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OrderAcknowledgement"
            }
          },
          "investor_earnings_user_d": {
            "description": "This was created from the details of the foreign key FK_INVESTOR_EARNINGS_USER_D and described as: ",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/InvestorEarning"
            }
          },
          "intended_trades": {
            "description": "This was created from the details of the foreign key FK_INVESTOR_INTENDED_TRADES_USER_ID_INTENDED_TRADES and described as: ",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/InvestorIntendedTrades"
            }
          },
          "sent_emails": {
            "description": "This was created from the details of the foreign key FK_MAILS_FROM_ID_SENT_EMAILS and described as: ",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Mail"
            }
          },
          "received_emails": {
            "description": "This was created from the details of the foreign key FK_MAILS_TO_ID_RECEIVED_EMAILS and described as: ",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Mail"
            }
          },
          "accessible_modules": {
            "description": "This was created from the details of the foreign key FK_MODULE_ACCESS_USER_ID_ACCESSIBLE_MODULES and described as: ",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ModuleAccess"
            }
          },
          "tax_reports": {
            "description": "This was created from the details of the foreign key FK_PROJECT_TAX_REPORTS_USER_ID_TAX_REPORTS and described as: ",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ProjectTaxReport"
            }
          },
          "owner_user": {
            "description": "This was created from the details of the foreign key FK_SUPPORT_ENGINEERS_USER_ID_OWNER_USER and described as: ",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SupportEngineer"
            }
          },
          "user_issuer_associations_to_user_id_issuer_associations": {
            "description": "This was created from the details of the foreign key FK_USER_ISSUER_ASSOCIATIONS_TO_USER_ID_ISSUER_ASSOCIATIONS and described as: ",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserIssuerAssociation"
            }
          },
          "user_relationship_to_user_1": {
            "description": "This was created from the details of the foreign key FK_USER_RELATIONSHIP_TO_USER_1 and described as: ",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserRelationship"
            }
          },
          "user_relationship_to_user_2": {
            "description": "This was created from the details of the foreign key FK_USER_RELATIONSHIP_TO_USER_2 and described as: ",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserRelationship"
            }
          },
          "users_banking_details_to_joint_user": {
            "description": "This was created from the details of the foreign key FK_USERS_BANKING_DETAILS_TO_JOINT_USER and described as: ",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserBankingDetails"
            }
          },
          "users_banking_details_to_user": {
            "description": "This was created from the details of the foreign key FK_USERS_BANKING_DETAILS_TO_USER and described as: ",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserBankingDetails"
            }
          },
          "financial_kyc": {
            "description": "This was created from the details of the foreign key FK_USERS_EMPLOYMENT_USER_ID_FINANCIAL_KYC and described as: ",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserFinancialKyc"
            }
          },
          "entities": {
            "description": "This was created from the details of the foreign key FK_USERS_ENTITY_USER_ID_ENTITIES and described as: ",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserEntity"
            }
          },
          "invitations": {
            "description": "This was created from the details of the foreign key FK_USERS_INVITEE_USER_ID_INVITATIONS and described as: ",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserInvitation"
            }
          },
          "pdfs": {
            "description": "This was created from the details of the foreign key FK_USERS_PDF_USER_ID_PDFS and described as: ",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserPdf"
            }
          },
          "answers": {
            "description": "This was created from the details of the foreign key FK_USERS_QUESTIONARY_USER_ID_ANSWERS and described as: ",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserAnswer"
            }
          },
          "requests": {
            "description": "This was created from the details of the foreign key FK_USERS_REQUEST_USER_ID_REQUESTS and described as: ",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserRequest"
            }
          },
          "users_socialprofile_last_changed_by_id_changes": {
            "description": "This was created from the details of the foreign key FK_USERS_SOCIALPROFILE_LAST_CHANGED_BY_ID_CHANGES and described as: ",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserSocialProfile"
            }
          },
          "users_socialprofile_user_id_profiles": {
            "description": "This was created from the details of the foreign key FK_USERS_SOCIALPROFILE_USER_ID_PROFILES and described as: ",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserSocialProfile"
            }
          },
          "subscriptions": {
            "description": "This was created from the details of the foreign key FK_USERS_SUBSCRIBE_USER_ID_SUBSCRIPTIONS and described as: ",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserSubscription"
            }
          },
          "web_hooks_to_user": {
            "description": "This was created from the details of the foreign key FK_WEB_HOOKS_TO_USER and described as: ",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/WebHook"
            }
          }
        },
        "required": [
          "id",
          "user_type",
          "first_name",
          "last_name",
          "avatar_image_file_name",
          "email",
          "last_login",
          "last_ip",
          "identity_provider",
          "user_principle_name",
          "preferences_as_json",
          "is_deleted",
          "last_changed_by_id",
          "createtime",
          "updatetime",
          "cobranded_client_of",
          "country",
          "last_changed_by",
          "changes",
          "mailing_country",
          "mailing_province",
          "province",
          "background_processs_lastuser_last_changed_by_id_changes",
          "events_to_user",
          "ffba_association_to_user",
          "contacts",
          "investment_orders_joint_subscriber_to_user",
          "orders",
          "transactions",
          "watches",
          "investor_ack_orders_user_order_acknowledgements",
          "investor_earnings_user_d",
          "intended_trades",
          "sent_emails",
          "received_emails",
          "accessible_modules",
          "tax_reports",
          "owner_user",
          "user_issuer_associations_to_user_id_issuer_associations",
          "user_relationship_to_user_1",
          "user_relationship_to_user_2",
          "users_banking_details_to_joint_user",
          "users_banking_details_to_user",
          "financial_kyc",
          "entities",
          "invitations",
          "pdfs",
          "answers",
          "requests",
          "users_socialprofile_last_changed_by_id_changes",
          "users_socialprofile_user_id_profiles",
          "subscriptions",
          "web_hooks_to_user"
        ]
      },
      "UserBankingDetails": {
        "type": "object",
        "properties": {
          "id": {
            "type": "number",
            "description": "the unique internal identifier (primary key) of the row"
          },
          "user_id": {
            "type": "number",
            "description": "the foreign ID of the user side of this relationship"
          },
          "user_entity_id": {
            "type": "number",
            "description": "the foreign ID of the user entity the details are associated with, if any"
          },
          "joint_subscriber_id": {
            "type": "number",
            "description": "the foreign ID of the joint subscriber the details are also associated with, if any"
          },
          "beneficiary_name": {
            "type": "string",
            "description": "the name associated with the details"
          },
          "encrypted_data": {
            "type": "string",
            "description": "the securely encrypted data representing the users banking details"
          },
          "stored_offline": {
            "type": "boolean",
            "description": "whether the users data is saved securely offline - if 1, encrypted_data should be blank as the value is stored elsewhere"
          },
          "last_changed_by_id": {
            "type": "number",
            "description": "the id of the user that made the last change or in the case of its initial creation, the user that created it"
          },
          "updatetime": {
            "format": "date-time",
            "type": "string",
            "description": "the last point in time this row was modified"
          },
          "createtime": {
            "format": "date-time",
            "type": "string",
            "description": "the point in time this row was first created regardless of modifications"
          },
          "joint_subscriber": {
            "description": "This was created from the details of the foreign key FK_USERS_BANKING_DETAILS_TO_JOINT_USER and described as: ",
            "allOf": [
              {
                "$ref": "#/components/schemas/AllUser"
              }
            ]
          },
          "last_changed_by": {
            "description": "This was created from the details of the foreign key FK_USERS_BANKING_DETAILS_LAST_CHANGED_BY_ID_CHANGES and described as: ",
            "allOf": [
              {
                "$ref": "#/components/schemas/AllUser"
              }
            ]
          },
          "user_entity": {
            "description": "This was created from the details of the foreign key FK_USERS_BANKING_DETAILS_TO_USER_ENTITY and described as: ",
            "allOf": [
              {
                "$ref": "#/components/schemas/UserEntity"
              }
            ]
          },
          "user": {
            "description": "This was created from the details of the foreign key FK_USERS_BANKING_DETAILS_TO_USER and described as: ",
            "allOf": [
              {
                "$ref": "#/components/schemas/AllUser"
              }
            ]
          }
        },
        "required": [
          "id",
          "user_id",
          "user_entity_id",
          "joint_subscriber_id",
          "beneficiary_name",
          "encrypted_data",
          "stored_offline",
          "last_changed_by_id",
          "updatetime",
          "createtime",
          "joint_subscriber",
          "last_changed_by",
          "user_entity",
          "user"
        ]
      },
      "InvestmentOrder": {
        "type": "object",
        "properties": {
          "id": {
            "type": "number",
            "description": "the unique internal identifier (primary key) of the row"
          },
          "entity_type": {
            "type": "number",
            "description": "the type of entity that is making the purchase (UserBenficiary, UserCorporation, UserTrust)"
          },
          "entity_id": {
            "type": "string",
            "description": "the id of the entity that is making the purchase. md5 of the pk value for one of UserBenficiary, UserCorporation, UserTrust"
          },
          "user_entity_id": {
            "type": "number",
            "description": "the id of the entity that is making the purchase. pk value for one of UserBenficiary, UserCorporation, UserTrust"
          },
          "order_no": {
            "type": "string",
            "description": "the fundscraper legal identifier for the order"
          },
          "share_price": {
            "type": "number",
            "description": "the listed price of the shares at the time of the order"
          },
          "number_of_shares": {
            "type": "number",
            "description": "the number of shares that were ordered"
          },
          "total_amount": {
            "type": "number",
            "description": "the total amount of the order"
          },
          "acknowledgements": {
            "type": "boolean",
            "description": "have the acknowledgements been completed?"
          },
          "docusign": {
            "type": "boolean",
            "description": "have the documents been completed with docusign"
          },
          "document_name": {
            "type": "string",
            "description": "the name of the file that holds the document"
          },
          "docusign_guid": {
            "type": "string",
            "description": "the GUID Docusign uses to identify the document the user completed"
          },
          "docusign_merge_hash": {
            "type": "string",
            "description": "the SHA256 hash of the data merged into the document identified by docusign_guid"
          },
          "payment": {
            "type": "number",
            "description": "the state of the payment for the order"
          },
          "roed_at_initiation": {
            "type": "number",
            "description": "the exemption that the investor qualified with at the time the order was stated"
          },
          "payment_mode": {
            "type": "number",
            "description": "the mechanism that will be used to provide the payment"
          },
          "payment_method_id": {
            "type": "number",
            "description": "the foreign ID of the payment_method used for this order"
          },
          "investment_withdrawal_id": {
            "type": "number",
            "description": "the foreign ID of the investment_withdrawal associated with this order, if one exists"
          },
          "distributions_to_id": {
            "type": "number",
            "description": "the foreign ID of the users_banking_details to send distributions related to this order to, if one exists"
          },
          "payments_from_id": {
            "type": "number",
            "description": "the foreign ID of the users_banking_details to draw payments related to this order from, if one exists"
          },
          "roed_schedule1_id": {
            "type": "number",
            "description": "the schedule 1 it is reported on?"
          },
          "order_confirm": {
            "type": "boolean",
            "description": "if true, the order has been confirmed"
          },
          "drip_registered": {
            "type": "boolean",
            "description": "if true, the project has a DRIP and the user has chosen to register in it"
          },
          "acquiring_with_assets": {
            "type": "boolean",
            "description": "if true, the project allows use of the NI 45-106 2.12 asset acquisition exemption and the user has indicated they are using it"
          },
          "total_assets_150_k": {
            "type": "boolean",
            "description": "can only be true if acquiring_with_assets is, indicates that the total amount of assets involved (potentially split over multiple orders) is 150K+"
          },
          "transferring_assets": {
            "type": "boolean",
            "description": "true if the user indicates they are transferring funds or other assets from a different registered account to fund this purchase"
          },
          "transfer_whole_or_part": {
            "type": "boolean",
            "description": "true if the user indicates they are transferring funds (transferring_assets) in whole, false if in part"
          },
          "hubspot_creation": {
            "type": "number",
            "description": "the status of creating this in hubspot. 0 &#x3D; nothing, 1 &#x3D; request sent, 2 &#x3D; completed"
          },
          "hubspot_dealid": {
            "type": "string",
            "description": "the id of the deal in hubspot that matches this order"
          },
          "escrow_no": {
            "type": "string",
            "description": "the identifier for an esrow of funds"
          },
          "escrow_settled_no": {
            "type": "string",
            "description": "the identifier of an escrow settling"
          },
          "refund_no": {
            "type": "string",
            "description": "the identifier for a refund"
          },
          "refund_settled_no": {
            "type": "string",
            "description": "the verification identifier for a refund"
          },
          "transfer_no": {
            "type": "string",
            "description": "the identification for a transfer"
          },
          "trust_company_name": {
            "type": "string",
            "description": "the name of the trust company associated with the project that the user has indicated they have an existing account with"
          },
          "trust_company_account_no": {
            "type": "string",
            "description": "the number of the existing account the user has with the trust company indicated in trust_company_name"
          },
          "sale_price": {
            "type": "number",
            "description": "the final price per share that the oder was processed with"
          },
          "agent_comm": {
            "type": "number",
            "description": "the commision rate the agent will receive"
          },
          "status": {
            "type": "number",
            "description": "the current degree of completion"
          },
          "project_id": {
            "type": "number",
            "description": "the id of the project that the security is for"
          },
          "issuer_id": {
            "type": "number",
            "description": "the id of the organization that issued the security"
          },
          "user_id": {
            "type": "number",
            "description": "the user that the order is for"
          },
          "ffba_id": {
            "type": "number",
            "description": "the FFBA association relevant to this order"
          },
          "joint_subscriber_id": {
            "type": "number",
            "description": "the joint subsciber associated with this order"
          },
          "filed_roed_row_match": {
            "type": "number",
            "description": "the row number in the filed roed report that this order matches to"
          },
          "order_date": {
            "format": "date-time",
            "type": "string",
            "description": "the date the order was placed"
          },
          "docusign_date": {
            "format": "date-time",
            "type": "string",
            "description": "the date the documents were signed with docusign"
          },
          "escrow_date": {
            "format": "date-time",
            "type": "string",
            "description": "the date an escrow was recorded"
          },
          "transfer_date": {
            "format": "date-time",
            "type": "string",
            "description": "the effective date of a transfer"
          },
          "transfer_settled_date": {
            "format": "date-time",
            "type": "string",
            "description": "the date a transfer settled"
          },
          "escrow_settled_date": {
            "format": "date-time",
            "type": "string",
            "description": "the date an escrow settled"
          },
          "refund_settled_date": {
            "format": "date-time",
            "type": "string",
            "description": "the date a refund was settled"
          },
          "refund_date": {
            "format": "date-time",
            "type": "string",
            "description": "the date a refund was recorded"
          },
          "sell_date": {
            "format": "date-time",
            "type": "string",
            "description": "the date of the sale"
          },
          "trade_date": {
            "format": "date-time",
            "type": "string",
            "description": "the date of the trade"
          },
          "estimated_trade_date": {
            "format": "date-time",
            "type": "string",
            "description": "the date that the trade is expected to occur"
          },
          "transfer_old_id": {
            "type": "number",
            "description": "the id of the old order in a transfer"
          },
          "is_deleted": {
            "type": "boolean",
            "description": "if true, this row is &quot;logically&quot; deleted. that is, its not to be used any more and is kept for historical/audit purposes only"
          },
          "last_changed_by_id": {
            "type": "number",
            "description": "the id of the user that made the last change or in the case of its initial creation, the user that created it"
          },
          "createtime": {
            "format": "date-time",
            "type": "string",
            "description": "the point in time this row was first created regardless of modifications"
          },
          "updatetime": {
            "format": "date-time",
            "type": "string",
            "description": "the last point in time this row was modified"
          },
          "events_to_investment_order": {
            "description": "This was created from the details of the foreign key FK_EVENTS_TO_INVESTMENT_ORDER and described as: ",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Event"
            }
          },
          "distributions_to": {
            "description": "This was created from the details of the foreign key FK_INVESTMENT_ORDERS_DISTRIBUTIONS_TO_ID and described as: ",
            "allOf": [
              {
                "$ref": "#/components/schemas/UserBankingDetails"
              }
            ]
          },
          "ffba": {
            "description": "This was created from the details of the foreign key FK_INVESTMENT_ORDERS_FFBA_ID and described as: ",
            "allOf": [
              {
                "$ref": "#/components/schemas/FfbaAssociation"
              }
            ]
          },
          "investment_withdrawal": {
            "description": "This was created from the details of the foreign key FK_INVESTMENT_ORDERS_INVESTMENT_WITHDRAWAL_ID and described as: ",
            "allOf": [
              {
                "$ref": "#/components/schemas/InvestmentWithdrawal"
              }
            ]
          },
          "issuer": {
            "description": "This was created from the details of the foreign key FK_INVESTMENT_ORDERS_ISSUER_ID_ORDERS and described as: ",
            "allOf": [
              {
                "$ref": "#/components/schemas/UserSocialProfile"
              }
            ]
          },
          "joint_subscriber": {
            "description": "This was created from the details of the foreign key FK_INVESTMENT_ORDERS_JOINT_SUBSCRIBER_TO_USER and described as: ",
            "allOf": [
              {
                "$ref": "#/components/schemas/AllUser"
              }
            ]
          },
          "last_changed_by": {
            "description": "This was created from the details of the foreign key FK_INVESTMENT_ORDERS_LAST_CHANGED_BY_ID_CHANGES and described as: ",
            "allOf": [
              {
                "$ref": "#/components/schemas/AllUser"
              }
            ]
          },
          "payment_method": {
            "description": "This was created from the details of the foreign key FK_INVESTMENT_ORDERS_PAYMENT_METHOD_ID and described as: ",
            "allOf": [
              {
                "$ref": "#/components/schemas/ProjectAccount"
              }
            ]
          },
          "payments_from": {
            "description": "This was created from the details of the foreign key FK_INVESTMENT_ORDERS_PAYMENTS_FROM_ID and described as: ",
            "allOf": [
              {
                "$ref": "#/components/schemas/UserBankingDetails"
              }
            ]
          },
          "project": {
            "description": "This was created from the details of the foreign key FK_INVESTMENT_ORDERS_PROJECT_ID_ORDERS and described as: ",
            "allOf": [
              {
                "$ref": "#/components/schemas/Project"
              }
            ]
          },
          "roed_schedule1": {
            "description": "This was created from the details of the foreign key FK_INVESTMENT_ORDERS_ROED_SCHEDULE1_ID_ORDERS and described as: ",
            "allOf": [
              {
                "$ref": "#/components/schemas/RoedSchedule1"
              }
            ]
          },
          "transfer_old": {
            "description": "This was created from the details of the foreign key FK_INVESTMENT_ORDERS_TRANSFER_OLD_ID and described as: ",
            "allOf": [
              {
                "$ref": "#/components/schemas/InvestmentOrder"
              }
            ]
          },
          "user_entity": {
            "description": "This was created from the details of the foreign key FK_INVESTMENT_ORDERS_USER_ENTITY_ID and described as: ",
            "allOf": [
              {
                "$ref": "#/components/schemas/UserEntity"
              }
            ]
          },
          "user": {
            "description": "This was created from the details of the foreign key FK_INVESTMENT_ORDERS_USER_ID_ORDERS and described as: ",
            "allOf": [
              {
                "$ref": "#/components/schemas/AllUser"
              }
            ]
          },
          "investment_withdrawal_head_to_investment_orders": {
            "description": "This was created from the details of the foreign key FK_INVESTMENT_WITHDRAWAL_HEAD_TO_INVESTMENT_ORDERS and described as: ",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/InvestmentWithdrawal"
            }
          },
          "acknowledgement_details": {
            "description": "This was created from the details of the foreign key FK_INVESTOR_ACK_ORDERS_ORDER_ID_ACKNOWLEDGEMENT_DETAILS and described as: ",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OrderAcknowledgement"
            }
          },
          "adjustments": {
            "description": "This was created from the details of the foreign key FK_INVESTOR_EARNINGS_ORDER_ID_ADJUSTMENTS and described as: ",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/InvestorEarning"
            }
          },
          "pdfs": {
            "description": "This was created from the details of the foreign key FK_USERS_PDF_ORDER_ID_PDFS and described as: ",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserPdf"
            }
          }
        },
        "required": [
          "id",
          "entity_type",
          "entity_id",
          "user_entity_id",
          "order_no",
          "share_price",
          "number_of_shares",
          "total_amount",
          "acknowledgements",
          "docusign",
          "document_name",
          "docusign_guid",
          "docusign_merge_hash",
          "payment",
          "roed_at_initiation",
          "payment_mode",
          "payment_method_id",
          "investment_withdrawal_id",
          "distributions_to_id",
          "payments_from_id",
          "roed_schedule1_id",
          "order_confirm",
          "drip_registered",
          "acquiring_with_assets",
          "total_assets_150_k",
          "transferring_assets",
          "transfer_whole_or_part",
          "hubspot_creation",
          "hubspot_dealid",
          "escrow_no",
          "escrow_settled_no",
          "refund_no",
          "refund_settled_no",
          "transfer_no",
          "trust_company_name",
          "trust_company_account_no",
          "sale_price",
          "agent_comm",
          "status",
          "project_id",
          "issuer_id",
          "user_id",
          "ffba_id",
          "joint_subscriber_id",
          "filed_roed_row_match",
          "order_date",
          "docusign_date",
          "escrow_date",
          "transfer_date",
          "transfer_settled_date",
          "escrow_settled_date",
          "refund_settled_date",
          "refund_date",
          "sell_date",
          "trade_date",
          "estimated_trade_date",
          "transfer_old_id",
          "is_deleted",
          "last_changed_by_id",
          "createtime",
          "updatetime",
          "events_to_investment_order",
          "distributions_to",
          "ffba",
          "investment_withdrawal",
          "issuer",
          "joint_subscriber",
          "last_changed_by",
          "payment_method",
          "payments_from",
          "project",
          "roed_schedule1",
          "transfer_old",
          "user_entity",
          "user",
          "investment_withdrawal_head_to_investment_orders",
          "acknowledgement_details",
          "adjustments",
          "pdfs"
        ]
      },
      "Event": {
        "type": "object",
        "properties": {
          "id": {
            "type": "number",
            "description": "the unique internal identifier (primary key) of the row"
          },
          "type": {
            "type": "string",
            "description": "coded value about what kind of event has occured"
          },
          "user_id": {
            "type": "number",
            "description": "the user the event relates to"
          },
          "issuer_id": {
            "type": "number",
            "description": "the social profile of the organization that sponsors the project that this event releates to"
          },
          "project_id": {
            "type": "number",
            "description": "the project this event relates to"
          },
          "investment_transaction_id": {
            "type": "number",
            "description": "the financial transaction that this relates to"
          },
          "investment_order_id": {
            "type": "number",
            "description": "the id of the order that this relates to"
          },
          "investment_withdrawel_id": {
            "type": "number",
            "description": "the id of the withdrawel this relates to"
          },
          "investor_earning_id": {
            "type": "number",
            "description": "the id of the earnings this relates to"
          },
          "user_pdf_id": {
            "type": "number",
            "description": ""
          },
          "additional": {
            "type": "string",
            "description": ""
          },
          "webhooks_fired": {
            "type": "boolean",
            "description": "if true (1), the webhooks have been executed for this event"
          },
          "is_deleted": {
            "type": "boolean",
            "description": "if true, this row is &quot;logically&quot; deleted. that is, its not to be used any more and is kept for historical/audit purposes only"
          },
          "last_changed_by_id": {
            "type": "number",
            "description": "the id of the user that made the last change or in the case of its initial creation, the user that created it"
          },
          "updatetime": {
            "format": "date-time",
            "type": "string",
            "description": "the last point in time this row was modified"
          },
          "createtime": {
            "format": "date-time",
            "type": "string",
            "description": "the point in time this row was first created regardless of modifications"
          },
          "investment_order": {
            "description": "This was created from the details of the foreign key FK_EVENTS_TO_INVESTMENT_ORDER and described as: ",
            "allOf": [
              {
                "$ref": "#/components/schemas/InvestmentOrder"
              }
            ]
          },
          "investment_transaction": {
            "description": "This was created from the details of the foreign key FK_EVENTS_TO_INVESTMENT_TRANSACTION and described as: ",
            "allOf": [
              {
                "$ref": "#/components/schemas/InvestmentTransaction"
              }
            ]
          },
          "investment_withdrawel": {
            "description": "This was created from the details of the foreign key FK_EVENTS_TO_INVESTMENT_WITHDRAWEL and described as: ",
            "allOf": [
              {
                "$ref": "#/components/schemas/InvestmentWithdrawal"
              }
            ]
          },
          "investor_earning": {
            "description": "This was created from the details of the foreign key FK_EVENTS_TO_INVESTOR_EARNINGS and described as: ",
            "allOf": [
              {
                "$ref": "#/components/schemas/InvestorEarning"
              }
            ]
          },
          "issuer": {
            "description": "This was created from the details of the foreign key FK_EVENTS_TO_ISSUER and described as: ",
            "allOf": [
              {
                "$ref": "#/components/schemas/UserSocialProfile"
              }
            ]
          },
          "last_changed_by": {
            "description": "This was created from the details of the foreign key FK_EVENTS_LAST_CHANGED_BY_ID_CHANGES and described as: ",
            "allOf": [
              {
                "$ref": "#/components/schemas/AllUser"
              }
            ]
          },
          "project": {
            "description": "This was created from the details of the foreign key EVENTS_PROJECT and described as: ",
            "allOf": [
              {
                "$ref": "#/components/schemas/Project"
              }
            ]
          },
          "user": {
            "description": "This was created from the details of the foreign key FK_EVENTS_TO_USER and described as: ",
            "allOf": [
              {
                "$ref": "#/components/schemas/AllUser"
              }
            ]
          },
          "user_pdf": {
            "description": "This was created from the details of the foreign key FK_EVENTS_TO_USERS_PDF and described as: ",
            "allOf": [
              {
                "$ref": "#/components/schemas/UserPdf"
              }
            ]
          }
        },
        "required": [
          "id",
          "type",
          "user_id",
          "issuer_id",
          "project_id",
          "investment_transaction_id",
          "investment_order_id",
          "investment_withdrawel_id",
          "investor_earning_id",
          "user_pdf_id",
          "additional",
          "webhooks_fired",
          "is_deleted",
          "last_changed_by_id",
          "updatetime",
          "createtime",
          "investment_order",
          "investment_transaction",
          "investment_withdrawel",
          "investor_earning",
          "issuer",
          "last_changed_by",
          "project",
          "user",
          "user_pdf"
        ]
      },
      "Number": {
        "type": "object",
        "properties": {}
      },
      "Investor": {
        "type": "object",
        "properties": {
          "id": {
            "type": "number",
            "description": "the unique internal identifier (primary key) of the row"
          },
          "user_type": {
            "type": "string",
            "description": "the category of user this is (i&#x3D;investor, a&#x3D;admin, c&#x3D;issuer admin)"
          },
          "first_name": {
            "type": "string",
            "description": "the first name of the person who uses the account"
          },
          "last_name": {
            "type": "string",
            "description": "the last name of the person who uses the account"
          },
          "avatar_image_file_name": {
            "type": "string",
            "description": "the name of the file that holds the avatars picture. this is the resouce relative, not site relative."
          },
          "email": {
            "type": "string",
            "description": "the email address that identifies the account"
          },
          "last_login": {
            "format": "date-time",
            "type": "string",
            "description": "the last point in time the user logged in"
          },
          "last_ip": {
            "type": "string",
            "description": "the last ip that they used to access the site from"
          },
          "identity_provider": {
            "type": "string",
            "description": "the name of the service that verifies the identity of the user (according to azure b2c))"
          },
          "user_principle_name": {
            "type": "string",
            "description": "the identifier for the user in the b2c system"
          },
          "preferences_as_json": {
            "type": "string",
            "description": "json format values that are used by applications as preferences"
          },
          "is_deleted": {
            "type": "boolean",
            "description": "if true, this row is &quot;logically&quot; deleted. that is, its not to be used any more and is kept for historical/audit purposes only"
          },
          "last_changed_by_id": {
            "type": "number",
            "description": "the id of the user that made the last change or in the case of its initial creation, the user that created it"
          },
          "createtime": {
            "format": "date-time",
            "type": "string",
            "description": "the point in time this row was first created regardless of modifications"
          },
          "updatetime": {
            "format": "date-time",
            "type": "string",
            "description": "the last point in time this row was modified"
          },
          "cobranded_client_of": {
            "description": "This was created from the details of the foreign key FK_ALL_USERS_COBRANDED_TO_SOCIAL_PROFILE and described as: ",
            "allOf": [
              {
                "$ref": "#/components/schemas/UserSocialProfile"
              }
            ]
          },
          "country": {
            "description": "This was created from the details of the foreign key FK_ALL_USERS_TO_COUNTRIES and described as: ",
            "allOf": [
              {
                "$ref": "#/components/schemas/Country"
              }
            ]
          },
          "last_changed_by": {
            "description": "This was created from the details of the foreign key FK_ALL_USERS_LAST_CHANGED_BY_ID_CHANGES and described as: ",
            "allOf": [
              {
                "$ref": "#/components/schemas/AllUser"
              }
            ]
          },
          "changes": {
            "description": "",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/WebHook"
            }
          },
          "mailing_country": {
            "description": "This was created from the details of the foreign key FK_ALL_USERS_TO_MCOUNTRIES and described as: ",
            "allOf": [
              {
                "$ref": "#/components/schemas/Country"
              }
            ]
          },
          "mailing_province": {
            "description": "This was created from the details of the foreign key FK_ALL_USERS_TO_MPROVINCES and described as: ",
            "allOf": [
              {
                "$ref": "#/components/schemas/Province"
              }
            ]
          },
          "province": {
            "description": "This was created from the details of the foreign key FK_ALL_USERS_TO_PROVINCE and described as: ",
            "allOf": [
              {
                "$ref": "#/components/schemas/Province"
              }
            ]
          },
          "background_processs_lastuser_last_changed_by_id_changes": {
            "description": "This was created from the details of the foreign key FK_BACKGROUND_PROCESSS_LASTUSER_LAST_CHANGED_BY_ID_CHANGES and described as: ",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BackgroundProcess"
            }
          },
          "events_to_user": {
            "description": "This was created from the details of the foreign key FK_EVENTS_TO_USER and described as: ",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Event"
            }
          },
          "ffba_association_to_user": {
            "description": "This was created from the details of the foreign key FK_FFBA_ASSOCIATION_TO_USER and described as: ",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FfbaAssociation"
            }
          },
          "contacts": {
            "description": "This was created from the details of the foreign key FK_IMPORTED_CONTACTS_USER_ID_CONTACTS and described as: ",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ImportedContact"
            }
          },
          "investment_orders_joint_subscriber_to_user": {
            "description": "This was created from the details of the foreign key FK_INVESTMENT_ORDERS_JOINT_SUBSCRIBER_TO_USER and described as: ",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/InvestmentOrder"
            }
          },
          "orders": {
            "description": "This was created from the details of the foreign key FK_INVESTMENT_ORDERS_USER_ID_ORDERS and described as: ",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/InvestmentOrder"
            }
          },
          "transactions": {
            "description": "This was created from the details of the foreign key FK_INVESTMENT_TRANSACTION_USER_ID_TRANSACTIONS and described as: ",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/InvestmentTransaction"
            }
          },
          "watches": {
            "description": "This was created from the details of the foreign key FK_INVESTMENT_WATCHLIST_USER_ID_WATCHES and described as: ",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/InvestmentWatchlist"
            }
          },
          "investor_ack_orders_user_order_acknowledgements": {
            "description": "This was created from the details of the foreign key FK_INVESTOR_ACK_ORDERS_USER_ORDER_ACKNOWLEDGEMENTS and described as: ",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OrderAcknowledgement"
            }
          },
          "investor_earnings_user_d": {
            "description": "This was created from the details of the foreign key FK_INVESTOR_EARNINGS_USER_D and described as: ",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/InvestorEarning"
            }
          },
          "intended_trades": {
            "description": "This was created from the details of the foreign key FK_INVESTOR_INTENDED_TRADES_USER_ID_INTENDED_TRADES and described as: ",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/InvestorIntendedTrades"
            }
          },
          "sent_emails": {
            "description": "This was created from the details of the foreign key FK_MAILS_FROM_ID_SENT_EMAILS and described as: ",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Mail"
            }
          },
          "received_emails": {
            "description": "This was created from the details of the foreign key FK_MAILS_TO_ID_RECEIVED_EMAILS and described as: ",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Mail"
            }
          },
          "accessible_modules": {
            "description": "This was created from the details of the foreign key FK_MODULE_ACCESS_USER_ID_ACCESSIBLE_MODULES and described as: ",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ModuleAccess"
            }
          },
          "tax_reports": {
            "description": "This was created from the details of the foreign key FK_PROJECT_TAX_REPORTS_USER_ID_TAX_REPORTS and described as: ",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ProjectTaxReport"
            }
          },
          "owner_user": {
            "description": "This was created from the details of the foreign key FK_SUPPORT_ENGINEERS_USER_ID_OWNER_USER and described as: ",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SupportEngineer"
            }
          },
          "user_issuer_associations_to_user_id_issuer_associations": {
            "description": "This was created from the details of the foreign key FK_USER_ISSUER_ASSOCIATIONS_TO_USER_ID_ISSUER_ASSOCIATIONS and described as: ",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserIssuerAssociation"
            }
          },
          "user_relationship_to_user_1": {
            "description": "This was created from the details of the foreign key FK_USER_RELATIONSHIP_TO_USER_1 and described as: ",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserRelationship"
            }
          },
          "user_relationship_to_user_2": {
            "description": "This was created from the details of the foreign key FK_USER_RELATIONSHIP_TO_USER_2 and described as: ",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserRelationship"
            }
          },
          "users_banking_details_to_joint_user": {
            "description": "This was created from the details of the foreign key FK_USERS_BANKING_DETAILS_TO_JOINT_USER and described as: ",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserBankingDetails"
            }
          },
          "users_banking_details_to_user": {
            "description": "This was created from the details of the foreign key FK_USERS_BANKING_DETAILS_TO_USER and described as: ",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserBankingDetails"
            }
          },
          "financial_kyc": {
            "description": "This was created from the details of the foreign key FK_USERS_EMPLOYMENT_USER_ID_FINANCIAL_KYC and described as: ",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserFinancialKyc"
            }
          },
          "entities": {
            "description": "This was created from the details of the foreign key FK_USERS_ENTITY_USER_ID_ENTITIES and described as: ",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserEntity"
            }
          },
          "invitations": {
            "description": "This was created from the details of the foreign key FK_USERS_INVITEE_USER_ID_INVITATIONS and described as: ",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserInvitation"
            }
          },
          "pdfs": {
            "description": "This was created from the details of the foreign key FK_USERS_PDF_USER_ID_PDFS and described as: ",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserPdf"
            }
          },
          "answers": {
            "description": "This was created from the details of the foreign key FK_USERS_QUESTIONARY_USER_ID_ANSWERS and described as: ",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserAnswer"
            }
          },
          "requests": {
            "description": "This was created from the details of the foreign key FK_USERS_REQUEST_USER_ID_REQUESTS and described as: ",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserRequest"
            }
          },
          "users_socialprofile_last_changed_by_id_changes": {
            "description": "This was created from the details of the foreign key FK_USERS_SOCIALPROFILE_LAST_CHANGED_BY_ID_CHANGES and described as: ",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserSocialProfile"
            }
          },
          "users_socialprofile_user_id_profiles": {
            "description": "This was created from the details of the foreign key FK_USERS_SOCIALPROFILE_USER_ID_PROFILES and described as: ",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserSocialProfile"
            }
          },
          "subscriptions": {
            "description": "This was created from the details of the foreign key FK_USERS_SUBSCRIBE_USER_ID_SUBSCRIPTIONS and described as: ",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserSubscription"
            }
          },
          "web_hooks_to_user": {
            "description": "This was created from the details of the foreign key FK_WEB_HOOKS_TO_USER and described as: ",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/WebHook"
            }
          },
          "hubspot_vid": {
            "type": "string",
            "description": "the unique id in hubspot for the contact that has a 1:1 relationship with this user"
          },
          "email_verified_status": {
            "type": "boolean",
            "description": "true if the user or someone at fundscraper has verified their email address"
          },
          "linkedin": {
            "type": "string",
            "description": "the identifier the user uses on linked in"
          },
          "facebook": {
            "type": "string",
            "description": "the identifier the user uses on facebook"
          },
          "google_address": {
            "type": "string",
            "description": "the identifier the user uses for googe social (deprecated)"
          },
          "apt_number": {
            "type": "string",
            "description": "if the user is in a multi-unit building, the number/designation of that unit"
          },
          "actual_investment_level": {
            "type": "number",
            "description": "the level of investment the user is capable of"
          },
          "user_proposed_investment_level": {
            "type": "number",
            "description": "the level of investment the user proposed they are capable of"
          },
          "exemption": {
            "type": "boolean",
            "description": "if true, they are taking an exemption for investment"
          },
          "eligible_exemption": {
            "type": "boolean",
            "description": "is the user eligibible for an exemption to exeed the limit?"
          },
          "statements_flag": {
            "type": "boolean",
            "description": "if true, send the user statements"
          },
          "kyc_confirmed": {
            "type": "boolean",
            "description": "if true, admin has confirmed user KYC is accurate"
          },
          "equifax_confirmed": {
            "type": "boolean",
            "description": "if true, admin has confirmed user Equifax is accurate"
          },
          "identity_confirmed": {
            "type": "boolean",
            "description": "if true, admin has confirmed user identity"
          },
          "citizen": {
            "type": "string",
            "description": "Yes if they are a citizen of canada"
          },
          "resident": {
            "type": "string",
            "description": "Yes if they are a resident of canada"
          },
          "address": {
            "type": "string",
            "description": "the street address of where the user lives"
          },
          "zip": {
            "type": "string",
            "description": "the postal identifier of where the person lives"
          },
          "city": {
            "type": "string",
            "description": "the name of the city the person lives in"
          },
          "province_id": {
            "type": "number",
            "description": "the id of the province the user lives in"
          },
          "mailing_address": {
            "type": "string",
            "description": "the street address of where to send mail to for the person"
          },
          "mailing_zip": {
            "type": "string",
            "description": "the postal identifier to send mail to"
          },
          "mailing_city": {
            "type": "string",
            "description": "the name of the city to send mail to"
          },
          "mailing_apt_number": {
            "type": "string",
            "description": "if the user is in a multi-unit building, the number/designation of that unit"
          },
          "sin": {
            "type": "string",
            "description": "the persons government identifier for social services"
          },
          "phone": {
            "type": "string",
            "description": "the telephone number to use to contact the person at"
          },
          "workphone": {
            "type": "string",
            "description": "the telephone number to use to contact the person at their place of work"
          },
          "homephone": {
            "type": "string",
            "description": "the telephone number of the persons primary residence"
          },
          "fax": {
            "type": "string",
            "description": "the telephone number to use to fax documents to"
          },
          "workemail": {
            "type": "string",
            "description": "the email address the person uses for work purposes"
          },
          "dob": {
            "type": "string",
            "description": "the date of birth of the person"
          },
          "notes": {
            "type": "string",
            "description": "general notes about investments for the user"
          },
          "section_23": {
            "type": "string",
            "description": "if true they are relying on section 2.3 of the legislation for exempt distributions"
          },
          "section_29": {
            "type": "string",
            "description": "if true they are relying on section 2.9 for exempt distributions"
          },
          "is_registrant": {
            "type": "string",
            "description": "are they a &quot;registrant&quot; for exempt distributions?"
          },
          "is_insider": {
            "type": "string",
            "description": "a they a securities insider?"
          },
          "legal_person": {
            "type": "string",
            "description": "the full legal name of the person"
          },
          "client_number": {
            "type": "string",
            "description": "the human readable number assigned by FS to identify the account"
          },
          "utm_source": {
            "type": "string",
            "description": "the identifier for the marketing system that was responsible for originating the user"
          },
          "utm_medium": {
            "type": "string",
            "description": "additional marketing origin information"
          },
          "utm_campaign": {
            "type": "string",
            "description": "the marketing campiagn that originated the user"
          },
          "utm_content": {
            "type": "string",
            "description": "additional marketing origin information"
          },
          "utm_term": {
            "type": "string",
            "description": "additional marketing origin information"
          },
          "status": {
            "type": "number",
            "description": "the avilability of the account for use"
          },
          "suspend_request": {
            "type": "boolean",
            "description": "if true, the user is actively attempting to suspend their account"
          },
          "country_id": {
            "type": "number",
            "description": "the id of the country the user lives in"
          },
          "mailing_country_id": {
            "type": "number",
            "description": "the id of the country to send mail to"
          },
          "mailing_province_id": {
            "type": "number",
            "description": "the id of the province to send mail to "
          },
          "cobranded_client_of_id": {
            "type": "number",
            "description": "the sponsor that essentially owns this investor"
          },
          "balance": {
            "type": "number",
            "description": "the amount of money fundscraper owes the user"
          },
          "referral_link": {
            "type": "string",
            "description": "a url that the investor can forward to friends for sign up in order to get a referral fee"
          },
          "last_edit": {
            "format": "date-time",
            "type": "string",
            "description": "the last point in time the user altered their account"
          },
          "signup_date": {
            "format": "date-time",
            "type": "string",
            "description": "the point in time the user first signed up"
          },
          "referrer_site": {
            "type": "string",
            "description": "the url to the site that was the &quot;referrer&quot; when the user first signed up"
          },
          "referrer_attribution": {
            "type": "string",
            "description": "a marketing specified value used to connect the marketing program or source responible for signing up the user"
          }
        },
        "required": [
          "id",
          "user_type",
          "first_name",
          "last_name",
          "avatar_image_file_name",
          "email",
          "last_login",
          "last_ip",
          "identity_provider",
          "user_principle_name",
          "preferences_as_json",
          "is_deleted",
          "last_changed_by_id",
          "createtime",
          "updatetime",
          "cobranded_client_of",
          "country",
          "last_changed_by",
          "changes",
          "mailing_country",
          "mailing_province",
          "province",
          "background_processs_lastuser_last_changed_by_id_changes",
          "events_to_user",
          "ffba_association_to_user",
          "contacts",
          "investment_orders_joint_subscriber_to_user",
          "orders",
          "transactions",
          "watches",
          "investor_ack_orders_user_order_acknowledgements",
          "investor_earnings_user_d",
          "intended_trades",
          "sent_emails",
          "received_emails",
          "accessible_modules",
          "tax_reports",
          "owner_user",
          "user_issuer_associations_to_user_id_issuer_associations",
          "user_relationship_to_user_1",
          "user_relationship_to_user_2",
          "users_banking_details_to_joint_user",
          "users_banking_details_to_user",
          "financial_kyc",
          "entities",
          "invitations",
          "pdfs",
          "answers",
          "requests",
          "users_socialprofile_last_changed_by_id_changes",
          "users_socialprofile_user_id_profiles",
          "subscriptions",
          "web_hooks_to_user",
          "hubspot_vid",
          "email_verified_status",
          "linkedin",
          "facebook",
          "google_address",
          "apt_number",
          "actual_investment_level",
          "user_proposed_investment_level",
          "exemption",
          "eligible_exemption",
          "statements_flag",
          "kyc_confirmed",
          "equifax_confirmed",
          "identity_confirmed",
          "citizen",
          "resident",
          "address",
          "zip",
          "city",
          "province_id",
          "mailing_address",
          "mailing_zip",
          "mailing_city",
          "mailing_apt_number",
          "sin",
          "phone",
          "workphone",
          "homephone",
          "fax",
          "workemail",
          "dob",
          "notes",
          "section_23",
          "section_29",
          "is_registrant",
          "is_insider",
          "legal_person",
          "client_number",
          "utm_source",
          "utm_medium",
          "utm_campaign",
          "utm_content",
          "utm_term",
          "status",
          "suspend_request",
          "country_id",
          "mailing_country_id",
          "mailing_province_id",
          "cobranded_client_of_id",
          "balance",
          "referral_link",
          "last_edit",
          "signup_date",
          "referrer_site",
          "referrer_attribution"
        ]
      },
      "Preference": {
        "type": "object",
        "properties": {}
      },
      "MetricsRequest": {
        "type": "object",
        "properties": {}
      },
      "MetricResult": {
        "type": "object",
        "properties": {}
      },
      "String": {
        "type": "object",
        "properties": {}
      },
      "AdminUser": {
        "type": "object",
        "properties": {
          "id": {
            "type": "number",
            "description": "the unique internal identifier (primary key) of the row"
          },
          "user_type": {
            "type": "string",
            "description": "the category of user this is (i&#x3D;investor, a&#x3D;admin, c&#x3D;issuer admin)"
          },
          "first_name": {
            "type": "string",
            "description": "the first name of the person who uses the account"
          },
          "last_name": {
            "type": "string",
            "description": "the last name of the person who uses the account"
          },
          "avatar_image_file_name": {
            "type": "string",
            "description": "the name of the file that holds the avatars picture. this is the resouce relative, not site relative."
          },
          "email": {
            "type": "string",
            "description": "the email address that identifies the account"
          },
          "last_login": {
            "format": "date-time",
            "type": "string",
            "description": "the last point in time the user logged in"
          },
          "last_ip": {
            "type": "string",
            "description": "the last ip that they used to access the site from"
          },
          "identity_provider": {
            "type": "string",
            "description": "the name of the service that verifies the identity of the user (according to azure b2c))"
          },
          "user_principle_name": {
            "type": "string",
            "description": "the identifier for the user in the b2c system"
          },
          "preferences_as_json": {
            "type": "string",
            "description": "json format values that are used by applications as preferences"
          },
          "is_deleted": {
            "type": "boolean",
            "description": "if true, this row is &quot;logically&quot; deleted. that is, its not to be used any more and is kept for historical/audit purposes only"
          },
          "last_changed_by_id": {
            "type": "number",
            "description": "the id of the user that made the last change or in the case of its initial creation, the user that created it"
          },
          "createtime": {
            "format": "date-time",
            "type": "string",
            "description": "the point in time this row was first created regardless of modifications"
          },
          "updatetime": {
            "format": "date-time",
            "type": "string",
            "description": "the last point in time this row was modified"
          },
          "cobranded_client_of": {
            "description": "This was created from the details of the foreign key FK_ALL_USERS_COBRANDED_TO_SOCIAL_PROFILE and described as: ",
            "allOf": [
              {
                "$ref": "#/components/schemas/UserSocialProfile"
              }
            ]
          },
          "country": {
            "description": "This was created from the details of the foreign key FK_ALL_USERS_TO_COUNTRIES and described as: ",
            "allOf": [
              {
                "$ref": "#/components/schemas/Country"
              }
            ]
          },
          "last_changed_by": {
            "description": "This was created from the details of the foreign key FK_ALL_USERS_LAST_CHANGED_BY_ID_CHANGES and described as: ",
            "allOf": [
              {
                "$ref": "#/components/schemas/AllUser"
              }
            ]
          },
          "changes": {
            "description": "",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/WebHook"
            }
          },
          "mailing_country": {
            "description": "This was created from the details of the foreign key FK_ALL_USERS_TO_MCOUNTRIES and described as: ",
            "allOf": [
              {
                "$ref": "#/components/schemas/Country"
              }
            ]
          },
          "mailing_province": {
            "description": "This was created from the details of the foreign key FK_ALL_USERS_TO_MPROVINCES and described as: ",
            "allOf": [
              {
                "$ref": "#/components/schemas/Province"
              }
            ]
          },
          "province": {
            "description": "This was created from the details of the foreign key FK_ALL_USERS_TO_PROVINCE and described as: ",
            "allOf": [
              {
                "$ref": "#/components/schemas/Province"
              }
            ]
          },
          "background_processs_lastuser_last_changed_by_id_changes": {
            "description": "This was created from the details of the foreign key FK_BACKGROUND_PROCESSS_LASTUSER_LAST_CHANGED_BY_ID_CHANGES and described as: ",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BackgroundProcess"
            }
          },
          "events_to_user": {
            "description": "This was created from the details of the foreign key FK_EVENTS_TO_USER and described as: ",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Event"
            }
          },
          "ffba_association_to_user": {
            "description": "This was created from the details of the foreign key FK_FFBA_ASSOCIATION_TO_USER and described as: ",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FfbaAssociation"
            }
          },
          "contacts": {
            "description": "This was created from the details of the foreign key FK_IMPORTED_CONTACTS_USER_ID_CONTACTS and described as: ",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ImportedContact"
            }
          },
          "investment_orders_joint_subscriber_to_user": {
            "description": "This was created from the details of the foreign key FK_INVESTMENT_ORDERS_JOINT_SUBSCRIBER_TO_USER and described as: ",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/InvestmentOrder"
            }
          },
          "orders": {
            "description": "This was created from the details of the foreign key FK_INVESTMENT_ORDERS_USER_ID_ORDERS and described as: ",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/InvestmentOrder"
            }
          },
          "transactions": {
            "description": "This was created from the details of the foreign key FK_INVESTMENT_TRANSACTION_USER_ID_TRANSACTIONS and described as: ",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/InvestmentTransaction"
            }
          },
          "watches": {
            "description": "This was created from the details of the foreign key FK_INVESTMENT_WATCHLIST_USER_ID_WATCHES and described as: ",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/InvestmentWatchlist"
            }
          },
          "investor_ack_orders_user_order_acknowledgements": {
            "description": "This was created from the details of the foreign key FK_INVESTOR_ACK_ORDERS_USER_ORDER_ACKNOWLEDGEMENTS and described as: ",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OrderAcknowledgement"
            }
          },
          "investor_earnings_user_d": {
            "description": "This was created from the details of the foreign key FK_INVESTOR_EARNINGS_USER_D and described as: ",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/InvestorEarning"
            }
          },
          "intended_trades": {
            "description": "This was created from the details of the foreign key FK_INVESTOR_INTENDED_TRADES_USER_ID_INTENDED_TRADES and described as: ",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/InvestorIntendedTrades"
            }
          },
          "sent_emails": {
            "description": "This was created from the details of the foreign key FK_MAILS_FROM_ID_SENT_EMAILS and described as: ",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Mail"
            }
          },
          "received_emails": {
            "description": "This was created from the details of the foreign key FK_MAILS_TO_ID_RECEIVED_EMAILS and described as: ",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Mail"
            }
          },
          "accessible_modules": {
            "description": "This was created from the details of the foreign key FK_MODULE_ACCESS_USER_ID_ACCESSIBLE_MODULES and described as: ",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ModuleAccess"
            }
          },
          "tax_reports": {
            "description": "This was created from the details of the foreign key FK_PROJECT_TAX_REPORTS_USER_ID_TAX_REPORTS and described as: ",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ProjectTaxReport"
            }
          },
          "owner_user": {
            "description": "This was created from the details of the foreign key FK_SUPPORT_ENGINEERS_USER_ID_OWNER_USER and described as: ",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SupportEngineer"
            }
          },
          "user_issuer_associations_to_user_id_issuer_associations": {
            "description": "This was created from the details of the foreign key FK_USER_ISSUER_ASSOCIATIONS_TO_USER_ID_ISSUER_ASSOCIATIONS and described as: ",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserIssuerAssociation"
            }
          },
          "user_relationship_to_user_1": {
            "description": "This was created from the details of the foreign key FK_USER_RELATIONSHIP_TO_USER_1 and described as: ",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserRelationship"
            }
          },
          "user_relationship_to_user_2": {
            "description": "This was created from the details of the foreign key FK_USER_RELATIONSHIP_TO_USER_2 and described as: ",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserRelationship"
            }
          },
          "users_banking_details_to_joint_user": {
            "description": "This was created from the details of the foreign key FK_USERS_BANKING_DETAILS_TO_JOINT_USER and described as: ",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserBankingDetails"
            }
          },
          "users_banking_details_to_user": {
            "description": "This was created from the details of the foreign key FK_USERS_BANKING_DETAILS_TO_USER and described as: ",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserBankingDetails"
            }
          },
          "financial_kyc": {
            "description": "This was created from the details of the foreign key FK_USERS_EMPLOYMENT_USER_ID_FINANCIAL_KYC and described as: ",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserFinancialKyc"
            }
          },
          "entities": {
            "description": "This was created from the details of the foreign key FK_USERS_ENTITY_USER_ID_ENTITIES and described as: ",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserEntity"
            }
          },
          "invitations": {
            "description": "This was created from the details of the foreign key FK_USERS_INVITEE_USER_ID_INVITATIONS and described as: ",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserInvitation"
            }
          },
          "pdfs": {
            "description": "This was created from the details of the foreign key FK_USERS_PDF_USER_ID_PDFS and described as: ",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserPdf"
            }
          },
          "answers": {
            "description": "This was created from the details of the foreign key FK_USERS_QUESTIONARY_USER_ID_ANSWERS and described as: ",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserAnswer"
            }
          },
          "requests": {
            "description": "This was created from the details of the foreign key FK_USERS_REQUEST_USER_ID_REQUESTS and described as: ",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserRequest"
            }
          },
          "users_socialprofile_last_changed_by_id_changes": {
            "description": "This was created from the details of the foreign key FK_USERS_SOCIALPROFILE_LAST_CHANGED_BY_ID_CHANGES and described as: ",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserSocialProfile"
            }
          },
          "users_socialprofile_user_id_profiles": {
            "description": "This was created from the details of the foreign key FK_USERS_SOCIALPROFILE_USER_ID_PROFILES and described as: ",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserSocialProfile"
            }
          },
          "subscriptions": {
            "description": "This was created from the details of the foreign key FK_USERS_SUBSCRIBE_USER_ID_SUBSCRIPTIONS and described as: ",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserSubscription"
            }
          },
          "web_hooks_to_user": {
            "description": "This was created from the details of the foreign key FK_WEB_HOOKS_TO_USER and described as: ",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/WebHook"
            }
          },
          "role": {
            "type": "string",
            "description": "the type of function the administrator performs"
          },
          "username": {
            "type": "string",
            "description": "deprecated, do not use"
          },
          "token": {
            "type": "string",
            "description": "the token used to identify the current session"
          },
          "token_update": {
            "format": "date-time",
            "type": "string",
            "description": "the last time the session token was updated"
          },
          "admin_role": {
            "type": "number",
            "description": "the type of administrative role performed"
          },
          "availability": {
            "type": "number",
            "description": "the avilability of the account for use"
          },
          "timezone": {
            "type": "string",
            "description": "The name of the timezone the administrator typically connects from"
          },
          "location": {
            "type": "string",
            "description": "The name of the country the administrator is generally located in"
          },
          "flag": {
            "type": "string",
            "description": "The name of the file that holds the image of the country flag the administrators location is in"
          }
        },
        "required": [
          "id",
          "user_type",
          "first_name",
          "last_name",
          "avatar_image_file_name",
          "email",
          "last_login",
          "last_ip",
          "identity_provider",
          "user_principle_name",
          "preferences_as_json",
          "is_deleted",
          "last_changed_by_id",
          "createtime",
          "updatetime",
          "cobranded_client_of",
          "country",
          "last_changed_by",
          "changes",
          "mailing_country",
          "mailing_province",
          "province",
          "background_processs_lastuser_last_changed_by_id_changes",
          "events_to_user",
          "ffba_association_to_user",
          "contacts",
          "investment_orders_joint_subscriber_to_user",
          "orders",
          "transactions",
          "watches",
          "investor_ack_orders_user_order_acknowledgements",
          "investor_earnings_user_d",
          "intended_trades",
          "sent_emails",
          "received_emails",
          "accessible_modules",
          "tax_reports",
          "owner_user",
          "user_issuer_associations_to_user_id_issuer_associations",
          "user_relationship_to_user_1",
          "user_relationship_to_user_2",
          "users_banking_details_to_joint_user",
          "users_banking_details_to_user",
          "financial_kyc",
          "entities",
          "invitations",
          "pdfs",
          "answers",
          "requests",
          "users_socialprofile_last_changed_by_id_changes",
          "users_socialprofile_user_id_profiles",
          "subscriptions",
          "web_hooks_to_user",
          "role",
          "username",
          "token",
          "token_update",
          "admin_role",
          "availability",
          "timezone",
          "location",
          "flag"
        ]
      },
      "AllUserAnswer": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "the unique internal identifier (primary key) of the row"
          },
          "question_type": {
            "type": "number",
            "description": ""
          },
          "user_id": {
            "type": "number",
            "description": "the user this is for"
          },
          "user_entity_id": {
            "type": "number",
            "description": "the id of the user entity that they were acting on the behalf of when they answered it"
          },
          "order_id": {
            "type": "number",
            "description": ""
          },
          "question_id": {
            "type": "number",
            "description": "the id of the question that was answered"
          },
          "question_text": {
            "type": "string",
            "description": "the text of the question when it was asked. assuming the original question has not change this should still match it"
          },
          "answer_text": {
            "type": "string",
            "description": "the response the user provided. if its a multipart response then its a collection of caret (^) separated answers"
          },
          "did_answer": {
            "type": "number",
            "description": ""
          },
          "notes": {
            "type": "string",
            "description": "extra notes by admin for the user answer of a question"
          },
          "is_confirmed": {
            "type": "boolean",
            "description": "identify if the answer has been confirmed"
          },
          "category": {
            "type": "number",
            "description": "the identification of what category the question is about"
          },
          "presentation_type": {
            "type": "number",
            "description": "the way on the ui in which the question was answer"
          },
          "is_deleted": {
            "type": "boolean",
            "description": "if true, this row is &quot;logically&quot; deleted. that is, its not to be used any more and is kept for historical/audit purposes only"
          },
          "last_changed_by_id": {
            "type": "number",
            "description": "the id of the user that made the last change or in the case of its initial creation, the user that created it"
          },
          "createtime": {
            "format": "date-time",
            "type": "string",
            "description": "the point in time this row was first created regardless of modifications"
          },
          "updatetime": {
            "format": "date-time",
            "type": "string",
            "description": "the last point in time this row was modified"
          }
        },
        "required": [
          "id",
          "question_type",
          "user_id",
          "user_entity_id",
          "order_id",
          "question_id",
          "question_text",
          "answer_text",
          "did_answer",
          "notes",
          "is_confirmed",
          "category",
          "presentation_type",
          "is_deleted",
          "last_changed_by_id",
          "createtime",
          "updatetime"
        ]
      },
      "ComputedAccountPosition": {
        "type": "object",
        "properties": {
          "project_id": {
            "type": "number",
            "description": ""
          },
          "user_id": {
            "type": "number",
            "description": ""
          },
          "account": {
            "type": "string",
            "description": ""
          },
          "user_entity_id": {
            "type": "number",
            "description": ""
          },
          "entity_type": {
            "type": "number",
            "description": ""
          },
          "book_value": {
            "type": "number",
            "description": ""
          },
          "market_value": {
            "type": "number",
            "description": ""
          },
          "shares": {
            "type": "number",
            "description": ""
          },
          "pending_shares": {
            "type": "number",
            "description": ""
          },
          "earliest_order_placed": {
            "format": "date-time",
            "type": "string",
            "description": ""
          },
          "earliest_funds_received": {
            "format": "date-time",
            "type": "string",
            "description": ""
          }
        },
        "required": [
          "project_id",
          "user_id",
          "account",
          "user_entity_id",
          "entity_type",
          "book_value",
          "market_value",
          "shares",
          "pending_shares",
          "earliest_order_placed",
          "earliest_funds_received"
        ]
      },
      "ComputedAccount": {
        "type": "object",
        "properties": {
          "user_id": {
            "type": "number",
            "description": ""
          },
          "account": {
            "type": "string",
            "description": ""
          },
          "user_entity_id": {
            "type": "number",
            "description": ""
          }
        },
        "required": [
          "user_id",
          "account",
          "user_entity_id"
        ]
      },
      "OrderAcknowledgementQuestion": {
        "type": "object",
        "properties": {
          "id": {
            "type": "number",
            "description": "the unique internal identifier (primary key) of the row"
          },
          "question": {
            "type": "string",
            "description": "the text of the question to ask"
          },
          "answer_type": {
            "type": "number",
            "description": "uncertain"
          },
          "explanation": {
            "type": "string",
            "description": "an alternative way of phrasing the question or additional details for clarification"
          },
          "additional_acknowldgement": {
            "type": "string",
            "description": ""
          },
          "sort_order": {
            "type": "number",
            "description": "the ordinal position of the question"
          },
          "visible": {
            "type": "boolean",
            "description": "if true, the investor should be shown this question"
          },
          "om_component": {
            "type": "number",
            "description": "if true, this question is a component of the Offering Memorandum exemption, and should be used only in that context"
          },
          "wellknown": {
            "type": "string",
            "description": "the well-known name of a specific question, to allow it be invoked in specific circumstances"
          },
          "is_deleted": {
            "type": "boolean",
            "description": "if true, this row is &quot;logically&quot; deleted. that is, its not to be used any more and is kept for historical/audit purposes only"
          },
          "last_changed_by_id": {
            "type": "number",
            "description": "the id of the user that made the last change or in the case of its initial creation, the user that created it"
          },
          "createtime": {
            "format": "date-time",
            "type": "string",
            "description": "the point in time this row was first created regardless of modifications"
          },
          "updatetime": {
            "format": "date-time",
            "type": "string",
            "description": "the last point in time this row was modified"
          },
          "last_changed_by": {
            "description": "This was created from the details of the foreign key FK_INVESTOR_ACKNOWLEDGEMENTS_LAST_CHANGED_BY_ID_CHANGES and described as: ",
            "allOf": [
              {
                "$ref": "#/components/schemas/AllUser"
              }
            ]
          }
        },
        "required": [
          "id",
          "question",
          "answer_type",
          "explanation",
          "additional_acknowldgement",
          "sort_order",
          "visible",
          "om_component",
          "wellknown",
          "is_deleted",
          "last_changed_by_id",
          "createtime",
          "updatetime",
          "last_changed_by"
        ]
      },
      "InvestorCobranding": {
        "type": "object",
        "properties": {
          "user_id": {
            "type": "number",
            "description": ""
          },
          "primary_cobrander_id": {
            "type": "number",
            "description": ""
          },
          "primary_cobrander_name": {
            "type": "string",
            "description": ""
          },
          "cobrander_ids": {
            "type": "string",
            "description": ""
          }
        },
        "required": [
          "user_id",
          "primary_cobrander_id",
          "primary_cobrander_name",
          "cobrander_ids"
        ]
      },
      "InvestorSocialProfile": {
        "type": "object",
        "properties": {
          "id": {
            "type": "number",
            "description": "the unique internal identifier (primary key) of the row"
          },
          "user_id": {
            "type": "number",
            "description": "the user this is for"
          },
          "name": {
            "type": "string",
            "description": "the name of the project the profile is for"
          },
          "image": {
            "type": "string",
            "description": "a url to an image to use to represent the profile"
          },
          "facebook": {
            "type": "string",
            "description": "a url to the facebook presence for the profile"
          },
          "twitter": {
            "type": "string",
            "description": "a url to the twitter feed for the profile"
          },
          "linkedin": {
            "type": "string",
            "description": "a url to the linked in presence for the profile"
          },
          "status": {
            "type": "number",
            "description": "?"
          },
          "notification": {
            "type": "boolean",
            "description": "for user profiles, if true the user should receive notification"
          },
          "is_deleted": {
            "type": "boolean",
            "description": "if true, this row is &quot;logically&quot; deleted. that is, its not to be used any more and is kept for historical/audit purposes only"
          },
          "last_changed_by_id": {
            "type": "number",
            "description": "the id of the user that made the last change or in the case of its initial creation, the user that created it"
          },
          "createtime": {
            "format": "date-time",
            "type": "string",
            "description": "the point in time this row was first created regardless of modifications"
          },
          "updatetime": {
            "format": "date-time",
            "type": "string",
            "description": "the last point in time this row was modified"
          },
          "all_users_cobranded_to_social_profile": {
            "description": "This was created from the details of the foreign key FK_ALL_USERS_COBRANDED_TO_SOCIAL_PROFILE and described as: ",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AllUser"
            }
          },
          "events_to_issuer": {
            "description": "This was created from the details of the foreign key FK_EVENTS_TO_ISSUER and described as: ",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Event"
            }
          },
          "orders": {
            "description": "This was created from the details of the foreign key FK_INVESTMENT_ORDERS_ISSUER_ID_ORDERS and described as: ",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/InvestmentOrder"
            }
          },
          "intended_trades": {
            "description": "This was created from the details of the foreign key FK_INVESTOR_INTENDED_TRADES_INTENDED_ISSUER_ID_INTENDED_TRADES and described as: ",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/InvestorIntendedTrades"
            }
          },
          "projects": {
            "description": "This was created from the details of the foreign key FK_PROJECTS_ISSUER_ID_PROJECTS and described as: ",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Project"
            }
          },
          "interests": {
            "description": "This was created from the details of the foreign key FK_PROPERTY_INTEREST_INTEREST_BY_ID_INTERESTS and described as: ",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ProjectInterest"
            }
          },
          "investor_interests": {
            "description": "This was created from the details of the foreign key FK_PROPERTY_INTEREST_INTEREST_IN_ID_INVESTOR_INTERESTS and described as: ",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ProjectInterest"
            }
          },
          "user_issuer_associations_to_issuer_id_associated_users": {
            "description": "This was created from the details of the foreign key FK_USER_ISSUER_ASSOCIATIONS_TO_ISSUER_ID_ASSOCIATED_USERS and described as: ",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserIssuerAssociation"
            }
          },
          "followers": {
            "description": "This was created from the details of the foreign key FK_USERS_SOCIAL_LINKUP_LINK_ID_FOLLOWERS and described as: ",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SocialProfileFollowing"
            }
          },
          "following": {
            "description": "This was created from the details of the foreign key FK_USERS_SOCIAL_LINKUP_PROFILE_ID_FOLLOWING and described as: ",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SocialProfileFollowing"
            }
          },
          "posts": {
            "description": "",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserSocialPost"
            }
          },
          "country": {
            "description": "This was created from the details of the foreign key FK_USERS_SOCIALPROFILE_COUNTRY_ID and described as: ",
            "allOf": [
              {
                "$ref": "#/components/schemas/Country"
              }
            ]
          },
          "jurisdiction": {
            "description": "This was created from the details of the foreign key FK_USERS_SOCIALPROFILE_JURISDICTION_ID_PROFILES and described as: ",
            "allOf": [
              {
                "$ref": "#/components/schemas/Province"
              }
            ]
          },
          "last_changed_by": {
            "description": "This was created from the details of the foreign key FK_USERS_SOCIALPROFILE_LAST_CHANGED_BY_ID_CHANGES and described as: ",
            "allOf": [
              {
                "$ref": "#/components/schemas/AllUser"
              }
            ]
          },
          "project": {
            "description": "This was created from the details of the foreign key FK_USERS_SOCIALPROFILE_PROJECT_ID_PROFILES and described as: ",
            "allOf": [
              {
                "$ref": "#/components/schemas/Project"
              }
            ]
          },
          "province": {
            "description": "This was created from the details of the foreign key FK_USERS_SOCIALPROFILE_PROVINCE_ID and described as: ",
            "allOf": [
              {
                "$ref": "#/components/schemas/Province"
              }
            ]
          },
          "statute": {
            "description": "This was created from the details of the foreign key FK_USERS_SOCIALPROFILE_STATUTE_ID_TO_PROVINCES and described as: ",
            "allOf": [
              {
                "$ref": "#/components/schemas/Province"
              }
            ]
          },
          "user": {
            "description": "This was created from the details of the foreign key FK_USERS_SOCIALPROFILE_USER_ID_PROFILES and described as: ",
            "allOf": [
              {
                "$ref": "#/components/schemas/AllUser"
              }
            ]
          },
          "web_hooks_to_issuer": {
            "description": "This was created from the details of the foreign key FK_WEB_HOOKS_TO_ISSUER and described as: ",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/WebHook"
            }
          },
          "profile_type": {
            "type": "number",
            "description": "?"
          },
          "statute_id": {
            "type": "number",
            "description": "the id of the sub-national region that the project must comply to for compliance"
          },
          "country_id": {
            "type": "number",
            "description": "the id of the country the project is in"
          },
          "province_id": {
            "type": "number",
            "description": "the id of the province the project is in"
          },
          "city": {
            "type": "string",
            "description": "the city the project is in"
          },
          "address": {
            "type": "string",
            "description": "the legal address of the project"
          },
          "zip": {
            "type": "string",
            "description": "the mailing identifier for the address of the project"
          },
          "email": {
            "type": "string",
            "description": "the email address to use to contact the project with"
          },
          "phone": {
            "type": "string",
            "description": "the telephone number to use to reach out to contact someone at the project"
          },
          "biography": {
            "type": "string",
            "description": "a sentence or paragraph about the history of the person/project"
          },
          "career": {
            "type": "string",
            "description": "a narrative about the persons (not projects) career so far"
          },
          "education": {
            "type": "string",
            "description": "a narrative about the persons (not projects) educational background"
          },
          "preferences": {
            "type": "string",
            "description": "a free form narrative of what the person prefers to work with"
          }
        },
        "required": [
          "id",
          "user_id",
          "name",
          "image",
          "facebook",
          "twitter",
          "linkedin",
          "status",
          "notification",
          "is_deleted",
          "last_changed_by_id",
          "createtime",
          "updatetime",
          "all_users_cobranded_to_social_profile",
          "events_to_issuer",
          "orders",
          "intended_trades",
          "projects",
          "interests",
          "investor_interests",
          "user_issuer_associations_to_issuer_id_associated_users",
          "followers",
          "following",
          "posts",
          "country",
          "jurisdiction",
          "last_changed_by",
          "project",
          "province",
          "statute",
          "user",
          "web_hooks_to_issuer",
          "profile_type",
          "statute_id",
          "country_id",
          "province_id",
          "city",
          "address",
          "zip",
          "email",
          "phone",
          "biography",
          "career",
          "education",
          "preferences"
        ]
      },
      "IssuerAdmin": {
        "type": "object",
        "properties": {
          "id": {
            "type": "number",
            "description": "the unique internal identifier (primary key) of the row"
          },
          "user_type": {
            "type": "string",
            "description": "the category of user this is (i&#x3D;investor, a&#x3D;admin, c&#x3D;issuer admin)"
          },
          "first_name": {
            "type": "string",
            "description": "the first name of the person who uses the account"
          },
          "last_name": {
            "type": "string",
            "description": "the last name of the person who uses the account"
          },
          "avatar_image_file_name": {
            "type": "string",
            "description": "the name of the file that holds the avatars picture. this is the resouce relative, not site relative."
          },
          "email": {
            "type": "string",
            "description": "the email address that identifies the account"
          },
          "last_login": {
            "format": "date-time",
            "type": "string",
            "description": "the last point in time the user logged in"
          },
          "last_ip": {
            "type": "string",
            "description": "the last ip that they used to access the site from"
          },
          "identity_provider": {
            "type": "string",
            "description": "the name of the service that verifies the identity of the user (according to azure b2c))"
          },
          "user_principle_name": {
            "type": "string",
            "description": "the identifier for the user in the b2c system"
          },
          "preferences_as_json": {
            "type": "string",
            "description": "json format values that are used by applications as preferences"
          },
          "is_deleted": {
            "type": "boolean",
            "description": "if true, this row is &quot;logically&quot; deleted. that is, its not to be used any more and is kept for historical/audit purposes only"
          },
          "last_changed_by_id": {
            "type": "number",
            "description": "the id of the user that made the last change or in the case of its initial creation, the user that created it"
          },
          "createtime": {
            "format": "date-time",
            "type": "string",
            "description": "the point in time this row was first created regardless of modifications"
          },
          "updatetime": {
            "format": "date-time",
            "type": "string",
            "description": "the last point in time this row was modified"
          },
          "cobranded_client_of": {
            "description": "This was created from the details of the foreign key FK_ALL_USERS_COBRANDED_TO_SOCIAL_PROFILE and described as: ",
            "allOf": [
              {
                "$ref": "#/components/schemas/UserSocialProfile"
              }
            ]
          },
          "country": {
            "description": "This was created from the details of the foreign key FK_ALL_USERS_TO_COUNTRIES and described as: ",
            "allOf": [
              {
                "$ref": "#/components/schemas/Country"
              }
            ]
          },
          "last_changed_by": {
            "description": "This was created from the details of the foreign key FK_ALL_USERS_LAST_CHANGED_BY_ID_CHANGES and described as: ",
            "allOf": [
              {
                "$ref": "#/components/schemas/AllUser"
              }
            ]
          },
          "changes": {
            "description": "",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/WebHook"
            }
          },
          "mailing_country": {
            "description": "This was created from the details of the foreign key FK_ALL_USERS_TO_MCOUNTRIES and described as: ",
            "allOf": [
              {
                "$ref": "#/components/schemas/Country"
              }
            ]
          },
          "mailing_province": {
            "description": "This was created from the details of the foreign key FK_ALL_USERS_TO_MPROVINCES and described as: ",
            "allOf": [
              {
                "$ref": "#/components/schemas/Province"
              }
            ]
          },
          "province": {
            "description": "This was created from the details of the foreign key FK_ALL_USERS_TO_PROVINCE and described as: ",
            "allOf": [
              {
                "$ref": "#/components/schemas/Province"
              }
            ]
          },
          "background_processs_lastuser_last_changed_by_id_changes": {
            "description": "This was created from the details of the foreign key FK_BACKGROUND_PROCESSS_LASTUSER_LAST_CHANGED_BY_ID_CHANGES and described as: ",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BackgroundProcess"
            }
          },
          "events_to_user": {
            "description": "This was created from the details of the foreign key FK_EVENTS_TO_USER and described as: ",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Event"
            }
          },
          "ffba_association_to_user": {
            "description": "This was created from the details of the foreign key FK_FFBA_ASSOCIATION_TO_USER and described as: ",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FfbaAssociation"
            }
          },
          "contacts": {
            "description": "This was created from the details of the foreign key FK_IMPORTED_CONTACTS_USER_ID_CONTACTS and described as: ",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ImportedContact"
            }
          },
          "investment_orders_joint_subscriber_to_user": {
            "description": "This was created from the details of the foreign key FK_INVESTMENT_ORDERS_JOINT_SUBSCRIBER_TO_USER and described as: ",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/InvestmentOrder"
            }
          },
          "orders": {
            "description": "This was created from the details of the foreign key FK_INVESTMENT_ORDERS_USER_ID_ORDERS and described as: ",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/InvestmentOrder"
            }
          },
          "transactions": {
            "description": "This was created from the details of the foreign key FK_INVESTMENT_TRANSACTION_USER_ID_TRANSACTIONS and described as: ",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/InvestmentTransaction"
            }
          },
          "watches": {
            "description": "This was created from the details of the foreign key FK_INVESTMENT_WATCHLIST_USER_ID_WATCHES and described as: ",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/InvestmentWatchlist"
            }
          },
          "investor_ack_orders_user_order_acknowledgements": {
            "description": "This was created from the details of the foreign key FK_INVESTOR_ACK_ORDERS_USER_ORDER_ACKNOWLEDGEMENTS and described as: ",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OrderAcknowledgement"
            }
          },
          "investor_earnings_user_d": {
            "description": "This was created from the details of the foreign key FK_INVESTOR_EARNINGS_USER_D and described as: ",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/InvestorEarning"
            }
          },
          "intended_trades": {
            "description": "This was created from the details of the foreign key FK_INVESTOR_INTENDED_TRADES_USER_ID_INTENDED_TRADES and described as: ",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/InvestorIntendedTrades"
            }
          },
          "sent_emails": {
            "description": "This was created from the details of the foreign key FK_MAILS_FROM_ID_SENT_EMAILS and described as: ",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Mail"
            }
          },
          "received_emails": {
            "description": "This was created from the details of the foreign key FK_MAILS_TO_ID_RECEIVED_EMAILS and described as: ",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Mail"
            }
          },
          "accessible_modules": {
            "description": "This was created from the details of the foreign key FK_MODULE_ACCESS_USER_ID_ACCESSIBLE_MODULES and described as: ",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ModuleAccess"
            }
          },
          "tax_reports": {
            "description": "This was created from the details of the foreign key FK_PROJECT_TAX_REPORTS_USER_ID_TAX_REPORTS and described as: ",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ProjectTaxReport"
            }
          },
          "owner_user": {
            "description": "This was created from the details of the foreign key FK_SUPPORT_ENGINEERS_USER_ID_OWNER_USER and described as: ",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SupportEngineer"
            }
          },
          "user_issuer_associations_to_user_id_issuer_associations": {
            "description": "This was created from the details of the foreign key FK_USER_ISSUER_ASSOCIATIONS_TO_USER_ID_ISSUER_ASSOCIATIONS and described as: ",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserIssuerAssociation"
            }
          },
          "user_relationship_to_user_1": {
            "description": "This was created from the details of the foreign key FK_USER_RELATIONSHIP_TO_USER_1 and described as: ",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserRelationship"
            }
          },
          "user_relationship_to_user_2": {
            "description": "This was created from the details of the foreign key FK_USER_RELATIONSHIP_TO_USER_2 and described as: ",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserRelationship"
            }
          },
          "users_banking_details_to_joint_user": {
            "description": "This was created from the details of the foreign key FK_USERS_BANKING_DETAILS_TO_JOINT_USER and described as: ",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserBankingDetails"
            }
          },
          "users_banking_details_to_user": {
            "description": "This was created from the details of the foreign key FK_USERS_BANKING_DETAILS_TO_USER and described as: ",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserBankingDetails"
            }
          },
          "financial_kyc": {
            "description": "This was created from the details of the foreign key FK_USERS_EMPLOYMENT_USER_ID_FINANCIAL_KYC and described as: ",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserFinancialKyc"
            }
          },
          "entities": {
            "description": "This was created from the details of the foreign key FK_USERS_ENTITY_USER_ID_ENTITIES and described as: ",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserEntity"
            }
          },
          "invitations": {
            "description": "This was created from the details of the foreign key FK_USERS_INVITEE_USER_ID_INVITATIONS and described as: ",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserInvitation"
            }
          },
          "pdfs": {
            "description": "This was created from the details of the foreign key FK_USERS_PDF_USER_ID_PDFS and described as: ",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserPdf"
            }
          },
          "answers": {
            "description": "This was created from the details of the foreign key FK_USERS_QUESTIONARY_USER_ID_ANSWERS and described as: ",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserAnswer"
            }
          },
          "requests": {
            "description": "This was created from the details of the foreign key FK_USERS_REQUEST_USER_ID_REQUESTS and described as: ",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserRequest"
            }
          },
          "users_socialprofile_last_changed_by_id_changes": {
            "description": "This was created from the details of the foreign key FK_USERS_SOCIALPROFILE_LAST_CHANGED_BY_ID_CHANGES and described as: ",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserSocialProfile"
            }
          },
          "users_socialprofile_user_id_profiles": {
            "description": "This was created from the details of the foreign key FK_USERS_SOCIALPROFILE_USER_ID_PROFILES and described as: ",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserSocialProfile"
            }
          },
          "subscriptions": {
            "description": "This was created from the details of the foreign key FK_USERS_SUBSCRIBE_USER_ID_SUBSCRIPTIONS and described as: ",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserSubscription"
            }
          },
          "web_hooks_to_user": {
            "description": "This was created from the details of the foreign key FK_WEB_HOOKS_TO_USER and described as: ",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/WebHook"
            }
          },
          "token": {
            "type": "string",
            "description": "the token used to identify the current session"
          },
          "token_update": {
            "format": "date-time",
            "type": "string",
            "description": "the last time the session token was updated"
          },
          "cobranded_client_of_id": {
            "type": "number",
            "description": "the sponsor that essentially owns this investor"
          },
          "status": {
            "type": "number",
            "description": "the avilability of the account for use"
          }
        },
        "required": [
          "id",
          "user_type",
          "first_name",
          "last_name",
          "avatar_image_file_name",
          "email",
          "last_login",
          "last_ip",
          "identity_provider",
          "user_principle_name",
          "preferences_as_json",
          "is_deleted",
          "last_changed_by_id",
          "createtime",
          "updatetime",
          "cobranded_client_of",
          "country",
          "last_changed_by",
          "changes",
          "mailing_country",
          "mailing_province",
          "province",
          "background_processs_lastuser_last_changed_by_id_changes",
          "events_to_user",
          "ffba_association_to_user",
          "contacts",
          "investment_orders_joint_subscriber_to_user",
          "orders",
          "transactions",
          "watches",
          "investor_ack_orders_user_order_acknowledgements",
          "investor_earnings_user_d",
          "intended_trades",
          "sent_emails",
          "received_emails",
          "accessible_modules",
          "tax_reports",
          "owner_user",
          "user_issuer_associations_to_user_id_issuer_associations",
          "user_relationship_to_user_1",
          "user_relationship_to_user_2",
          "users_banking_details_to_joint_user",
          "users_banking_details_to_user",
          "financial_kyc",
          "entities",
          "invitations",
          "pdfs",
          "answers",
          "requests",
          "users_socialprofile_last_changed_by_id_changes",
          "users_socialprofile_user_id_profiles",
          "subscriptions",
          "web_hooks_to_user",
          "token",
          "token_update",
          "cobranded_client_of_id",
          "status"
        ]
      },
      "Menu": {
        "type": "object",
        "properties": {
          "id": {
            "type": "number",
            "description": "the unique internal identifier (primary key) of the row"
          },
          "page_id": {
            "type": "number",
            "description": "the id of the page to show the menu on"
          },
          "name": {
            "type": "string",
            "description": "the text to show as the item"
          },
          "name_seo": {
            "type": "string",
            "description": "the text to use for seo for the menu item"
          },
          "image": {
            "type": "string",
            "description": "a url to an image resource to show alongside the menu"
          },
          "content": {
            "type": "string",
            "description": "the primary descriptive text for the item (fly over)"
          },
          "content2": {
            "type": "string",
            "description": "the secondary descriptive text for the item (what for???)"
          },
          "sort_order": {
            "type": "number",
            "description": "the ordinal position of this item in the page or parent menu"
          },
          "is_deleted": {
            "type": "boolean",
            "description": "if true, this row is &quot;logically&quot; deleted. that is, its not to be used any more and is kept for historical/audit purposes only"
          },
          "last_changed_by_id": {
            "type": "number",
            "description": "the id of the user that made the last change or in the case of its initial creation, the user that created it"
          },
          "createtime": {
            "format": "date-time",
            "type": "string",
            "description": "the point in time this row was first created regardless of modifications"
          },
          "updatetime": {
            "format": "date-time",
            "type": "string",
            "description": "the last point in time this row was modified"
          },
          "last_changed_by": {
            "description": "This was created from the details of the foreign key FK_MENU_LAST_CHANGED_BY_ID_CHANGES and described as: ",
            "allOf": [
              {
                "$ref": "#/components/schemas/AllUser"
              }
            ]
          }
        },
        "required": [
          "id",
          "page_id",
          "name",
          "name_seo",
          "image",
          "content",
          "content2",
          "sort_order",
          "is_deleted",
          "last_changed_by_id",
          "createtime",
          "updatetime",
          "last_changed_by"
        ]
      },
      "NotableInvestorProfile": {
        "type": "object",
        "properties": {
          "id": {
            "type": "number",
            "description": "the unique internal identifier (primary key) of the row"
          },
          "user_id": {
            "type": "number",
            "description": "the user this is for"
          },
          "name": {
            "type": "string",
            "description": "the name of the project the profile is for"
          },
          "image": {
            "type": "string",
            "description": "a url to an image to use to represent the profile"
          },
          "facebook": {
            "type": "string",
            "description": "a url to the facebook presence for the profile"
          },
          "twitter": {
            "type": "string",
            "description": "a url to the twitter feed for the profile"
          },
          "linkedin": {
            "type": "string",
            "description": "a url to the linked in presence for the profile"
          },
          "status": {
            "type": "number",
            "description": "?"
          },
          "notification": {
            "type": "boolean",
            "description": "for user profiles, if true the user should receive notification"
          },
          "is_deleted": {
            "type": "boolean",
            "description": "if true, this row is &quot;logically&quot; deleted. that is, its not to be used any more and is kept for historical/audit purposes only"
          },
          "last_changed_by_id": {
            "type": "number",
            "description": "the id of the user that made the last change or in the case of its initial creation, the user that created it"
          },
          "createtime": {
            "format": "date-time",
            "type": "string",
            "description": "the point in time this row was first created regardless of modifications"
          },
          "updatetime": {
            "format": "date-time",
            "type": "string",
            "description": "the last point in time this row was modified"
          },
          "all_users_cobranded_to_social_profile": {
            "description": "This was created from the details of the foreign key FK_ALL_USERS_COBRANDED_TO_SOCIAL_PROFILE and described as: ",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AllUser"
            }
          },
          "events_to_issuer": {
            "description": "This was created from the details of the foreign key FK_EVENTS_TO_ISSUER and described as: ",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Event"
            }
          },
          "orders": {
            "description": "This was created from the details of the foreign key FK_INVESTMENT_ORDERS_ISSUER_ID_ORDERS and described as: ",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/InvestmentOrder"
            }
          },
          "intended_trades": {
            "description": "This was created from the details of the foreign key FK_INVESTOR_INTENDED_TRADES_INTENDED_ISSUER_ID_INTENDED_TRADES and described as: ",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/InvestorIntendedTrades"
            }
          },
          "projects": {
            "description": "This was created from the details of the foreign key FK_PROJECTS_ISSUER_ID_PROJECTS and described as: ",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Project"
            }
          },
          "interests": {
            "description": "This was created from the details of the foreign key FK_PROPERTY_INTEREST_INTEREST_BY_ID_INTERESTS and described as: ",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ProjectInterest"
            }
          },
          "investor_interests": {
            "description": "This was created from the details of the foreign key FK_PROPERTY_INTEREST_INTEREST_IN_ID_INVESTOR_INTERESTS and described as: ",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ProjectInterest"
            }
          },
          "user_issuer_associations_to_issuer_id_associated_users": {
            "description": "This was created from the details of the foreign key FK_USER_ISSUER_ASSOCIATIONS_TO_ISSUER_ID_ASSOCIATED_USERS and described as: ",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserIssuerAssociation"
            }
          },
          "followers": {
            "description": "This was created from the details of the foreign key FK_USERS_SOCIAL_LINKUP_LINK_ID_FOLLOWERS and described as: ",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SocialProfileFollowing"
            }
          },
          "following": {
            "description": "This was created from the details of the foreign key FK_USERS_SOCIAL_LINKUP_PROFILE_ID_FOLLOWING and described as: ",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SocialProfileFollowing"
            }
          },
          "posts": {
            "description": "",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserSocialPost"
            }
          },
          "country": {
            "description": "This was created from the details of the foreign key FK_USERS_SOCIALPROFILE_COUNTRY_ID and described as: ",
            "allOf": [
              {
                "$ref": "#/components/schemas/Country"
              }
            ]
          },
          "jurisdiction": {
            "description": "This was created from the details of the foreign key FK_USERS_SOCIALPROFILE_JURISDICTION_ID_PROFILES and described as: ",
            "allOf": [
              {
                "$ref": "#/components/schemas/Province"
              }
            ]
          },
          "last_changed_by": {
            "description": "This was created from the details of the foreign key FK_USERS_SOCIALPROFILE_LAST_CHANGED_BY_ID_CHANGES and described as: ",
            "allOf": [
              {
                "$ref": "#/components/schemas/AllUser"
              }
            ]
          },
          "project": {
            "description": "This was created from the details of the foreign key FK_USERS_SOCIALPROFILE_PROJECT_ID_PROFILES and described as: ",
            "allOf": [
              {
                "$ref": "#/components/schemas/Project"
              }
            ]
          },
          "province": {
            "description": "This was created from the details of the foreign key FK_USERS_SOCIALPROFILE_PROVINCE_ID and described as: ",
            "allOf": [
              {
                "$ref": "#/components/schemas/Province"
              }
            ]
          },
          "statute": {
            "description": "This was created from the details of the foreign key FK_USERS_SOCIALPROFILE_STATUTE_ID_TO_PROVINCES and described as: ",
            "allOf": [
              {
                "$ref": "#/components/schemas/Province"
              }
            ]
          },
          "user": {
            "description": "This was created from the details of the foreign key FK_USERS_SOCIALPROFILE_USER_ID_PROFILES and described as: ",
            "allOf": [
              {
                "$ref": "#/components/schemas/AllUser"
              }
            ]
          },
          "web_hooks_to_issuer": {
            "description": "This was created from the details of the foreign key FK_WEB_HOOKS_TO_ISSUER and described as: ",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/WebHook"
            }
          },
          "profile_type": {
            "type": "number",
            "description": "?"
          },
          "statute_id": {
            "type": "number",
            "description": "the id of the sub-national region that the project must comply to for compliance"
          },
          "country_id": {
            "type": "number",
            "description": "the id of the country the project is in"
          },
          "province_id": {
            "type": "number",
            "description": "the id of the province the project is in"
          },
          "city": {
            "type": "string",
            "description": "the city the project is in"
          },
          "address": {
            "type": "string",
            "description": "the legal address of the project"
          },
          "zip": {
            "type": "string",
            "description": "the mailing identifier for the address of the project"
          },
          "email": {
            "type": "string",
            "description": "the email address to use to contact the project with"
          },
          "phone": {
            "type": "string",
            "description": "the telephone number to use to reach out to contact someone at the project"
          },
          "biography": {
            "type": "string",
            "description": "a sentence or paragraph about the history of the person/project"
          },
          "career": {
            "type": "string",
            "description": "a narrative about the persons (not projects) career so far"
          },
          "education": {
            "type": "string",
            "description": "a narrative about the persons (not projects) educational background"
          },
          "preferences": {
            "type": "string",
            "description": "a free form narrative of what the person prefers to work with"
          },
          "investment_status": {
            "type": "number",
            "description": "if true (1) they are actively investing"
          }
        },
        "required": [
          "id",
          "user_id",
          "name",
          "image",
          "facebook",
          "twitter",
          "linkedin",
          "status",
          "notification",
          "is_deleted",
          "last_changed_by_id",
          "createtime",
          "updatetime",
          "all_users_cobranded_to_social_profile",
          "events_to_issuer",
          "orders",
          "intended_trades",
          "projects",
          "interests",
          "investor_interests",
          "user_issuer_associations_to_issuer_id_associated_users",
          "followers",
          "following",
          "posts",
          "country",
          "jurisdiction",
          "last_changed_by",
          "project",
          "province",
          "statute",
          "user",
          "web_hooks_to_issuer",
          "profile_type",
          "statute_id",
          "country_id",
          "province_id",
          "city",
          "address",
          "zip",
          "email",
          "phone",
          "biography",
          "career",
          "education",
          "preferences",
          "investment_status"
        ]
      },
      "ProfileBackground": {
        "type": "object",
        "properties": {
          "id": {
            "type": "number",
            "description": "the unique internal identifier (primary key) of the row"
          },
          "image": {
            "type": "string",
            "description": ""
          },
          "sort_order": {
            "type": "number",
            "description": ""
          },
          "is_deleted": {
            "type": "boolean",
            "description": "if true, this row is &quot;logically&quot; deleted. that is, its not to be used any more and is kept for historical/audit purposes only"
          },
          "last_changed_by_id": {
            "type": "number",
            "description": "the id of the user that made the last change or in the case of its initial creation, the user that created it"
          },
          "createtime": {
            "format": "date-time",
            "type": "string",
            "description": "the point in time this row was first created regardless of modifications"
          },
          "updatetime": {
            "format": "date-time",
            "type": "string",
            "description": "the last point in time this row was modified"
          },
          "last_changed_by": {
            "description": "This was created from the details of the foreign key FK_PROFILE_BACKGROUND_LAST_CHANGED_BY_ID_CHANGES and described as: ",
            "allOf": [
              {
                "$ref": "#/components/schemas/AllUser"
              }
            ]
          }
        },
        "required": [
          "id",
          "image",
          "sort_order",
          "is_deleted",
          "last_changed_by_id",
          "createtime",
          "updatetime",
          "last_changed_by"
        ]
      },
      "PropertySocialProfile": {
        "type": "object",
        "properties": {
          "id": {
            "type": "number",
            "description": "the unique internal identifier (primary key) of the row"
          },
          "user_id": {
            "type": "number",
            "description": "the user this is for"
          },
          "name": {
            "type": "string",
            "description": "the name of the project the profile is for"
          },
          "image": {
            "type": "string",
            "description": "a url to an image to use to represent the profile"
          },
          "facebook": {
            "type": "string",
            "description": "a url to the facebook presence for the profile"
          },
          "twitter": {
            "type": "string",
            "description": "a url to the twitter feed for the profile"
          },
          "linkedin": {
            "type": "string",
            "description": "a url to the linked in presence for the profile"
          },
          "status": {
            "type": "number",
            "description": "?"
          },
          "notification": {
            "type": "boolean",
            "description": "for user profiles, if true the user should receive notification"
          },
          "is_deleted": {
            "type": "boolean",
            "description": "if true, this row is &quot;logically&quot; deleted. that is, its not to be used any more and is kept for historical/audit purposes only"
          },
          "last_changed_by_id": {
            "type": "number",
            "description": "the id of the user that made the last change or in the case of its initial creation, the user that created it"
          },
          "createtime": {
            "format": "date-time",
            "type": "string",
            "description": "the point in time this row was first created regardless of modifications"
          },
          "updatetime": {
            "format": "date-time",
            "type": "string",
            "description": "the last point in time this row was modified"
          },
          "all_users_cobranded_to_social_profile": {
            "description": "This was created from the details of the foreign key FK_ALL_USERS_COBRANDED_TO_SOCIAL_PROFILE and described as: ",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AllUser"
            }
          },
          "events_to_issuer": {
            "description": "This was created from the details of the foreign key FK_EVENTS_TO_ISSUER and described as: ",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Event"
            }
          },
          "orders": {
            "description": "This was created from the details of the foreign key FK_INVESTMENT_ORDERS_ISSUER_ID_ORDERS and described as: ",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/InvestmentOrder"
            }
          },
          "intended_trades": {
            "description": "This was created from the details of the foreign key FK_INVESTOR_INTENDED_TRADES_INTENDED_ISSUER_ID_INTENDED_TRADES and described as: ",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/InvestorIntendedTrades"
            }
          },
          "projects": {
            "description": "This was created from the details of the foreign key FK_PROJECTS_ISSUER_ID_PROJECTS and described as: ",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Project"
            }
          },
          "interests": {
            "description": "This was created from the details of the foreign key FK_PROPERTY_INTEREST_INTEREST_BY_ID_INTERESTS and described as: ",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ProjectInterest"
            }
          },
          "investor_interests": {
            "description": "This was created from the details of the foreign key FK_PROPERTY_INTEREST_INTEREST_IN_ID_INVESTOR_INTERESTS and described as: ",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ProjectInterest"
            }
          },
          "user_issuer_associations_to_issuer_id_associated_users": {
            "description": "This was created from the details of the foreign key FK_USER_ISSUER_ASSOCIATIONS_TO_ISSUER_ID_ASSOCIATED_USERS and described as: ",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserIssuerAssociation"
            }
          },
          "followers": {
            "description": "This was created from the details of the foreign key FK_USERS_SOCIAL_LINKUP_LINK_ID_FOLLOWERS and described as: ",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SocialProfileFollowing"
            }
          },
          "following": {
            "description": "This was created from the details of the foreign key FK_USERS_SOCIAL_LINKUP_PROFILE_ID_FOLLOWING and described as: ",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SocialProfileFollowing"
            }
          },
          "posts": {
            "description": "",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserSocialPost"
            }
          },
          "country": {
            "description": "This was created from the details of the foreign key FK_USERS_SOCIALPROFILE_COUNTRY_ID and described as: ",
            "allOf": [
              {
                "$ref": "#/components/schemas/Country"
              }
            ]
          },
          "jurisdiction": {
            "description": "This was created from the details of the foreign key FK_USERS_SOCIALPROFILE_JURISDICTION_ID_PROFILES and described as: ",
            "allOf": [
              {
                "$ref": "#/components/schemas/Province"
              }
            ]
          },
          "last_changed_by": {
            "description": "This was created from the details of the foreign key FK_USERS_SOCIALPROFILE_LAST_CHANGED_BY_ID_CHANGES and described as: ",
            "allOf": [
              {
                "$ref": "#/components/schemas/AllUser"
              }
            ]
          },
          "project": {
            "description": "This was created from the details of the foreign key FK_USERS_SOCIALPROFILE_PROJECT_ID_PROFILES and described as: ",
            "allOf": [
              {
                "$ref": "#/components/schemas/Project"
              }
            ]
          },
          "province": {
            "description": "This was created from the details of the foreign key FK_USERS_SOCIALPROFILE_PROVINCE_ID and described as: ",
            "allOf": [
              {
                "$ref": "#/components/schemas/Province"
              }
            ]
          },
          "statute": {
            "description": "This was created from the details of the foreign key FK_USERS_SOCIALPROFILE_STATUTE_ID_TO_PROVINCES and described as: ",
            "allOf": [
              {
                "$ref": "#/components/schemas/Province"
              }
            ]
          },
          "user": {
            "description": "This was created from the details of the foreign key FK_USERS_SOCIALPROFILE_USER_ID_PROFILES and described as: ",
            "allOf": [
              {
                "$ref": "#/components/schemas/AllUser"
              }
            ]
          },
          "web_hooks_to_issuer": {
            "description": "This was created from the details of the foreign key FK_WEB_HOOKS_TO_ISSUER and described as: ",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/WebHook"
            }
          },
          "project_id": {
            "type": "number",
            "description": "if the profile is for a project, the id of that project"
          },
          "developer_number": {
            "type": "number",
            "description": ""
          },
          "issuer_code": {
            "type": "string",
            "description": "the short identifier of an issuer"
          },
          "profile_type": {
            "type": "number",
            "description": "?"
          },
          "legal_name": {
            "type": "string",
            "description": "the legal name of the project"
          },
          "categories": {
            "type": "string",
            "description": "a caret (^) separated list of category tags for the invesmtent. the tags are currently unstructured"
          },
          "self_category": {
            "type": "string",
            "description": "for a user profile, the tags of projects that person is interested in"
          },
          "bg_image": {
            "type": "string",
            "description": ""
          },
          "signup_image": {
            "type": "string",
            "description": ""
          },
          "signup_guide_image": {
            "type": "string",
            "description": ""
          },
          "network_logo": {
            "type": "string",
            "description": "a url to an image to use for the project when it is displayed &quot;in our network&quot;"
          },
          "network_background": {
            "type": "string",
            "description": "a url to an image to use for the background of the project when it is displayed &quot;in our network&quot;"
          },
          "biography": {
            "type": "string",
            "description": "a sentence or paragraph about the history of the person/project"
          },
          "career": {
            "type": "string",
            "description": "a narrative about the persons (not projects) career so far"
          },
          "education": {
            "type": "string",
            "description": "a narrative about the persons (not projects) educational background"
          },
          "preferences": {
            "type": "string",
            "description": "a free form narrative of what the person prefers to work with"
          },
          "person_ids": {
            "type": "string",
            "description": "internal storage for the list of person ids"
          },
          "investment_status": {
            "type": "number",
            "description": "if true (1) they are actively investing"
          },
          "background_image": {
            "type": "string",
            "description": "a url to an image to show in the background for the project"
          }
        },
        "required": [
          "id",
          "user_id",
          "name",
          "image",
          "facebook",
          "twitter",
          "linkedin",
          "status",
          "notification",
          "is_deleted",
          "last_changed_by_id",
          "createtime",
          "updatetime",
          "all_users_cobranded_to_social_profile",
          "events_to_issuer",
          "orders",
          "intended_trades",
          "projects",
          "interests",
          "investor_interests",
          "user_issuer_associations_to_issuer_id_associated_users",
          "followers",
          "following",
          "posts",
          "country",
          "jurisdiction",
          "last_changed_by",
          "project",
          "province",
          "statute",
          "user",
          "web_hooks_to_issuer",
          "project_id",
          "developer_number",
          "issuer_code",
          "profile_type",
          "legal_name",
          "categories",
          "self_category",
          "bg_image",
          "signup_image",
          "signup_guide_image",
          "network_logo",
          "network_background",
          "biography",
          "career",
          "education",
          "preferences",
          "person_ids",
          "investment_status",
          "background_image"
        ]
      },
      "Setting": {
        "type": "object",
        "properties": {
          "id": {
            "type": "number",
            "description": "the unique internal identifier (primary key) of the row"
          },
          "company": {
            "type": "string",
            "description": ""
          },
          "address": {
            "type": "string",
            "description": ""
          },
          "address2": {
            "type": "string",
            "description": ""
          },
          "city": {
            "type": "string",
            "description": ""
          },
          "zip": {
            "type": "string",
            "description": ""
          },
          "province": {
            "type": "string",
            "description": ""
          },
          "country": {
            "type": "string",
            "description": ""
          },
          "site_name": {
            "type": "string",
            "description": ""
          },
          "site_domain": {
            "type": "string",
            "description": ""
          },
          "phone": {
            "type": "string",
            "description": ""
          },
          "phone2": {
            "type": "string",
            "description": ""
          },
          "fax": {
            "type": "string",
            "description": ""
          },
          "info_email": {
            "type": "string",
            "description": ""
          },
          "petoes": {
            "type": "string",
            "description": ""
          },
          "title": {
            "type": "string",
            "description": ""
          },
          "keywords": {
            "type": "string",
            "description": ""
          },
          "description": {
            "type": "string",
            "description": ""
          },
          "facebook": {
            "type": "string",
            "description": ""
          },
          "twitter": {
            "type": "string",
            "description": ""
          },
          "google": {
            "type": "string",
            "description": ""
          },
          "pinterest": {
            "type": "string",
            "description": ""
          },
          "linkedin": {
            "type": "string",
            "description": ""
          },
          "instagram": {
            "type": "string",
            "description": ""
          },
          "tumblr": {
            "type": "string",
            "description": ""
          },
          "youtube": {
            "type": "string",
            "description": ""
          },
          "blog": {
            "type": "string",
            "description": ""
          },
          "relationship_disclosure": {
            "type": "string",
            "description": ""
          },
          "google_analytics": {
            "type": "string",
            "description": ""
          },
          "google_analytics_body": {
            "type": "string",
            "description": ""
          },
          "dev_company": {
            "type": "string",
            "description": ""
          },
          "dev_address": {
            "type": "string",
            "description": ""
          },
          "dev_address2": {
            "type": "string",
            "description": ""
          },
          "dev_city": {
            "type": "string",
            "description": ""
          },
          "dev_zip": {
            "type": "string",
            "description": ""
          },
          "dev_province": {
            "type": "string",
            "description": ""
          },
          "dev_country": {
            "type": "string",
            "description": ""
          },
          "dev_phone": {
            "type": "string",
            "description": ""
          },
          "dev_fax": {
            "type": "string",
            "description": ""
          },
          "dev_email": {
            "type": "string",
            "description": ""
          },
          "dev_web": {
            "type": "string",
            "description": ""
          },
          "timezone": {
            "type": "string",
            "description": ""
          },
          "use_openssl": {
            "type": "boolean",
            "description": ""
          },
          "last_changed_by_id": {
            "type": "number",
            "description": "the id of the user that made the last change or in the case of its initial creation, the user that created it"
          },
          "updatetime": {
            "format": "date-time",
            "type": "string",
            "description": "the last point in time this row was modified"
          },
          "is_deleted": {
            "type": "boolean",
            "description": "if true, this row is &quot;logically&quot; deleted. that is, its not to be used any more and is kept for historical/audit purposes only"
          },
          "createtime": {
            "format": "date-time",
            "type": "string",
            "description": "the point in time this row was first created regardless of modifications"
          },
          "last_changed_by": {
            "description": "This was created from the details of the foreign key FK_SETTINGS_LAST_CHANGED_BY_ID_CHANGES and described as: ",
            "allOf": [
              {
                "$ref": "#/components/schemas/AllUser"
              }
            ]
          }
        },
        "required": [
          "id",
          "company",
          "address",
          "address2",
          "city",
          "zip",
          "province",
          "country",
          "site_name",
          "site_domain",
          "phone",
          "phone2",
          "fax",
          "info_email",
          "petoes",
          "title",
          "keywords",
          "description",
          "facebook",
          "twitter",
          "google",
          "pinterest",
          "linkedin",
          "instagram",
          "tumblr",
          "youtube",
          "blog",
          "relationship_disclosure",
          "google_analytics",
          "google_analytics_body",
          "dev_company",
          "dev_address",
          "dev_address2",
          "dev_city",
          "dev_zip",
          "dev_province",
          "dev_country",
          "dev_phone",
          "dev_fax",
          "dev_email",
          "dev_web",
          "timezone",
          "use_openssl",
          "last_changed_by_id",
          "updatetime",
          "is_deleted",
          "createtime",
          "last_changed_by"
        ]
      },
      "SponsorSocialProfile": {
        "type": "object",
        "properties": {
          "id": {
            "type": "number",
            "description": "the unique internal identifier (primary key) of the row"
          },
          "user_id": {
            "type": "number",
            "description": "the user this is for"
          },
          "name": {
            "type": "string",
            "description": "the name of the project the profile is for"
          },
          "image": {
            "type": "string",
            "description": "a url to an image to use to represent the profile"
          },
          "facebook": {
            "type": "string",
            "description": "a url to the facebook presence for the profile"
          },
          "twitter": {
            "type": "string",
            "description": "a url to the twitter feed for the profile"
          },
          "linkedin": {
            "type": "string",
            "description": "a url to the linked in presence for the profile"
          },
          "status": {
            "type": "number",
            "description": "?"
          },
          "notification": {
            "type": "boolean",
            "description": "for user profiles, if true the user should receive notification"
          },
          "is_deleted": {
            "type": "boolean",
            "description": "if true, this row is &quot;logically&quot; deleted. that is, its not to be used any more and is kept for historical/audit purposes only"
          },
          "last_changed_by_id": {
            "type": "number",
            "description": "the id of the user that made the last change or in the case of its initial creation, the user that created it"
          },
          "createtime": {
            "format": "date-time",
            "type": "string",
            "description": "the point in time this row was first created regardless of modifications"
          },
          "updatetime": {
            "format": "date-time",
            "type": "string",
            "description": "the last point in time this row was modified"
          },
          "all_users_cobranded_to_social_profile": {
            "description": "This was created from the details of the foreign key FK_ALL_USERS_COBRANDED_TO_SOCIAL_PROFILE and described as: ",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AllUser"
            }
          },
          "events_to_issuer": {
            "description": "This was created from the details of the foreign key FK_EVENTS_TO_ISSUER and described as: ",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Event"
            }
          },
          "orders": {
            "description": "This was created from the details of the foreign key FK_INVESTMENT_ORDERS_ISSUER_ID_ORDERS and described as: ",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/InvestmentOrder"
            }
          },
          "intended_trades": {
            "description": "This was created from the details of the foreign key FK_INVESTOR_INTENDED_TRADES_INTENDED_ISSUER_ID_INTENDED_TRADES and described as: ",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/InvestorIntendedTrades"
            }
          },
          "projects": {
            "description": "This was created from the details of the foreign key FK_PROJECTS_ISSUER_ID_PROJECTS and described as: ",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Project"
            }
          },
          "interests": {
            "description": "This was created from the details of the foreign key FK_PROPERTY_INTEREST_INTEREST_BY_ID_INTERESTS and described as: ",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ProjectInterest"
            }
          },
          "investor_interests": {
            "description": "This was created from the details of the foreign key FK_PROPERTY_INTEREST_INTEREST_IN_ID_INVESTOR_INTERESTS and described as: ",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ProjectInterest"
            }
          },
          "user_issuer_associations_to_issuer_id_associated_users": {
            "description": "This was created from the details of the foreign key FK_USER_ISSUER_ASSOCIATIONS_TO_ISSUER_ID_ASSOCIATED_USERS and described as: ",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserIssuerAssociation"
            }
          },
          "followers": {
            "description": "This was created from the details of the foreign key FK_USERS_SOCIAL_LINKUP_LINK_ID_FOLLOWERS and described as: ",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SocialProfileFollowing"
            }
          },
          "following": {
            "description": "This was created from the details of the foreign key FK_USERS_SOCIAL_LINKUP_PROFILE_ID_FOLLOWING and described as: ",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SocialProfileFollowing"
            }
          },
          "posts": {
            "description": "",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserSocialPost"
            }
          },
          "country": {
            "description": "This was created from the details of the foreign key FK_USERS_SOCIALPROFILE_COUNTRY_ID and described as: ",
            "allOf": [
              {
                "$ref": "#/components/schemas/Country"
              }
            ]
          },
          "jurisdiction": {
            "description": "This was created from the details of the foreign key FK_USERS_SOCIALPROFILE_JURISDICTION_ID_PROFILES and described as: ",
            "allOf": [
              {
                "$ref": "#/components/schemas/Province"
              }
            ]
          },
          "last_changed_by": {
            "description": "This was created from the details of the foreign key FK_USERS_SOCIALPROFILE_LAST_CHANGED_BY_ID_CHANGES and described as: ",
            "allOf": [
              {
                "$ref": "#/components/schemas/AllUser"
              }
            ]
          },
          "project": {
            "description": "This was created from the details of the foreign key FK_USERS_SOCIALPROFILE_PROJECT_ID_PROFILES and described as: ",
            "allOf": [
              {
                "$ref": "#/components/schemas/Project"
              }
            ]
          },
          "province": {
            "description": "This was created from the details of the foreign key FK_USERS_SOCIALPROFILE_PROVINCE_ID and described as: ",
            "allOf": [
              {
                "$ref": "#/components/schemas/Province"
              }
            ]
          },
          "statute": {
            "description": "This was created from the details of the foreign key FK_USERS_SOCIALPROFILE_STATUTE_ID_TO_PROVINCES and described as: ",
            "allOf": [
              {
                "$ref": "#/components/schemas/Province"
              }
            ]
          },
          "user": {
            "description": "This was created from the details of the foreign key FK_USERS_SOCIALPROFILE_USER_ID_PROFILES and described as: ",
            "allOf": [
              {
                "$ref": "#/components/schemas/AllUser"
              }
            ]
          },
          "web_hooks_to_issuer": {
            "description": "This was created from the details of the foreign key FK_WEB_HOOKS_TO_ISSUER and described as: ",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/WebHook"
            }
          },
          "project_id": {
            "type": "number",
            "description": "if the profile is for a project, the id of that project"
          },
          "developer_number": {
            "type": "number",
            "description": ""
          },
          "issuer_code": {
            "type": "string",
            "description": "the short identifier of an issuer"
          },
          "profile_type": {
            "type": "number",
            "description": "?"
          },
          "legal_name": {
            "type": "string",
            "description": "the legal name of the project"
          },
          "jurisdiction_id": {
            "type": "number",
            "description": "the id of the sub-national region that legal proceeding are bound to"
          },
          "statute_id": {
            "type": "number",
            "description": "the id of the sub-national region that the project must comply to for compliance"
          },
          "country_id": {
            "type": "number",
            "description": "the id of the country the project is in"
          },
          "province_id": {
            "type": "number",
            "description": "the id of the province the project is in"
          },
          "city": {
            "type": "string",
            "description": "the city the project is in"
          },
          "address": {
            "type": "string",
            "description": "the legal address of the project"
          },
          "zip": {
            "type": "string",
            "description": "the mailing identifier for the address of the project"
          },
          "email": {
            "type": "string",
            "description": "the email address to use to contact the project with"
          },
          "phone": {
            "type": "string",
            "description": "the telephone number to use to reach out to contact someone at the project"
          },
          "total_built": {
            "type": "string",
            "description": "the quantity of projects that have been built so far"
          },
          "value_built": {
            "type": "string",
            "description": "the total value of properties built by the originator of the project so far"
          },
          "categories": {
            "type": "string",
            "description": "a caret (^) separated list of category tags for the invesmtent. the tags are currently unstructured"
          },
          "self_category": {
            "type": "string",
            "description": "for a user profile, the tags of projects that person is interested in"
          },
          "bg_image": {
            "type": "string",
            "description": ""
          },
          "signup_image": {
            "type": "string",
            "description": ""
          },
          "signup_guide_image": {
            "type": "string",
            "description": ""
          },
          "network_logo": {
            "type": "string",
            "description": "a url to an image to use for the project when it is displayed &quot;in our network&quot;"
          },
          "network_background": {
            "type": "string",
            "description": "a url to an image to use for the background of the project when it is displayed &quot;in our network&quot;"
          },
          "rep_first_name": {
            "type": "string",
            "description": ""
          },
          "rep_last_name": {
            "type": "string",
            "description": ""
          },
          "rep_email": {
            "type": "string",
            "description": ""
          },
          "rep_phone": {
            "type": "string",
            "description": ""
          },
          "signup_greeting": {
            "type": "string",
            "description": ""
          },
          "signup_paragraph": {
            "type": "string",
            "description": ""
          },
          "signup_link": {
            "type": "string",
            "description": ""
          },
          "signup_logo": {
            "type": "string",
            "description": ""
          },
          "investment_step_cc_email": {
            "type": "string",
            "description": ""
          },
          "investment_status": {
            "type": "number",
            "description": "if true (1) they are actively investing"
          },
          "show_referral_text": {
            "type": "boolean",
            "description": "if true, a message alerting the user to a financial incentive should be shown on the referral page"
          },
          "show_referral_dialog": {
            "type": "boolean",
            "description": "if true (1), users signing up cobranded to this profile will have the referall dialog presented to them at the end of the proces"
          },
          "signup_splash_logo": {
            "type": "string",
            "description": ""
          },
          "background_image": {
            "type": "string",
            "description": "a url to an image to show in the background for the project"
          },
          "referral_bonus": {
            "type": "string",
            "description": ""
          },
          "referral_disclaimer": {
            "type": "string",
            "description": ""
          },
          "referral_expiry": {
            "format": "date-time",
            "type": "string",
            "description": ""
          },
          "referral_link": {
            "type": "string",
            "description": ""
          }
        },
        "required": [
          "id",
          "user_id",
          "name",
          "image",
          "facebook",
          "twitter",
          "linkedin",
          "status",
          "notification",
          "is_deleted",
          "last_changed_by_id",
          "createtime",
          "updatetime",
          "all_users_cobranded_to_social_profile",
          "events_to_issuer",
          "orders",
          "intended_trades",
          "projects",
          "interests",
          "investor_interests",
          "user_issuer_associations_to_issuer_id_associated_users",
          "followers",
          "following",
          "posts",
          "country",
          "jurisdiction",
          "last_changed_by",
          "project",
          "province",
          "statute",
          "user",
          "web_hooks_to_issuer",
          "project_id",
          "developer_number",
          "issuer_code",
          "profile_type",
          "legal_name",
          "jurisdiction_id",
          "statute_id",
          "country_id",
          "province_id",
          "city",
          "address",
          "zip",
          "email",
          "phone",
          "total_built",
          "value_built",
          "categories",
          "self_category",
          "bg_image",
          "signup_image",
          "signup_guide_image",
          "network_logo",
          "network_background",
          "rep_first_name",
          "rep_last_name",
          "rep_email",
          "rep_phone",
          "signup_greeting",
          "signup_paragraph",
          "signup_link",
          "signup_logo",
          "investment_step_cc_email",
          "investment_status",
          "show_referral_text",
          "show_referral_dialog",
          "signup_splash_logo",
          "background_image",
          "referral_bonus",
          "referral_disclaimer",
          "referral_expiry",
          "referral_link"
        ]
      },
      "UserBasic": {
        "type": "object",
        "properties": {
          "id": {
            "type": "number",
            "description": "the unique internal identifier (primary key) of the row"
          },
          "user_type": {
            "type": "string",
            "description": "the category of user this is (i&#x3D;investor, a&#x3D;admin, c&#x3D;issuer admin)"
          },
          "first_name": {
            "type": "string",
            "description": "the first name of the person who uses the account"
          },
          "last_initial": {
            "type": "string",
            "description": "the initial of the persons last name"
          },
          "cobranded_client_of_id": {
            "type": "number",
            "description": ""
          },
          "avatar_image_file_name": {
            "type": "string",
            "description": "the name of the file that holds the avatars picture. this is the resouce relative, not site relative."
          },
          "signup_date": {
            "format": "date-time",
            "type": "string",
            "description": "the point in time the user first signed up"
          },
          "is_deleted": {
            "type": "boolean",
            "description": "if true, this row is &quot;logically&quot; deleted. that is, its not to be used any more and is kept for historical/audit purposes only"
          },
          "last_changed_by_id": {
            "type": "number",
            "description": "the id of the user that made the last change or in the case of its initial creation, the user that created it"
          },
          "updatetime": {
            "format": "date-time",
            "type": "string",
            "description": "the last point in time this row was modified"
          },
          "createtime": {
            "format": "date-time",
            "type": "string",
            "description": "the point in time this row was first created regardless of modifications"
          }
        },
        "required": [
          "id",
          "user_type",
          "first_name",
          "last_initial",
          "cobranded_client_of_id",
          "avatar_image_file_name",
          "signup_date",
          "is_deleted",
          "last_changed_by_id",
          "updatetime",
          "createtime"
        ]
      },
      "UserSignupEvent": {
        "type": "object",
        "properties": {
          "user_id": {
            "type": "number",
            "description": ""
          },
          "basic_info": {
            "format": "date-time",
            "type": "string",
            "description": ""
          },
          "kyc_done": {
            "format": "date-time",
            "type": "string",
            "description": ""
          },
          "retrn_pref": {
            "format": "date-time",
            "type": "string",
            "description": ""
          },
          "time_hrzn": {
            "format": "date-time",
            "type": "string",
            "description": ""
          },
          "risk_toler": {
            "format": "date-time",
            "type": "string",
            "description": ""
          }
        },
        "required": [
          "user_id",
          "basic_info",
          "kyc_done",
          "retrn_pref",
          "time_hrzn",
          "risk_toler"
        ]
      },
      "UserBeneficiary": {
        "type": "object",
        "properties": {
          "id": {
            "type": "number",
            "description": "the unique internal identifier (primary key) of the row"
          },
          "type": {
            "type": "number",
            "description": "the type of entitye this is. for trusts its 2"
          },
          "user_id": {
            "type": "number",
            "description": "the user this is for"
          },
          "client_number": {
            "type": "string",
            "description": "the fs id for the corporation"
          },
          "name": {
            "type": "string",
            "description": "the legal name of the corporation"
          },
          "address": {
            "type": "string",
            "description": "the street addresss of where the corporation is located"
          },
          "address2": {
            "type": "string",
            "description": "the second line of the street address for where the corporation is located"
          },
          "apt_number": {
            "type": "string",
            "description": ""
          },
          "country_id": {
            "type": "number",
            "description": "the id of the country where the company is located"
          },
          "province_id": {
            "type": "number",
            "description": "the id of the province for where the company is located"
          },
          "zip": {
            "type": "string",
            "description": "the postal identifier for where the company is located"
          },
          "city": {
            "type": "string",
            "description": "the city for where the company is located"
          },
          "pdf_file": {
            "type": "string",
            "description": "a url to an additional document if required to clarify disbursements"
          },
          "status": {
            "type": "number",
            "description": "the usability state of the trust"
          },
          "is_deleted": {
            "type": "boolean",
            "description": "if true, this row is &quot;logically&quot; deleted. that is, its not to be used any more and is kept for historical/audit purposes only"
          },
          "createtime": {
            "format": "date-time",
            "type": "string",
            "description": "the point in time this row was first created regardless of modifications"
          },
          "last_changed_by_id": {
            "type": "number",
            "description": "the id of the user that made the last change or in the case of its initial creation, the user that created it"
          },
          "updatetime": {
            "format": "date-time",
            "type": "string",
            "description": "the last point in time this row was modified"
          },
          "ffba_association_to_user_entity": {
            "description": "This was created from the details of the foreign key FK_FFBA_ASSOCIATION_TO_USER_ENTITY and described as: ",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FfbaAssociation"
            }
          },
          "earnings": {
            "description": "This was created from the details of the foreign key FK_INVESTOR_EARNINGS_USER_ENTITY_ID_EARNINGS and described as: ",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/InvestorEarning"
            }
          },
          "users_banking_details_to_user_entity": {
            "description": "This was created from the details of the foreign key FK_USERS_BANKING_DETAILS_TO_USER_ENTITY and described as: ",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserBankingDetails"
            }
          },
          "company_province": {
            "description": "This was created from the details of the foreign key FK_USERS_ENTITY_COMPANY_PROVINCE_ID_INVESTOR_COMPANIES and described as: ",
            "allOf": [
              {
                "$ref": "#/components/schemas/Province"
              }
            ]
          },
          "country": {
            "description": "This was created from the details of the foreign key FK_USERS_ENTITY_COUNTRY_ID_INVESTOR_COMPANIES and described as: ",
            "allOf": [
              {
                "$ref": "#/components/schemas/Country"
              }
            ]
          },
          "last_changed_by": {
            "description": "This was created from the details of the foreign key FK_USERS_ENTITY_LAST_CHANGED_BY_ID_CHANGES and described as: ",
            "allOf": [
              {
                "$ref": "#/components/schemas/AllUser"
              }
            ]
          },
          "province": {
            "description": "This was created from the details of the foreign key FK_USERS_ENTITY_PROVINCE_ID_INVESTOR_COMPANIES and described as: ",
            "allOf": [
              {
                "$ref": "#/components/schemas/Province"
              }
            ]
          },
          "user": {
            "description": "This was created from the details of the foreign key FK_USERS_ENTITY_USER_ID_ENTITIES and described as: ",
            "allOf": [
              {
                "$ref": "#/components/schemas/AllUser"
              }
            ]
          },
          "users_questionary_entity_answers": {
            "description": "This was created from the details of the foreign key FK_USERS_QUESTIONARY_ENTITY_ANSWERS and described as: ",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserAnswer"
            }
          },
          "beneficiary_first_name": {
            "type": "string",
            "description": "The first name of the beneficiary"
          },
          "beneficiary_last_name": {
            "type": "string",
            "description": "The last name of the beneficiary"
          },
          "beneficiary_relationship": {
            "type": "string",
            "description": "the relationship the beneficiary has with the entities founder"
          },
          "beneficiary_share": {
            "type": "string",
            "description": "the percentage portion this beneficiary has of the entity"
          },
          "comments": {
            "type": "string",
            "description": "general purpose comments"
          }
        },
        "required": [
          "id",
          "type",
          "user_id",
          "client_number",
          "name",
          "address",
          "address2",
          "apt_number",
          "country_id",
          "province_id",
          "zip",
          "city",
          "pdf_file",
          "status",
          "is_deleted",
          "createtime",
          "last_changed_by_id",
          "updatetime",
          "ffba_association_to_user_entity",
          "earnings",
          "users_banking_details_to_user_entity",
          "company_province",
          "country",
          "last_changed_by",
          "province",
          "user",
          "users_questionary_entity_answers",
          "beneficiary_first_name",
          "beneficiary_last_name",
          "beneficiary_relationship",
          "beneficiary_share",
          "comments"
        ]
      },
      "UserCorporation": {
        "type": "object",
        "properties": {
          "id": {
            "type": "number",
            "description": "the unique internal identifier (primary key) of the row"
          },
          "type": {
            "type": "number",
            "description": "the type of entitye this is. for trusts its 2"
          },
          "user_id": {
            "type": "number",
            "description": "the user this is for"
          },
          "client_number": {
            "type": "string",
            "description": "the fs id for the corporation"
          },
          "name": {
            "type": "string",
            "description": "the legal name of the corporation"
          },
          "address": {
            "type": "string",
            "description": "the street addresss of where the corporation is located"
          },
          "address2": {
            "type": "string",
            "description": "the second line of the street address for where the corporation is located"
          },
          "apt_number": {
            "type": "string",
            "description": ""
          },
          "country_id": {
            "type": "number",
            "description": "the id of the country where the company is located"
          },
          "province_id": {
            "type": "number",
            "description": "the id of the province for where the company is located"
          },
          "zip": {
            "type": "string",
            "description": "the postal identifier for where the company is located"
          },
          "city": {
            "type": "string",
            "description": "the city for where the company is located"
          },
          "pdf_file": {
            "type": "string",
            "description": "a url to an additional document if required to clarify disbursements"
          },
          "status": {
            "type": "number",
            "description": "the usability state of the trust"
          },
          "is_deleted": {
            "type": "boolean",
            "description": "if true, this row is &quot;logically&quot; deleted. that is, its not to be used any more and is kept for historical/audit purposes only"
          },
          "createtime": {
            "format": "date-time",
            "type": "string",
            "description": "the point in time this row was first created regardless of modifications"
          },
          "last_changed_by_id": {
            "type": "number",
            "description": "the id of the user that made the last change or in the case of its initial creation, the user that created it"
          },
          "updatetime": {
            "format": "date-time",
            "type": "string",
            "description": "the last point in time this row was modified"
          },
          "ffba_association_to_user_entity": {
            "description": "This was created from the details of the foreign key FK_FFBA_ASSOCIATION_TO_USER_ENTITY and described as: ",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FfbaAssociation"
            }
          },
          "earnings": {
            "description": "This was created from the details of the foreign key FK_INVESTOR_EARNINGS_USER_ENTITY_ID_EARNINGS and described as: ",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/InvestorEarning"
            }
          },
          "users_banking_details_to_user_entity": {
            "description": "This was created from the details of the foreign key FK_USERS_BANKING_DETAILS_TO_USER_ENTITY and described as: ",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserBankingDetails"
            }
          },
          "company_province": {
            "description": "This was created from the details of the foreign key FK_USERS_ENTITY_COMPANY_PROVINCE_ID_INVESTOR_COMPANIES and described as: ",
            "allOf": [
              {
                "$ref": "#/components/schemas/Province"
              }
            ]
          },
          "country": {
            "description": "This was created from the details of the foreign key FK_USERS_ENTITY_COUNTRY_ID_INVESTOR_COMPANIES and described as: ",
            "allOf": [
              {
                "$ref": "#/components/schemas/Country"
              }
            ]
          },
          "last_changed_by": {
            "description": "This was created from the details of the foreign key FK_USERS_ENTITY_LAST_CHANGED_BY_ID_CHANGES and described as: ",
            "allOf": [
              {
                "$ref": "#/components/schemas/AllUser"
              }
            ]
          },
          "province": {
            "description": "This was created from the details of the foreign key FK_USERS_ENTITY_PROVINCE_ID_INVESTOR_COMPANIES and described as: ",
            "allOf": [
              {
                "$ref": "#/components/schemas/Province"
              }
            ]
          },
          "user": {
            "description": "This was created from the details of the foreign key FK_USERS_ENTITY_USER_ID_ENTITIES and described as: ",
            "allOf": [
              {
                "$ref": "#/components/schemas/AllUser"
              }
            ]
          },
          "users_questionary_entity_answers": {
            "description": "This was created from the details of the foreign key FK_USERS_QUESTIONARY_ENTITY_ANSWERS and described as: ",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserAnswer"
            }
          },
          "reg_no": {
            "type": "string",
            "description": "the number the company is identified by according to the registration authority where it is domiciled"
          },
          "reg_domicile": {
            "type": "string",
            "description": "the name of the are where the company is domiciled"
          },
          "company_province_id": {
            "type": "number",
            "description": "the id of the province that the company is in"
          },
          "business_nature": {
            "type": "string",
            "description": "a short description of the type of business the company is engaged in"
          },
          "registration_date": {
            "type": "string",
            "description": "the point in time the trust was registered"
          },
          "email": {
            "type": "string",
            "description": "an email address to use to contact individuals at the company"
          },
          "phone": {
            "type": "string",
            "description": "a telephone number to use to contact people at the company"
          },
          "phone_ext": {
            "type": "string",
            "description": "an extenstion to the telephone number to use to contact people at the company"
          },
          "director_first_name": {
            "type": "string",
            "description": "^separated list of the first names of the directoros of the company"
          },
          "director_last_name": {
            "type": "string",
            "description": "^separated list of the last names of the directors of the company"
          },
          "director_address": {
            "type": "string",
            "description": "^separated list of the addresses of the directors"
          },
          "director_canadian": {
            "type": "string",
            "description": "^separated list of whether the director is a canadian"
          },
          "shareholder_first_name": {
            "type": "string",
            "description": "^separated list of the shareholders first names"
          },
          "shareholder_last_name": {
            "type": "string",
            "description": "^separated list of the shareholders last names"
          },
          "shareholder_address": {
            "type": "string",
            "description": "^separated list of the shareholders addresses"
          },
          "shareholder_canadian": {
            "type": "string",
            "description": "^separated list of whether the shareholder is canadian"
          },
          "signing_officer_first_name": {
            "type": "string",
            "description": "^separated list of the signing officers first names"
          },
          "signing_officer_last_name": {
            "type": "string",
            "description": "^separated list of the signing officers last names"
          },
          "signing_officer_title": {
            "type": "string",
            "description": "^separated list of the signing officers titles"
          },
          "shareholder": {
            "type": "string",
            "description": "if true, the account holder is a shareholder"
          }
        },
        "required": [
          "id",
          "type",
          "user_id",
          "client_number",
          "name",
          "address",
          "address2",
          "apt_number",
          "country_id",
          "province_id",
          "zip",
          "city",
          "pdf_file",
          "status",
          "is_deleted",
          "createtime",
          "last_changed_by_id",
          "updatetime",
          "ffba_association_to_user_entity",
          "earnings",
          "users_banking_details_to_user_entity",
          "company_province",
          "country",
          "last_changed_by",
          "province",
          "user",
          "users_questionary_entity_answers",
          "reg_no",
          "reg_domicile",
          "company_province_id",
          "business_nature",
          "registration_date",
          "email",
          "phone",
          "phone_ext",
          "director_first_name",
          "director_last_name",
          "director_address",
          "director_canadian",
          "shareholder_first_name",
          "shareholder_last_name",
          "shareholder_address",
          "shareholder_canadian",
          "signing_officer_first_name",
          "signing_officer_last_name",
          "signing_officer_title",
          "shareholder"
        ]
      },
      "UserTrust": {
        "type": "object",
        "properties": {
          "id": {
            "type": "number",
            "description": "the unique internal identifier (primary key) of the row"
          },
          "type": {
            "type": "number",
            "description": "the type of entitye this is. for trusts its 2"
          },
          "user_id": {
            "type": "number",
            "description": "the user this is for"
          },
          "client_number": {
            "type": "string",
            "description": "the fs id for the corporation"
          },
          "name": {
            "type": "string",
            "description": "the legal name of the corporation"
          },
          "address": {
            "type": "string",
            "description": "the street addresss of where the corporation is located"
          },
          "address2": {
            "type": "string",
            "description": "the second line of the street address for where the corporation is located"
          },
          "apt_number": {
            "type": "string",
            "description": ""
          },
          "country_id": {
            "type": "number",
            "description": "the id of the country where the company is located"
          },
          "province_id": {
            "type": "number",
            "description": "the id of the province for where the company is located"
          },
          "zip": {
            "type": "string",
            "description": "the postal identifier for where the company is located"
          },
          "city": {
            "type": "string",
            "description": "the city for where the company is located"
          },
          "pdf_file": {
            "type": "string",
            "description": "a url to an additional document if required to clarify disbursements"
          },
          "status": {
            "type": "number",
            "description": "the usability state of the trust"
          },
          "is_deleted": {
            "type": "boolean",
            "description": "if true, this row is &quot;logically&quot; deleted. that is, its not to be used any more and is kept for historical/audit purposes only"
          },
          "createtime": {
            "format": "date-time",
            "type": "string",
            "description": "the point in time this row was first created regardless of modifications"
          },
          "last_changed_by_id": {
            "type": "number",
            "description": "the id of the user that made the last change or in the case of its initial creation, the user that created it"
          },
          "updatetime": {
            "format": "date-time",
            "type": "string",
            "description": "the last point in time this row was modified"
          },
          "ffba_association_to_user_entity": {
            "description": "This was created from the details of the foreign key FK_FFBA_ASSOCIATION_TO_USER_ENTITY and described as: ",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FfbaAssociation"
            }
          },
          "earnings": {
            "description": "This was created from the details of the foreign key FK_INVESTOR_EARNINGS_USER_ENTITY_ID_EARNINGS and described as: ",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/InvestorEarning"
            }
          },
          "users_banking_details_to_user_entity": {
            "description": "This was created from the details of the foreign key FK_USERS_BANKING_DETAILS_TO_USER_ENTITY and described as: ",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserBankingDetails"
            }
          },
          "company_province": {
            "description": "This was created from the details of the foreign key FK_USERS_ENTITY_COMPANY_PROVINCE_ID_INVESTOR_COMPANIES and described as: ",
            "allOf": [
              {
                "$ref": "#/components/schemas/Province"
              }
            ]
          },
          "country": {
            "description": "This was created from the details of the foreign key FK_USERS_ENTITY_COUNTRY_ID_INVESTOR_COMPANIES and described as: ",
            "allOf": [
              {
                "$ref": "#/components/schemas/Country"
              }
            ]
          },
          "last_changed_by": {
            "description": "This was created from the details of the foreign key FK_USERS_ENTITY_LAST_CHANGED_BY_ID_CHANGES and described as: ",
            "allOf": [
              {
                "$ref": "#/components/schemas/AllUser"
              }
            ]
          },
          "province": {
            "description": "This was created from the details of the foreign key FK_USERS_ENTITY_PROVINCE_ID_INVESTOR_COMPANIES and described as: ",
            "allOf": [
              {
                "$ref": "#/components/schemas/Province"
              }
            ]
          },
          "user": {
            "description": "This was created from the details of the foreign key FK_USERS_ENTITY_USER_ID_ENTITIES and described as: ",
            "allOf": [
              {
                "$ref": "#/components/schemas/AllUser"
              }
            ]
          },
          "users_questionary_entity_answers": {
            "description": "This was created from the details of the foreign key FK_USERS_QUESTIONARY_ENTITY_ANSWERS and described as: ",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserAnswer"
            }
          },
          "registration_date": {
            "type": "string",
            "description": "the point in time the trust was registered"
          },
          "email": {
            "type": "string",
            "description": "an email address to use to contact individuals at the company"
          },
          "phone": {
            "type": "string",
            "description": "a telephone number to use to contact people at the company"
          },
          "phone_ext": {
            "type": "string",
            "description": "an extenstion to the telephone number to use to contact people at the company"
          },
          "trustee_first_name": {
            "type": "string",
            "description": "^caret separated list of the first names of the trustees"
          },
          "trustee_last_name": {
            "type": "string",
            "description": "caret separated list of the last names of the trustees"
          },
          "trustee_title": {
            "type": "string",
            "description": "caret separated list of the titles of the trustees"
          }
        },
        "required": [
          "id",
          "type",
          "user_id",
          "client_number",
          "name",
          "address",
          "address2",
          "apt_number",
          "country_id",
          "province_id",
          "zip",
          "city",
          "pdf_file",
          "status",
          "is_deleted",
          "createtime",
          "last_changed_by_id",
          "updatetime",
          "ffba_association_to_user_entity",
          "earnings",
          "users_banking_details_to_user_entity",
          "company_province",
          "country",
          "last_changed_by",
          "province",
          "user",
          "users_questionary_entity_answers",
          "registration_date",
          "email",
          "phone",
          "phone_ext",
          "trustee_first_name",
          "trustee_last_name",
          "trustee_title"
        ]
      },
      "ComputedProjectTotalIncome": {
        "type": "object",
        "properties": {
          "project_id": {
            "type": "number",
            "description": ""
          },
          "balance": {
            "type": "number",
            "description": ""
          }
        },
        "required": [
          "project_id",
          "balance"
        ]
      },
      "ComputedProjectIncome": {
        "type": "object",
        "properties": {
          "id": {
            "type": "number",
            "description": ""
          },
          "project_id": {
            "type": "number",
            "description": ""
          },
          "activity": {
            "type": "string",
            "description": ""
          },
          "activity_desc": {
            "type": "string",
            "description": ""
          },
          "order_id": {
            "type": "number",
            "description": ""
          },
          "transaction_date": {
            "format": "date-time",
            "type": "string",
            "description": ""
          },
          "amount": {
            "type": "number",
            "description": ""
          }
        },
        "required": [
          "id",
          "project_id",
          "activity",
          "activity_desc",
          "order_id",
          "transaction_date",
          "amount"
        ]
      },
      "ComputedAccountTotalIncome": {
        "type": "object",
        "properties": {
          "user_id": {
            "type": "number",
            "description": ""
          },
          "project_id": {
            "type": "number",
            "description": ""
          },
          "account": {
            "type": "string",
            "description": ""
          },
          "user_entity_id": {
            "type": "number",
            "description": ""
          },
          "entity_type": {
            "type": "number",
            "description": ""
          },
          "balance": {
            "type": "number",
            "description": ""
          }
        },
        "required": [
          "user_id",
          "project_id",
          "account",
          "user_entity_id",
          "entity_type",
          "balance"
        ]
      },
      "ComputedAccountIncome": {
        "type": "object",
        "properties": {
          "id": {
            "type": "number",
            "description": ""
          },
          "user_id": {
            "type": "number",
            "description": ""
          },
          "project_id": {
            "type": "number",
            "description": ""
          },
          "account": {
            "type": "string",
            "description": ""
          },
          "user_entity_id": {
            "type": "number",
            "description": ""
          },
          "entity_type": {
            "type": "number",
            "description": ""
          },
          "activity": {
            "type": "string",
            "description": ""
          },
          "activity_desc": {
            "type": "string",
            "description": ""
          },
          "order_id": {
            "type": "number",
            "description": ""
          },
          "transaction_date": {
            "format": "date-time",
            "type": "string",
            "description": ""
          },
          "amount": {
            "type": "number",
            "description": ""
          }
        },
        "required": [
          "id",
          "user_id",
          "project_id",
          "account",
          "user_entity_id",
          "entity_type",
          "activity",
          "activity_desc",
          "order_id",
          "transaction_date",
          "amount"
        ]
      }
    }
  },
  "paths": {
    "/HubspotContact/checkInvestors": {
      "post": {
        "operationId": "HubspotContactController_checkInvestors",
        "summary": "Cross check all cms investors with hubspot contacts",
        "parameters": [],
        "responses": {
          "200": {
            "description": "The instances where the two are not properly connected"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/HubspotContact/syncInvestor/{id}": {
      "post": {
        "operationId": "HubspotContactController_syncInvestor",
        "summary": "Synchronize a single cms investor with a corresponding hubspot contact",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "The id of the investor to sync",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The set of errors that were encountered during the synchronization process"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/Investor/{id}/allNonDeletedOrders": {
      "get": {
        "operationId": "InvestorApi_getAllNonDeletedOrders",
        "summary": "Get all non-deleted orders for a specific investor",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "The id of the investor to get all non-deleted orders for",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "All orders for the given investor that are not deleted",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/InvestmentOrder"
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/Investor/{id}/oldestNonDeletedOrderLastYear": {
      "get": {
        "operationId": "InvestorApi_getOldestNonDeletedOrderLastYear",
        "summary": "get the oldest non-deleted order in the last year for a given investor",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "the id of the investor to get the oldest non-deleted order in the last year for",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "the oldest non-deleted order in the last year for the given investor",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InvestmentOrder"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/Investor/{id}/totalAmountInvestedInLastYear": {
      "get": {
        "operationId": "InvestorApi_getTotalAmountInvestedInLastYear",
        "summary": "get the total amount of all orders in the last year for a given investor",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "the id of the investor to get the total amount of all orders in the last year for",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "the total amount of all orders in the last year for the given investor",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Number"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/Investor/{id}/annualInvestmentLimits": {
      "get": {
        "operationId": "InvestorApi_getAnnualInvestmentLimits",
        "summary": "Get the annual investment limits for the given investor",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "The id of the investor to get the annual investment limits for",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "the annual investment limits for the given investor, or -1 if they have none",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Number"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/Investor": {
      "get": {
        "operationId": "InvestorApi_findAllByFilter",
        "summary": "Find all instances of Investor that match the given filter. If none are found, an empty result is returned",
        "parameters": [
          {
            "name": "filter",
            "required": false,
            "in": "query",
            "description": "the odata like filter expression use to match which instances are returned",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "expand",
            "required": false,
            "in": "query",
            "description": "a comma separated list of property path's that specfiy which additional objects will be filled in the object (deep load). If nothing is specified only the object itself will be loaded, not of its relations will be included",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orderBy",
            "required": false,
            "in": "query",
            "description": "a comma separated list of order by directives used to determine the order in which the objects are returned. Each directive is a single property name optionally followed by desc if descending is required. For example [first_name, last_name desc]",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "if the results are paged (pageSize is specified), this is the page number to return. The first page is 1",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "pageSize",
            "required": false,
            "in": "query",
            "description": "if specified, the results are paged and this is the size of each of those pages",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "All instances of Investor that match the filter",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Investor"
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "post": {
        "operationId": "InvestorApi_create",
        "summary": "Creates new instances of Investor based on the values passed in. If the id is filled in, it will fail to create the new instance, otherwise it returns the the newly created objects",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Investor"
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "The instances of Investor that have been created",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Investor"
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "put": {
        "operationId": "InvestorApi_update",
        "summary": "Update the values for the instances of Investor that are provided",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Investor"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The ids of the instances of Investor that have been updated",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "number"
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/Investor/{id}": {
      "get": {
        "operationId": "InvestorApi_findOneById",
        "summary": "Find a single instance of Investor with the given id. If none are found, an empty result is returned",
        "parameters": [
          {
            "name": "expand",
            "required": false,
            "in": "query",
            "description": "a comma separated list of property path's that specfiy which additional objects will be filled in the object (deep load). If nothing is specified only the object itself will be loaded, not of its relations will be included",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "The id of the instance to retrieve",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Get a single instance of Investor with the specified id",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Investor"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "delete": {
        "operationId": "InvestorApi_remove",
        "summary": "Remove the single instance of Investor with the specified id",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "The id of the instance to remove",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The instance of Investor has been removed"
          },
          "403": {
            "description": "Forbidden."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/UserSocialProfile": {
      "get": {
        "operationId": "UserSocialProfileApi_findAllByFilter",
        "summary": "Find all instances of UserSocialProfile that match the given filter. If none are found, an empty result is returned",
        "parameters": [
          {
            "name": "filter",
            "required": false,
            "in": "query",
            "description": "the odata like filter expression use to match which instances are returned",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "expand",
            "required": false,
            "in": "query",
            "description": "a comma separated list of property path's that specfiy which additional objects will be filled in the object (deep load). If nothing is specified only the object itself will be loaded, not of its relations will be included",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orderBy",
            "required": false,
            "in": "query",
            "description": "a comma separated list of order by directives used to determine the order in which the objects are returned. Each directive is a single property name optionally followed by desc if descending is required. For example [first_name, last_name desc]",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "if the results are paged (pageSize is specified), this is the page number to return. The first page is 1",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "pageSize",
            "required": false,
            "in": "query",
            "description": "if specified, the results are paged and this is the size of each of those pages",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "All instances of UserSocialProfile that match the filter",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UserSocialProfile"
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "post": {
        "operationId": "UserSocialProfileApi_create",
        "summary": "Creates new instances of UserSocialProfile based on the values passed in. If the id is filled in, it will fail to create the new instance, otherwise it returns the the newly created objects",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/UserSocialProfile"
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "The instances of UserSocialProfile that have been created",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UserSocialProfile"
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "put": {
        "operationId": "UserSocialProfileApi_update",
        "summary": "Update the values for the instances of UserSocialProfile that are provided",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/UserSocialProfile"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The ids of the instances of UserSocialProfile that have been updated",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "number"
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/UserSocialProfile/{id}": {
      "get": {
        "operationId": "UserSocialProfileApi_findOneById",
        "summary": "Find a single instance of UserSocialProfile with the given id. If none are found, an empty result is returned",
        "parameters": [
          {
            "name": "expand",
            "required": false,
            "in": "query",
            "description": "a comma separated list of property path's that specfiy which additional objects will be filled in the object (deep load). If nothing is specified only the object itself will be loaded, not of its relations will be included",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "The id of the instance to retrieve",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Get a single instance of UserSocialProfile with the specified id",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserSocialProfile"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "delete": {
        "operationId": "UserSocialProfileApi_remove",
        "summary": "Remove the single instance of UserSocialProfile with the specified id",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "The id of the instance to remove",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The instance of UserSocialProfile has been removed"
          },
          "403": {
            "description": "Forbidden."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/Country": {
      "get": {
        "operationId": "CountryApi_findAllByFilter",
        "summary": "Find all instances of Country that match the given filter. If none are found, an empty result is returned",
        "parameters": [
          {
            "name": "filter",
            "required": false,
            "in": "query",
            "description": "the odata like filter expression use to match which instances are returned",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "expand",
            "required": false,
            "in": "query",
            "description": "a comma separated list of property path's that specfiy which additional objects will be filled in the object (deep load). If nothing is specified only the object itself will be loaded, not of its relations will be included",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orderBy",
            "required": false,
            "in": "query",
            "description": "a comma separated list of order by directives used to determine the order in which the objects are returned. Each directive is a single property name optionally followed by desc if descending is required. For example [first_name, last_name desc]",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "if the results are paged (pageSize is specified), this is the page number to return. The first page is 1",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "pageSize",
            "required": false,
            "in": "query",
            "description": "if specified, the results are paged and this is the size of each of those pages",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "All instances of Country that match the filter",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Country"
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "post": {
        "operationId": "CountryApi_create",
        "summary": "Creates new instances of Country based on the values passed in. If the id is filled in, it will fail to create the new instance, otherwise it returns the the newly created objects",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Country"
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "The instances of Country that have been created",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Country"
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "put": {
        "operationId": "CountryApi_update",
        "summary": "Update the values for the instances of Country that are provided",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Country"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The ids of the instances of Country that have been updated",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "number"
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/Country/{id}": {
      "get": {
        "operationId": "CountryApi_findOneById",
        "summary": "Find a single instance of Country with the given id. If none are found, an empty result is returned",
        "parameters": [
          {
            "name": "expand",
            "required": false,
            "in": "query",
            "description": "a comma separated list of property path's that specfiy which additional objects will be filled in the object (deep load). If nothing is specified only the object itself will be loaded, not of its relations will be included",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "The id of the instance to retrieve",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Get a single instance of Country with the specified id",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Country"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "delete": {
        "operationId": "CountryApi_remove",
        "summary": "Remove the single instance of Country with the specified id",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "The id of the instance to remove",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The instance of Country has been removed"
          },
          "403": {
            "description": "Forbidden."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/AllUser/{id}/preference/{preference}": {
      "get": {
        "operationId": "AllUserApi_getPreference",
        "summary": "Get a preference setting for a specific user",
        "parameters": [
          {
            "name": "preference",
            "required": true,
            "in": "path",
            "description": "The name of the preference to get the value of",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "The id of the user to get the preference of",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Get a single value representing the preference",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Preference"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/AllUser/{id}/preference": {
      "put": {
        "operationId": "AllUserApi_setPreference",
        "summary": "Set a single preference for a given user",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "The id of the user to set the preference for",
            "schema": {
              "type": "number"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Preference"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "None"
          },
          "403": {
            "description": "Forbidden."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/AllUser": {
      "get": {
        "operationId": "AllUserApi_findAllByFilter",
        "summary": "Find all instances of AllUser that match the given filter. If none are found, an empty result is returned",
        "parameters": [
          {
            "name": "filter",
            "required": false,
            "in": "query",
            "description": "the odata like filter expression use to match which instances are returned",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "expand",
            "required": false,
            "in": "query",
            "description": "a comma separated list of property path's that specfiy which additional objects will be filled in the object (deep load). If nothing is specified only the object itself will be loaded, not of its relations will be included",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orderBy",
            "required": false,
            "in": "query",
            "description": "a comma separated list of order by directives used to determine the order in which the objects are returned. Each directive is a single property name optionally followed by desc if descending is required. For example [first_name, last_name desc]",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "if the results are paged (pageSize is specified), this is the page number to return. The first page is 1",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "pageSize",
            "required": false,
            "in": "query",
            "description": "if specified, the results are paged and this is the size of each of those pages",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "All instances of AllUser that match the filter",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AllUser"
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "post": {
        "operationId": "AllUserApi_create",
        "summary": "Creates new instances of AllUser based on the values passed in. If the id is filled in, it will fail to create the new instance, otherwise it returns the the newly created objects",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/AllUser"
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "The instances of AllUser that have been created",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AllUser"
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "put": {
        "operationId": "AllUserApi_update",
        "summary": "Update the values for the instances of AllUser that are provided",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/AllUser"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The ids of the instances of AllUser that have been updated",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "number"
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/AllUser/{id}": {
      "get": {
        "operationId": "AllUserApi_findOneById",
        "summary": "Find a single instance of AllUser with the given id. If none are found, an empty result is returned",
        "parameters": [
          {
            "name": "expand",
            "required": false,
            "in": "query",
            "description": "a comma separated list of property path's that specfiy which additional objects will be filled in the object (deep load). If nothing is specified only the object itself will be loaded, not of its relations will be included",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "The id of the instance to retrieve",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Get a single instance of AllUser with the specified id",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AllUser"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "delete": {
        "operationId": "AllUserApi_remove",
        "summary": "Remove the single instance of AllUser with the specified id",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "The id of the instance to remove",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The instance of AllUser has been removed"
          },
          "403": {
            "description": "Forbidden."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/Province": {
      "get": {
        "operationId": "ProvinceApi_findAllByFilter",
        "summary": "Find all instances of Province that match the given filter. If none are found, an empty result is returned",
        "parameters": [
          {
            "name": "filter",
            "required": false,
            "in": "query",
            "description": "the odata like filter expression use to match which instances are returned",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "expand",
            "required": false,
            "in": "query",
            "description": "a comma separated list of property path's that specfiy which additional objects will be filled in the object (deep load). If nothing is specified only the object itself will be loaded, not of its relations will be included",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orderBy",
            "required": false,
            "in": "query",
            "description": "a comma separated list of order by directives used to determine the order in which the objects are returned. Each directive is a single property name optionally followed by desc if descending is required. For example [first_name, last_name desc]",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "if the results are paged (pageSize is specified), this is the page number to return. The first page is 1",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "pageSize",
            "required": false,
            "in": "query",
            "description": "if specified, the results are paged and this is the size of each of those pages",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "All instances of Province that match the filter",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Province"
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "post": {
        "operationId": "ProvinceApi_create",
        "summary": "Creates new instances of Province based on the values passed in. If the id is filled in, it will fail to create the new instance, otherwise it returns the the newly created objects",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Province"
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "The instances of Province that have been created",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Province"
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "put": {
        "operationId": "ProvinceApi_update",
        "summary": "Update the values for the instances of Province that are provided",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Province"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The ids of the instances of Province that have been updated",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "number"
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/Province/{id}": {
      "get": {
        "operationId": "ProvinceApi_findOneById",
        "summary": "Find a single instance of Province with the given id. If none are found, an empty result is returned",
        "parameters": [
          {
            "name": "expand",
            "required": false,
            "in": "query",
            "description": "a comma separated list of property path's that specfiy which additional objects will be filled in the object (deep load). If nothing is specified only the object itself will be loaded, not of its relations will be included",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "The id of the instance to retrieve",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Get a single instance of Province with the specified id",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Province"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "delete": {
        "operationId": "ProvinceApi_remove",
        "summary": "Remove the single instance of Province with the specified id",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "The id of the instance to remove",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The instance of Province has been removed"
          },
          "403": {
            "description": "Forbidden."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/Mail": {
      "get": {
        "operationId": "MailApi_findAllByFilter",
        "summary": "Find all instances of Mail that match the given filter. If none are found, an empty result is returned",
        "parameters": [
          {
            "name": "filter",
            "required": false,
            "in": "query",
            "description": "the odata like filter expression use to match which instances are returned",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "expand",
            "required": false,
            "in": "query",
            "description": "a comma separated list of property path's that specfiy which additional objects will be filled in the object (deep load). If nothing is specified only the object itself will be loaded, not of its relations will be included",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orderBy",
            "required": false,
            "in": "query",
            "description": "a comma separated list of order by directives used to determine the order in which the objects are returned. Each directive is a single property name optionally followed by desc if descending is required. For example [first_name, last_name desc]",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "if the results are paged (pageSize is specified), this is the page number to return. The first page is 1",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "pageSize",
            "required": false,
            "in": "query",
            "description": "if specified, the results are paged and this is the size of each of those pages",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "All instances of Mail that match the filter",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Mail"
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "post": {
        "operationId": "MailApi_create",
        "summary": "Creates new instances of Mail based on the values passed in. If the id is filled in, it will fail to create the new instance, otherwise it returns the the newly created objects",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Mail"
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "The instances of Mail that have been created",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Mail"
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "put": {
        "operationId": "MailApi_update",
        "summary": "Update the values for the instances of Mail that are provided",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Mail"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The ids of the instances of Mail that have been updated",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "number"
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/Mail/{id}": {
      "get": {
        "operationId": "MailApi_findOneById",
        "summary": "Find a single instance of Mail with the given id. If none are found, an empty result is returned",
        "parameters": [
          {
            "name": "expand",
            "required": false,
            "in": "query",
            "description": "a comma separated list of property path's that specfiy which additional objects will be filled in the object (deep load). If nothing is specified only the object itself will be loaded, not of its relations will be included",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "The id of the instance to retrieve",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Get a single instance of Mail with the specified id",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Mail"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "delete": {
        "operationId": "MailApi_remove",
        "summary": "Remove the single instance of Mail with the specified id",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "The id of the instance to remove",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The instance of Mail has been removed"
          },
          "403": {
            "description": "Forbidden."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/ImportedContact": {
      "get": {
        "operationId": "ImportedContactApi_findAllByFilter",
        "summary": "Find all instances of ImportedContact that match the given filter. If none are found, an empty result is returned",
        "parameters": [
          {
            "name": "filter",
            "required": false,
            "in": "query",
            "description": "the odata like filter expression use to match which instances are returned",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "expand",
            "required": false,
            "in": "query",
            "description": "a comma separated list of property path's that specfiy which additional objects will be filled in the object (deep load). If nothing is specified only the object itself will be loaded, not of its relations will be included",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orderBy",
            "required": false,
            "in": "query",
            "description": "a comma separated list of order by directives used to determine the order in which the objects are returned. Each directive is a single property name optionally followed by desc if descending is required. For example [first_name, last_name desc]",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "if the results are paged (pageSize is specified), this is the page number to return. The first page is 1",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "pageSize",
            "required": false,
            "in": "query",
            "description": "if specified, the results are paged and this is the size of each of those pages",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "All instances of ImportedContact that match the filter",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ImportedContact"
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "post": {
        "operationId": "ImportedContactApi_create",
        "summary": "Creates new instances of ImportedContact based on the values passed in. If the id is filled in, it will fail to create the new instance, otherwise it returns the the newly created objects",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ImportedContact"
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "The instances of ImportedContact that have been created",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ImportedContact"
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "put": {
        "operationId": "ImportedContactApi_update",
        "summary": "Update the values for the instances of ImportedContact that are provided",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ImportedContact"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The ids of the instances of ImportedContact that have been updated",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "number"
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/ImportedContact/{id}": {
      "get": {
        "operationId": "ImportedContactApi_findOneById",
        "summary": "Find a single instance of ImportedContact with the given id. If none are found, an empty result is returned",
        "parameters": [
          {
            "name": "expand",
            "required": false,
            "in": "query",
            "description": "a comma separated list of property path's that specfiy which additional objects will be filled in the object (deep load). If nothing is specified only the object itself will be loaded, not of its relations will be included",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "The id of the instance to retrieve",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Get a single instance of ImportedContact with the specified id",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ImportedContact"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "delete": {
        "operationId": "ImportedContactApi_remove",
        "summary": "Remove the single instance of ImportedContact with the specified id",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "The id of the instance to remove",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The instance of ImportedContact has been removed"
          },
          "403": {
            "description": "Forbidden."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/InvestmentOrder": {
      "get": {
        "operationId": "InvestmentOrderApi_findAllByFilter",
        "summary": "Find all instances of InvestmentOrder that match the given filter. If none are found, an empty result is returned",
        "parameters": [
          {
            "name": "filter",
            "required": false,
            "in": "query",
            "description": "the odata like filter expression use to match which instances are returned",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "expand",
            "required": false,
            "in": "query",
            "description": "a comma separated list of property path's that specfiy which additional objects will be filled in the object (deep load). If nothing is specified only the object itself will be loaded, not of its relations will be included",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orderBy",
            "required": false,
            "in": "query",
            "description": "a comma separated list of order by directives used to determine the order in which the objects are returned. Each directive is a single property name optionally followed by desc if descending is required. For example [first_name, last_name desc]",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "if the results are paged (pageSize is specified), this is the page number to return. The first page is 1",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "pageSize",
            "required": false,
            "in": "query",
            "description": "if specified, the results are paged and this is the size of each of those pages",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "All instances of InvestmentOrder that match the filter",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/InvestmentOrder"
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "post": {
        "operationId": "InvestmentOrderApi_create",
        "summary": "Creates new instances of InvestmentOrder based on the values passed in. If the id is filled in, it will fail to create the new instance, otherwise it returns the the newly created objects",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/InvestmentOrder"
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "The instances of InvestmentOrder that have been created",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/InvestmentOrder"
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "put": {
        "operationId": "InvestmentOrderApi_update",
        "summary": "Update the values for the instances of InvestmentOrder that are provided",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/InvestmentOrder"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The ids of the instances of InvestmentOrder that have been updated",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "number"
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/InvestmentOrder/{id}": {
      "get": {
        "operationId": "InvestmentOrderApi_findOneById",
        "summary": "Find a single instance of InvestmentOrder with the given id. If none are found, an empty result is returned",
        "parameters": [
          {
            "name": "expand",
            "required": false,
            "in": "query",
            "description": "a comma separated list of property path's that specfiy which additional objects will be filled in the object (deep load). If nothing is specified only the object itself will be loaded, not of its relations will be included",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "The id of the instance to retrieve",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Get a single instance of InvestmentOrder with the specified id",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InvestmentOrder"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "delete": {
        "operationId": "InvestmentOrderApi_remove",
        "summary": "Remove the single instance of InvestmentOrder with the specified id",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "The id of the instance to remove",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The instance of InvestmentOrder has been removed"
          },
          "403": {
            "description": "Forbidden."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/UserBankingDetails": {
      "get": {
        "operationId": "UserBankingDetailsApi_findAllByFilter",
        "summary": "Find all instances of UserBankingDetails that match the given filter. If none are found, an empty result is returned",
        "parameters": [
          {
            "name": "filter",
            "required": false,
            "in": "query",
            "description": "the odata like filter expression use to match which instances are returned",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "expand",
            "required": false,
            "in": "query",
            "description": "a comma separated list of property path's that specfiy which additional objects will be filled in the object (deep load). If nothing is specified only the object itself will be loaded, not of its relations will be included",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orderBy",
            "required": false,
            "in": "query",
            "description": "a comma separated list of order by directives used to determine the order in which the objects are returned. Each directive is a single property name optionally followed by desc if descending is required. For example [first_name, last_name desc]",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "if the results are paged (pageSize is specified), this is the page number to return. The first page is 1",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "pageSize",
            "required": false,
            "in": "query",
            "description": "if specified, the results are paged and this is the size of each of those pages",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "All instances of UserBankingDetails that match the filter",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UserBankingDetails"
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "post": {
        "operationId": "UserBankingDetailsApi_create",
        "summary": "Creates new instances of UserBankingDetails based on the values passed in. If the id is filled in, it will fail to create the new instance, otherwise it returns the the newly created objects",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/UserBankingDetails"
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "The instances of UserBankingDetails that have been created",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UserBankingDetails"
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "put": {
        "operationId": "UserBankingDetailsApi_update",
        "summary": "Update the values for the instances of UserBankingDetails that are provided",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/UserBankingDetails"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The ids of the instances of UserBankingDetails that have been updated",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "number"
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/UserBankingDetails/{id}": {
      "get": {
        "operationId": "UserBankingDetailsApi_findOneById",
        "summary": "Find a single instance of UserBankingDetails with the given id. If none are found, an empty result is returned",
        "parameters": [
          {
            "name": "expand",
            "required": false,
            "in": "query",
            "description": "a comma separated list of property path's that specfiy which additional objects will be filled in the object (deep load). If nothing is specified only the object itself will be loaded, not of its relations will be included",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "The id of the instance to retrieve",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Get a single instance of UserBankingDetails with the specified id",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserBankingDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "delete": {
        "operationId": "UserBankingDetailsApi_remove",
        "summary": "Remove the single instance of UserBankingDetails with the specified id",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "The id of the instance to remove",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The instance of UserBankingDetails has been removed"
          },
          "403": {
            "description": "Forbidden."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/UserEntity": {
      "get": {
        "operationId": "UserEntityApi_findAllByFilter",
        "summary": "Find all instances of UserEntity that match the given filter. If none are found, an empty result is returned",
        "parameters": [
          {
            "name": "filter",
            "required": false,
            "in": "query",
            "description": "the odata like filter expression use to match which instances are returned",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "expand",
            "required": false,
            "in": "query",
            "description": "a comma separated list of property path's that specfiy which additional objects will be filled in the object (deep load). If nothing is specified only the object itself will be loaded, not of its relations will be included",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orderBy",
            "required": false,
            "in": "query",
            "description": "a comma separated list of order by directives used to determine the order in which the objects are returned. Each directive is a single property name optionally followed by desc if descending is required. For example [first_name, last_name desc]",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "if the results are paged (pageSize is specified), this is the page number to return. The first page is 1",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "pageSize",
            "required": false,
            "in": "query",
            "description": "if specified, the results are paged and this is the size of each of those pages",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "All instances of UserEntity that match the filter",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UserEntity"
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "post": {
        "operationId": "UserEntityApi_create",
        "summary": "Creates new instances of UserEntity based on the values passed in. If the id is filled in, it will fail to create the new instance, otherwise it returns the the newly created objects",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/UserEntity"
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "The instances of UserEntity that have been created",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UserEntity"
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "put": {
        "operationId": "UserEntityApi_update",
        "summary": "Update the values for the instances of UserEntity that are provided",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/UserEntity"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The ids of the instances of UserEntity that have been updated",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "number"
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/UserEntity/{id}": {
      "get": {
        "operationId": "UserEntityApi_findOneById",
        "summary": "Find a single instance of UserEntity with the given id. If none are found, an empty result is returned",
        "parameters": [
          {
            "name": "expand",
            "required": false,
            "in": "query",
            "description": "a comma separated list of property path's that specfiy which additional objects will be filled in the object (deep load). If nothing is specified only the object itself will be loaded, not of its relations will be included",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "The id of the instance to retrieve",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Get a single instance of UserEntity with the specified id",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserEntity"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "delete": {
        "operationId": "UserEntityApi_remove",
        "summary": "Remove the single instance of UserEntity with the specified id",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "The id of the instance to remove",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The instance of UserEntity has been removed"
          },
          "403": {
            "description": "Forbidden."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/FfbaAssociation": {
      "get": {
        "operationId": "FfbaAssociationApi_findAllByFilter",
        "summary": "Find all instances of FfbaAssociation that match the given filter. If none are found, an empty result is returned",
        "parameters": [
          {
            "name": "filter",
            "required": false,
            "in": "query",
            "description": "the odata like filter expression use to match which instances are returned",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "expand",
            "required": false,
            "in": "query",
            "description": "a comma separated list of property path's that specfiy which additional objects will be filled in the object (deep load). If nothing is specified only the object itself will be loaded, not of its relations will be included",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orderBy",
            "required": false,
            "in": "query",
            "description": "a comma separated list of order by directives used to determine the order in which the objects are returned. Each directive is a single property name optionally followed by desc if descending is required. For example [first_name, last_name desc]",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "if the results are paged (pageSize is specified), this is the page number to return. The first page is 1",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "pageSize",
            "required": false,
            "in": "query",
            "description": "if specified, the results are paged and this is the size of each of those pages",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "All instances of FfbaAssociation that match the filter",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/FfbaAssociation"
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "post": {
        "operationId": "FfbaAssociationApi_create",
        "summary": "Creates new instances of FfbaAssociation based on the values passed in. If the id is filled in, it will fail to create the new instance, otherwise it returns the the newly created objects",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/FfbaAssociation"
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "The instances of FfbaAssociation that have been created",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/FfbaAssociation"
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "put": {
        "operationId": "FfbaAssociationApi_update",
        "summary": "Update the values for the instances of FfbaAssociation that are provided",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/FfbaAssociation"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The ids of the instances of FfbaAssociation that have been updated",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "number"
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/FfbaAssociation/{id}": {
      "get": {
        "operationId": "FfbaAssociationApi_findOneById",
        "summary": "Find a single instance of FfbaAssociation with the given id. If none are found, an empty result is returned",
        "parameters": [
          {
            "name": "expand",
            "required": false,
            "in": "query",
            "description": "a comma separated list of property path's that specfiy which additional objects will be filled in the object (deep load). If nothing is specified only the object itself will be loaded, not of its relations will be included",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "The id of the instance to retrieve",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Get a single instance of FfbaAssociation with the specified id",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FfbaAssociation"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "delete": {
        "operationId": "FfbaAssociationApi_remove",
        "summary": "Remove the single instance of FfbaAssociation with the specified id",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "The id of the instance to remove",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The instance of FfbaAssociation has been removed"
          },
          "403": {
            "description": "Forbidden."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/Project": {
      "get": {
        "operationId": "ProjectApi_findAllByFilter",
        "summary": "Find all instances of Project that match the given filter. If none are found, an empty result is returned",
        "parameters": [
          {
            "name": "filter",
            "required": false,
            "in": "query",
            "description": "the odata like filter expression use to match which instances are returned",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "expand",
            "required": false,
            "in": "query",
            "description": "a comma separated list of property path's that specfiy which additional objects will be filled in the object (deep load). If nothing is specified only the object itself will be loaded, not of its relations will be included",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orderBy",
            "required": false,
            "in": "query",
            "description": "a comma separated list of order by directives used to determine the order in which the objects are returned. Each directive is a single property name optionally followed by desc if descending is required. For example [first_name, last_name desc]",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "if the results are paged (pageSize is specified), this is the page number to return. The first page is 1",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "pageSize",
            "required": false,
            "in": "query",
            "description": "if specified, the results are paged and this is the size of each of those pages",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "All instances of Project that match the filter",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Project"
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "post": {
        "operationId": "ProjectApi_create",
        "summary": "Creates new instances of Project based on the values passed in. If the id is filled in, it will fail to create the new instance, otherwise it returns the the newly created objects",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Project"
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "The instances of Project that have been created",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Project"
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "put": {
        "operationId": "ProjectApi_update",
        "summary": "Update the values for the instances of Project that are provided",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Project"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The ids of the instances of Project that have been updated",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "number"
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/Project/{id}": {
      "get": {
        "operationId": "ProjectApi_findOneById",
        "summary": "Find a single instance of Project with the given id. If none are found, an empty result is returned",
        "parameters": [
          {
            "name": "expand",
            "required": false,
            "in": "query",
            "description": "a comma separated list of property path's that specfiy which additional objects will be filled in the object (deep load). If nothing is specified only the object itself will be loaded, not of its relations will be included",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "The id of the instance to retrieve",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Get a single instance of Project with the specified id",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Project"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "delete": {
        "operationId": "ProjectApi_remove",
        "summary": "Remove the single instance of Project with the specified id",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "The id of the instance to remove",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The instance of Project has been removed"
          },
          "403": {
            "description": "Forbidden."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/ProjectDocusignMapping": {
      "get": {
        "operationId": "ProjectDocusignMappingApi_findAllByFilter",
        "summary": "Find all instances of ProjectDocusignMapping that match the given filter. If none are found, an empty result is returned",
        "parameters": [
          {
            "name": "filter",
            "required": false,
            "in": "query",
            "description": "the odata like filter expression use to match which instances are returned",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "expand",
            "required": false,
            "in": "query",
            "description": "a comma separated list of property path's that specfiy which additional objects will be filled in the object (deep load). If nothing is specified only the object itself will be loaded, not of its relations will be included",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orderBy",
            "required": false,
            "in": "query",
            "description": "a comma separated list of order by directives used to determine the order in which the objects are returned. Each directive is a single property name optionally followed by desc if descending is required. For example [first_name, last_name desc]",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "if the results are paged (pageSize is specified), this is the page number to return. The first page is 1",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "pageSize",
            "required": false,
            "in": "query",
            "description": "if specified, the results are paged and this is the size of each of those pages",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "All instances of ProjectDocusignMapping that match the filter",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ProjectDocusignMapping"
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "post": {
        "operationId": "ProjectDocusignMappingApi_create",
        "summary": "Creates new instances of ProjectDocusignMapping based on the values passed in. If the id is filled in, it will fail to create the new instance, otherwise it returns the the newly created objects",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ProjectDocusignMapping"
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "The instances of ProjectDocusignMapping that have been created",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ProjectDocusignMapping"
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "put": {
        "operationId": "ProjectDocusignMappingApi_update",
        "summary": "Update the values for the instances of ProjectDocusignMapping that are provided",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ProjectDocusignMapping"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The ids of the instances of ProjectDocusignMapping that have been updated",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "number"
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/ProjectDocusignMapping/{id}": {
      "get": {
        "operationId": "ProjectDocusignMappingApi_findOneById",
        "summary": "Find a single instance of ProjectDocusignMapping with the given id. If none are found, an empty result is returned",
        "parameters": [
          {
            "name": "expand",
            "required": false,
            "in": "query",
            "description": "a comma separated list of property path's that specfiy which additional objects will be filled in the object (deep load). If nothing is specified only the object itself will be loaded, not of its relations will be included",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "The id of the instance to retrieve",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Get a single instance of ProjectDocusignMapping with the specified id",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectDocusignMapping"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "delete": {
        "operationId": "ProjectDocusignMappingApi_remove",
        "summary": "Remove the single instance of ProjectDocusignMapping with the specified id",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "The id of the instance to remove",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The instance of ProjectDocusignMapping has been removed"
          },
          "403": {
            "description": "Forbidden."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/InvestmentWithdrawal": {
      "get": {
        "operationId": "InvestmentWithdrawalApi_findAllByFilter",
        "summary": "Find all instances of InvestmentWithdrawal that match the given filter. If none are found, an empty result is returned",
        "parameters": [
          {
            "name": "filter",
            "required": false,
            "in": "query",
            "description": "the odata like filter expression use to match which instances are returned",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "expand",
            "required": false,
            "in": "query",
            "description": "a comma separated list of property path's that specfiy which additional objects will be filled in the object (deep load). If nothing is specified only the object itself will be loaded, not of its relations will be included",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orderBy",
            "required": false,
            "in": "query",
            "description": "a comma separated list of order by directives used to determine the order in which the objects are returned. Each directive is a single property name optionally followed by desc if descending is required. For example [first_name, last_name desc]",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "if the results are paged (pageSize is specified), this is the page number to return. The first page is 1",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "pageSize",
            "required": false,
            "in": "query",
            "description": "if specified, the results are paged and this is the size of each of those pages",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "All instances of InvestmentWithdrawal that match the filter",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/InvestmentWithdrawal"
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "post": {
        "operationId": "InvestmentWithdrawalApi_create",
        "summary": "Creates new instances of InvestmentWithdrawal based on the values passed in. If the id is filled in, it will fail to create the new instance, otherwise it returns the the newly created objects",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/InvestmentWithdrawal"
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "The instances of InvestmentWithdrawal that have been created",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/InvestmentWithdrawal"
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "put": {
        "operationId": "InvestmentWithdrawalApi_update",
        "summary": "Update the values for the instances of InvestmentWithdrawal that are provided",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/InvestmentWithdrawal"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The ids of the instances of InvestmentWithdrawal that have been updated",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "number"
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/InvestmentWithdrawal/{id}": {
      "get": {
        "operationId": "InvestmentWithdrawalApi_findOneById",
        "summary": "Find a single instance of InvestmentWithdrawal with the given id. If none are found, an empty result is returned",
        "parameters": [
          {
            "name": "expand",
            "required": false,
            "in": "query",
            "description": "a comma separated list of property path's that specfiy which additional objects will be filled in the object (deep load). If nothing is specified only the object itself will be loaded, not of its relations will be included",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "The id of the instance to retrieve",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Get a single instance of InvestmentWithdrawal with the specified id",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InvestmentWithdrawal"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "delete": {
        "operationId": "InvestmentWithdrawalApi_remove",
        "summary": "Remove the single instance of InvestmentWithdrawal with the specified id",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "The id of the instance to remove",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The instance of InvestmentWithdrawal has been removed"
          },
          "403": {
            "description": "Forbidden."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/ProjectAccount": {
      "get": {
        "operationId": "ProjectAccountApi_findAllByFilter",
        "summary": "Find all instances of ProjectAccount that match the given filter. If none are found, an empty result is returned",
        "parameters": [
          {
            "name": "filter",
            "required": false,
            "in": "query",
            "description": "the odata like filter expression use to match which instances are returned",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "expand",
            "required": false,
            "in": "query",
            "description": "a comma separated list of property path's that specfiy which additional objects will be filled in the object (deep load). If nothing is specified only the object itself will be loaded, not of its relations will be included",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orderBy",
            "required": false,
            "in": "query",
            "description": "a comma separated list of order by directives used to determine the order in which the objects are returned. Each directive is a single property name optionally followed by desc if descending is required. For example [first_name, last_name desc]",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "if the results are paged (pageSize is specified), this is the page number to return. The first page is 1",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "pageSize",
            "required": false,
            "in": "query",
            "description": "if specified, the results are paged and this is the size of each of those pages",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "All instances of ProjectAccount that match the filter",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ProjectAccount"
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "post": {
        "operationId": "ProjectAccountApi_create",
        "summary": "Creates new instances of ProjectAccount based on the values passed in. If the id is filled in, it will fail to create the new instance, otherwise it returns the the newly created objects",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ProjectAccount"
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "The instances of ProjectAccount that have been created",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ProjectAccount"
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "put": {
        "operationId": "ProjectAccountApi_update",
        "summary": "Update the values for the instances of ProjectAccount that are provided",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ProjectAccount"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The ids of the instances of ProjectAccount that have been updated",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "number"
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/ProjectAccount/{id}": {
      "get": {
        "operationId": "ProjectAccountApi_findOneById",
        "summary": "Find a single instance of ProjectAccount with the given id. If none are found, an empty result is returned",
        "parameters": [
          {
            "name": "expand",
            "required": false,
            "in": "query",
            "description": "a comma separated list of property path's that specfiy which additional objects will be filled in the object (deep load). If nothing is specified only the object itself will be loaded, not of its relations will be included",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "The id of the instance to retrieve",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Get a single instance of ProjectAccount with the specified id",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectAccount"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "delete": {
        "operationId": "ProjectAccountApi_remove",
        "summary": "Remove the single instance of ProjectAccount with the specified id",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "The id of the instance to remove",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The instance of ProjectAccount has been removed"
          },
          "403": {
            "description": "Forbidden."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/InvestmentTransaction": {
      "get": {
        "operationId": "InvestmentTransactionApi_findAllByFilter",
        "summary": "Find all instances of InvestmentTransaction that match the given filter. If none are found, an empty result is returned",
        "parameters": [
          {
            "name": "filter",
            "required": false,
            "in": "query",
            "description": "the odata like filter expression use to match which instances are returned",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "expand",
            "required": false,
            "in": "query",
            "description": "a comma separated list of property path's that specfiy which additional objects will be filled in the object (deep load). If nothing is specified only the object itself will be loaded, not of its relations will be included",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orderBy",
            "required": false,
            "in": "query",
            "description": "a comma separated list of order by directives used to determine the order in which the objects are returned. Each directive is a single property name optionally followed by desc if descending is required. For example [first_name, last_name desc]",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "if the results are paged (pageSize is specified), this is the page number to return. The first page is 1",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "pageSize",
            "required": false,
            "in": "query",
            "description": "if specified, the results are paged and this is the size of each of those pages",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "All instances of InvestmentTransaction that match the filter",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/InvestmentTransaction"
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "post": {
        "operationId": "InvestmentTransactionApi_create",
        "summary": "Creates new instances of InvestmentTransaction based on the values passed in. If the id is filled in, it will fail to create the new instance, otherwise it returns the the newly created objects",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/InvestmentTransaction"
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "The instances of InvestmentTransaction that have been created",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/InvestmentTransaction"
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "put": {
        "operationId": "InvestmentTransactionApi_update",
        "summary": "Update the values for the instances of InvestmentTransaction that are provided",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/InvestmentTransaction"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The ids of the instances of InvestmentTransaction that have been updated",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "number"
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/InvestmentTransaction/{id}": {
      "get": {
        "operationId": "InvestmentTransactionApi_findOneById",
        "summary": "Find a single instance of InvestmentTransaction with the given id. If none are found, an empty result is returned",
        "parameters": [
          {
            "name": "expand",
            "required": false,
            "in": "query",
            "description": "a comma separated list of property path's that specfiy which additional objects will be filled in the object (deep load). If nothing is specified only the object itself will be loaded, not of its relations will be included",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "The id of the instance to retrieve",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Get a single instance of InvestmentTransaction with the specified id",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InvestmentTransaction"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "delete": {
        "operationId": "InvestmentTransactionApi_remove",
        "summary": "Remove the single instance of InvestmentTransaction with the specified id",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "The id of the instance to remove",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The instance of InvestmentTransaction has been removed"
          },
          "403": {
            "description": "Forbidden."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/InvestorEarning": {
      "get": {
        "operationId": "InvestorEarningApi_findAllByFilter",
        "summary": "Find all instances of InvestorEarning that match the given filter. If none are found, an empty result is returned",
        "parameters": [
          {
            "name": "filter",
            "required": false,
            "in": "query",
            "description": "the odata like filter expression use to match which instances are returned",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "expand",
            "required": false,
            "in": "query",
            "description": "a comma separated list of property path's that specfiy which additional objects will be filled in the object (deep load). If nothing is specified only the object itself will be loaded, not of its relations will be included",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orderBy",
            "required": false,
            "in": "query",
            "description": "a comma separated list of order by directives used to determine the order in which the objects are returned. Each directive is a single property name optionally followed by desc if descending is required. For example [first_name, last_name desc]",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "if the results are paged (pageSize is specified), this is the page number to return. The first page is 1",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "pageSize",
            "required": false,
            "in": "query",
            "description": "if specified, the results are paged and this is the size of each of those pages",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "All instances of InvestorEarning that match the filter",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/InvestorEarning"
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "post": {
        "operationId": "InvestorEarningApi_create",
        "summary": "Creates new instances of InvestorEarning based on the values passed in. If the id is filled in, it will fail to create the new instance, otherwise it returns the the newly created objects",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/InvestorEarning"
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "The instances of InvestorEarning that have been created",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/InvestorEarning"
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "put": {
        "operationId": "InvestorEarningApi_update",
        "summary": "Update the values for the instances of InvestorEarning that are provided",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/InvestorEarning"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The ids of the instances of InvestorEarning that have been updated",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "number"
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/InvestorEarning/{id}": {
      "get": {
        "operationId": "InvestorEarningApi_findOneById",
        "summary": "Find a single instance of InvestorEarning with the given id. If none are found, an empty result is returned",
        "parameters": [
          {
            "name": "expand",
            "required": false,
            "in": "query",
            "description": "a comma separated list of property path's that specfiy which additional objects will be filled in the object (deep load). If nothing is specified only the object itself will be loaded, not of its relations will be included",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "The id of the instance to retrieve",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Get a single instance of InvestorEarning with the specified id",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InvestorEarning"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "delete": {
        "operationId": "InvestorEarningApi_remove",
        "summary": "Remove the single instance of InvestorEarning with the specified id",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "The id of the instance to remove",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The instance of InvestorEarning has been removed"
          },
          "403": {
            "description": "Forbidden."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/InvestmentWatchlist": {
      "get": {
        "operationId": "InvestmentWatchlistApi_findAllByFilter",
        "summary": "Find all instances of InvestmentWatchlist that match the given filter. If none are found, an empty result is returned",
        "parameters": [
          {
            "name": "filter",
            "required": false,
            "in": "query",
            "description": "the odata like filter expression use to match which instances are returned",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "expand",
            "required": false,
            "in": "query",
            "description": "a comma separated list of property path's that specfiy which additional objects will be filled in the object (deep load). If nothing is specified only the object itself will be loaded, not of its relations will be included",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orderBy",
            "required": false,
            "in": "query",
            "description": "a comma separated list of order by directives used to determine the order in which the objects are returned. Each directive is a single property name optionally followed by desc if descending is required. For example [first_name, last_name desc]",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "if the results are paged (pageSize is specified), this is the page number to return. The first page is 1",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "pageSize",
            "required": false,
            "in": "query",
            "description": "if specified, the results are paged and this is the size of each of those pages",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "All instances of InvestmentWatchlist that match the filter",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/InvestmentWatchlist"
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "post": {
        "operationId": "InvestmentWatchlistApi_create",
        "summary": "Creates new instances of InvestmentWatchlist based on the values passed in. If the id is filled in, it will fail to create the new instance, otherwise it returns the the newly created objects",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/InvestmentWatchlist"
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "The instances of InvestmentWatchlist that have been created",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/InvestmentWatchlist"
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "put": {
        "operationId": "InvestmentWatchlistApi_update",
        "summary": "Update the values for the instances of InvestmentWatchlist that are provided",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/InvestmentWatchlist"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The ids of the instances of InvestmentWatchlist that have been updated",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "number"
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/InvestmentWatchlist/{id}": {
      "get": {
        "operationId": "InvestmentWatchlistApi_findOneById",
        "summary": "Find a single instance of InvestmentWatchlist with the given id. If none are found, an empty result is returned",
        "parameters": [
          {
            "name": "expand",
            "required": false,
            "in": "query",
            "description": "a comma separated list of property path's that specfiy which additional objects will be filled in the object (deep load). If nothing is specified only the object itself will be loaded, not of its relations will be included",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "The id of the instance to retrieve",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Get a single instance of InvestmentWatchlist with the specified id",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InvestmentWatchlist"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "delete": {
        "operationId": "InvestmentWatchlistApi_remove",
        "summary": "Remove the single instance of InvestmentWatchlist with the specified id",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "The id of the instance to remove",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The instance of InvestmentWatchlist has been removed"
          },
          "403": {
            "description": "Forbidden."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/ProjectBalanceAdjustment": {
      "get": {
        "operationId": "ProjectBalanceAdjustmentApi_findAllByFilter",
        "summary": "Find all instances of ProjectBalanceAdjustment that match the given filter. If none are found, an empty result is returned",
        "parameters": [
          {
            "name": "filter",
            "required": false,
            "in": "query",
            "description": "the odata like filter expression use to match which instances are returned",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "expand",
            "required": false,
            "in": "query",
            "description": "a comma separated list of property path's that specfiy which additional objects will be filled in the object (deep load). If nothing is specified only the object itself will be loaded, not of its relations will be included",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orderBy",
            "required": false,
            "in": "query",
            "description": "a comma separated list of order by directives used to determine the order in which the objects are returned. Each directive is a single property name optionally followed by desc if descending is required. For example [first_name, last_name desc]",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "if the results are paged (pageSize is specified), this is the page number to return. The first page is 1",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "pageSize",
            "required": false,
            "in": "query",
            "description": "if specified, the results are paged and this is the size of each of those pages",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "All instances of ProjectBalanceAdjustment that match the filter",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ProjectBalanceAdjustment"
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "post": {
        "operationId": "ProjectBalanceAdjustmentApi_create",
        "summary": "Creates new instances of ProjectBalanceAdjustment based on the values passed in. If the id is filled in, it will fail to create the new instance, otherwise it returns the the newly created objects",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ProjectBalanceAdjustment"
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "The instances of ProjectBalanceAdjustment that have been created",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ProjectBalanceAdjustment"
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "put": {
        "operationId": "ProjectBalanceAdjustmentApi_update",
        "summary": "Update the values for the instances of ProjectBalanceAdjustment that are provided",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ProjectBalanceAdjustment"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The ids of the instances of ProjectBalanceAdjustment that have been updated",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "number"
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/ProjectBalanceAdjustment/{id}": {
      "get": {
        "operationId": "ProjectBalanceAdjustmentApi_findOneById",
        "summary": "Find a single instance of ProjectBalanceAdjustment with the given id. If none are found, an empty result is returned",
        "parameters": [
          {
            "name": "expand",
            "required": false,
            "in": "query",
            "description": "a comma separated list of property path's that specfiy which additional objects will be filled in the object (deep load). If nothing is specified only the object itself will be loaded, not of its relations will be included",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "The id of the instance to retrieve",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Get a single instance of ProjectBalanceAdjustment with the specified id",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectBalanceAdjustment"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "delete": {
        "operationId": "ProjectBalanceAdjustmentApi_remove",
        "summary": "Remove the single instance of ProjectBalanceAdjustment with the specified id",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "The id of the instance to remove",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The instance of ProjectBalanceAdjustment has been removed"
          },
          "403": {
            "description": "Forbidden."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/ProjectEntity": {
      "get": {
        "operationId": "ProjectEntityApi_findAllByFilter",
        "summary": "Find all instances of ProjectEntity that match the given filter. If none are found, an empty result is returned",
        "parameters": [
          {
            "name": "filter",
            "required": false,
            "in": "query",
            "description": "the odata like filter expression use to match which instances are returned",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "expand",
            "required": false,
            "in": "query",
            "description": "a comma separated list of property path's that specfiy which additional objects will be filled in the object (deep load). If nothing is specified only the object itself will be loaded, not of its relations will be included",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orderBy",
            "required": false,
            "in": "query",
            "description": "a comma separated list of order by directives used to determine the order in which the objects are returned. Each directive is a single property name optionally followed by desc if descending is required. For example [first_name, last_name desc]",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "if the results are paged (pageSize is specified), this is the page number to return. The first page is 1",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "pageSize",
            "required": false,
            "in": "query",
            "description": "if specified, the results are paged and this is the size of each of those pages",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "All instances of ProjectEntity that match the filter",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ProjectEntity"
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "post": {
        "operationId": "ProjectEntityApi_create",
        "summary": "Creates new instances of ProjectEntity based on the values passed in. If the id is filled in, it will fail to create the new instance, otherwise it returns the the newly created objects",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ProjectEntity"
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "The instances of ProjectEntity that have been created",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ProjectEntity"
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "put": {
        "operationId": "ProjectEntityApi_update",
        "summary": "Update the values for the instances of ProjectEntity that are provided",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ProjectEntity"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The ids of the instances of ProjectEntity that have been updated",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "number"
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/ProjectEntity/{id}": {
      "get": {
        "operationId": "ProjectEntityApi_findOneById",
        "summary": "Find a single instance of ProjectEntity with the given id. If none are found, an empty result is returned",
        "parameters": [
          {
            "name": "expand",
            "required": false,
            "in": "query",
            "description": "a comma separated list of property path's that specfiy which additional objects will be filled in the object (deep load). If nothing is specified only the object itself will be loaded, not of its relations will be included",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "The id of the instance to retrieve",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Get a single instance of ProjectEntity with the specified id",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectEntity"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "delete": {
        "operationId": "ProjectEntityApi_remove",
        "summary": "Remove the single instance of ProjectEntity with the specified id",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "The id of the instance to remove",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The instance of ProjectEntity has been removed"
          },
          "403": {
            "description": "Forbidden."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/ProjectImage": {
      "get": {
        "operationId": "ProjectImageApi_findAllByFilter",
        "summary": "Find all instances of ProjectImage that match the given filter. If none are found, an empty result is returned",
        "parameters": [
          {
            "name": "filter",
            "required": false,
            "in": "query",
            "description": "the odata like filter expression use to match which instances are returned",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "expand",
            "required": false,
            "in": "query",
            "description": "a comma separated list of property path's that specfiy which additional objects will be filled in the object (deep load). If nothing is specified only the object itself will be loaded, not of its relations will be included",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orderBy",
            "required": false,
            "in": "query",
            "description": "a comma separated list of order by directives used to determine the order in which the objects are returned. Each directive is a single property name optionally followed by desc if descending is required. For example [first_name, last_name desc]",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "if the results are paged (pageSize is specified), this is the page number to return. The first page is 1",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "pageSize",
            "required": false,
            "in": "query",
            "description": "if specified, the results are paged and this is the size of each of those pages",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "All instances of ProjectImage that match the filter",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ProjectImage"
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "post": {
        "operationId": "ProjectImageApi_create",
        "summary": "Creates new instances of ProjectImage based on the values passed in. If the id is filled in, it will fail to create the new instance, otherwise it returns the the newly created objects",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ProjectImage"
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "The instances of ProjectImage that have been created",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ProjectImage"
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "put": {
        "operationId": "ProjectImageApi_update",
        "summary": "Update the values for the instances of ProjectImage that are provided",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ProjectImage"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The ids of the instances of ProjectImage that have been updated",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "number"
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/ProjectImage/{id}": {
      "get": {
        "operationId": "ProjectImageApi_findOneById",
        "summary": "Find a single instance of ProjectImage with the given id. If none are found, an empty result is returned",
        "parameters": [
          {
            "name": "expand",
            "required": false,
            "in": "query",
            "description": "a comma separated list of property path's that specfiy which additional objects will be filled in the object (deep load). If nothing is specified only the object itself will be loaded, not of its relations will be included",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "The id of the instance to retrieve",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Get a single instance of ProjectImage with the specified id",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectImage"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "delete": {
        "operationId": "ProjectImageApi_remove",
        "summary": "Remove the single instance of ProjectImage with the specified id",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "The id of the instance to remove",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The instance of ProjectImage has been removed"
          },
          "403": {
            "description": "Forbidden."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/ProjectEntityDetail": {
      "get": {
        "operationId": "ProjectEntityDetailApi_findAllByFilter",
        "summary": "Find all instances of ProjectEntityDetail that match the given filter. If none are found, an empty result is returned",
        "parameters": [
          {
            "name": "filter",
            "required": false,
            "in": "query",
            "description": "the odata like filter expression use to match which instances are returned",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "expand",
            "required": false,
            "in": "query",
            "description": "a comma separated list of property path's that specfiy which additional objects will be filled in the object (deep load). If nothing is specified only the object itself will be loaded, not of its relations will be included",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orderBy",
            "required": false,
            "in": "query",
            "description": "a comma separated list of order by directives used to determine the order in which the objects are returned. Each directive is a single property name optionally followed by desc if descending is required. For example [first_name, last_name desc]",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "if the results are paged (pageSize is specified), this is the page number to return. The first page is 1",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "pageSize",
            "required": false,
            "in": "query",
            "description": "if specified, the results are paged and this is the size of each of those pages",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "All instances of ProjectEntityDetail that match the filter",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ProjectEntityDetail"
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "post": {
        "operationId": "ProjectEntityDetailApi_create",
        "summary": "Creates new instances of ProjectEntityDetail based on the values passed in. If the id is filled in, it will fail to create the new instance, otherwise it returns the the newly created objects",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ProjectEntityDetail"
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "The instances of ProjectEntityDetail that have been created",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ProjectEntityDetail"
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "put": {
        "operationId": "ProjectEntityDetailApi_update",
        "summary": "Update the values for the instances of ProjectEntityDetail that are provided",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ProjectEntityDetail"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The ids of the instances of ProjectEntityDetail that have been updated",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "number"
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/ProjectEntityDetail/{id}": {
      "get": {
        "operationId": "ProjectEntityDetailApi_findOneById",
        "summary": "Find a single instance of ProjectEntityDetail with the given id. If none are found, an empty result is returned",
        "parameters": [
          {
            "name": "expand",
            "required": false,
            "in": "query",
            "description": "a comma separated list of property path's that specfiy which additional objects will be filled in the object (deep load). If nothing is specified only the object itself will be loaded, not of its relations will be included",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "The id of the instance to retrieve",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Get a single instance of ProjectEntityDetail with the specified id",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectEntityDetail"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "delete": {
        "operationId": "ProjectEntityDetailApi_remove",
        "summary": "Remove the single instance of ProjectEntityDetail with the specified id",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "The id of the instance to remove",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The instance of ProjectEntityDetail has been removed"
          },
          "403": {
            "description": "Forbidden."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/ProjectKeybacker": {
      "get": {
        "operationId": "ProjectKeybackerApi_findAllByFilter",
        "summary": "Find all instances of ProjectKeybacker that match the given filter. If none are found, an empty result is returned",
        "parameters": [
          {
            "name": "filter",
            "required": false,
            "in": "query",
            "description": "the odata like filter expression use to match which instances are returned",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "expand",
            "required": false,
            "in": "query",
            "description": "a comma separated list of property path's that specfiy which additional objects will be filled in the object (deep load). If nothing is specified only the object itself will be loaded, not of its relations will be included",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orderBy",
            "required": false,
            "in": "query",
            "description": "a comma separated list of order by directives used to determine the order in which the objects are returned. Each directive is a single property name optionally followed by desc if descending is required. For example [first_name, last_name desc]",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "if the results are paged (pageSize is specified), this is the page number to return. The first page is 1",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "pageSize",
            "required": false,
            "in": "query",
            "description": "if specified, the results are paged and this is the size of each of those pages",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "All instances of ProjectKeybacker that match the filter",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ProjectKeybacker"
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "post": {
        "operationId": "ProjectKeybackerApi_create",
        "summary": "Creates new instances of ProjectKeybacker based on the values passed in. If the id is filled in, it will fail to create the new instance, otherwise it returns the the newly created objects",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ProjectKeybacker"
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "The instances of ProjectKeybacker that have been created",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ProjectKeybacker"
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "put": {
        "operationId": "ProjectKeybackerApi_update",
        "summary": "Update the values for the instances of ProjectKeybacker that are provided",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ProjectKeybacker"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The ids of the instances of ProjectKeybacker that have been updated",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "number"
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/ProjectKeybacker/{id}": {
      "get": {
        "operationId": "ProjectKeybackerApi_findOneById",
        "summary": "Find a single instance of ProjectKeybacker with the given id. If none are found, an empty result is returned",
        "parameters": [
          {
            "name": "expand",
            "required": false,
            "in": "query",
            "description": "a comma separated list of property path's that specfiy which additional objects will be filled in the object (deep load). If nothing is specified only the object itself will be loaded, not of its relations will be included",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "The id of the instance to retrieve",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Get a single instance of ProjectKeybacker with the specified id",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectKeybacker"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "delete": {
        "operationId": "ProjectKeybackerApi_remove",
        "summary": "Remove the single instance of ProjectKeybacker with the specified id",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "The id of the instance to remove",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The instance of ProjectKeybacker has been removed"
          },
          "403": {
            "description": "Forbidden."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/ProjectPdf": {
      "get": {
        "operationId": "ProjectPdfApi_findAllByFilter",
        "summary": "Find all instances of ProjectPdf that match the given filter. If none are found, an empty result is returned",
        "parameters": [
          {
            "name": "filter",
            "required": false,
            "in": "query",
            "description": "the odata like filter expression use to match which instances are returned",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "expand",
            "required": false,
            "in": "query",
            "description": "a comma separated list of property path's that specfiy which additional objects will be filled in the object (deep load). If nothing is specified only the object itself will be loaded, not of its relations will be included",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orderBy",
            "required": false,
            "in": "query",
            "description": "a comma separated list of order by directives used to determine the order in which the objects are returned. Each directive is a single property name optionally followed by desc if descending is required. For example [first_name, last_name desc]",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "if the results are paged (pageSize is specified), this is the page number to return. The first page is 1",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "pageSize",
            "required": false,
            "in": "query",
            "description": "if specified, the results are paged and this is the size of each of those pages",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "All instances of ProjectPdf that match the filter",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ProjectPdf"
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "post": {
        "operationId": "ProjectPdfApi_create",
        "summary": "Creates new instances of ProjectPdf based on the values passed in. If the id is filled in, it will fail to create the new instance, otherwise it returns the the newly created objects",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ProjectPdf"
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "The instances of ProjectPdf that have been created",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ProjectPdf"
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "put": {
        "operationId": "ProjectPdfApi_update",
        "summary": "Update the values for the instances of ProjectPdf that are provided",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ProjectPdf"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The ids of the instances of ProjectPdf that have been updated",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "number"
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/ProjectPdf/{id}": {
      "get": {
        "operationId": "ProjectPdfApi_findOneById",
        "summary": "Find a single instance of ProjectPdf with the given id. If none are found, an empty result is returned",
        "parameters": [
          {
            "name": "expand",
            "required": false,
            "in": "query",
            "description": "a comma separated list of property path's that specfiy which additional objects will be filled in the object (deep load). If nothing is specified only the object itself will be loaded, not of its relations will be included",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "The id of the instance to retrieve",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Get a single instance of ProjectPdf with the specified id",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectPdf"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "delete": {
        "operationId": "ProjectPdfApi_remove",
        "summary": "Remove the single instance of ProjectPdf with the specified id",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "The id of the instance to remove",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The instance of ProjectPdf has been removed"
          },
          "403": {
            "description": "Forbidden."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/ProjectStatusReport": {
      "get": {
        "operationId": "ProjectStatusReportApi_findAllByFilter",
        "summary": "Find all instances of ProjectStatusReport that match the given filter. If none are found, an empty result is returned",
        "parameters": [
          {
            "name": "filter",
            "required": false,
            "in": "query",
            "description": "the odata like filter expression use to match which instances are returned",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "expand",
            "required": false,
            "in": "query",
            "description": "a comma separated list of property path's that specfiy which additional objects will be filled in the object (deep load). If nothing is specified only the object itself will be loaded, not of its relations will be included",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orderBy",
            "required": false,
            "in": "query",
            "description": "a comma separated list of order by directives used to determine the order in which the objects are returned. Each directive is a single property name optionally followed by desc if descending is required. For example [first_name, last_name desc]",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "if the results are paged (pageSize is specified), this is the page number to return. The first page is 1",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "pageSize",
            "required": false,
            "in": "query",
            "description": "if specified, the results are paged and this is the size of each of those pages",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "All instances of ProjectStatusReport that match the filter",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ProjectStatusReport"
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "post": {
        "operationId": "ProjectStatusReportApi_create",
        "summary": "Creates new instances of ProjectStatusReport based on the values passed in. If the id is filled in, it will fail to create the new instance, otherwise it returns the the newly created objects",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ProjectStatusReport"
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "The instances of ProjectStatusReport that have been created",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ProjectStatusReport"
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "put": {
        "operationId": "ProjectStatusReportApi_update",
        "summary": "Update the values for the instances of ProjectStatusReport that are provided",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ProjectStatusReport"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The ids of the instances of ProjectStatusReport that have been updated",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "number"
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/ProjectStatusReport/{id}": {
      "get": {
        "operationId": "ProjectStatusReportApi_findOneById",
        "summary": "Find a single instance of ProjectStatusReport with the given id. If none are found, an empty result is returned",
        "parameters": [
          {
            "name": "expand",
            "required": false,
            "in": "query",
            "description": "a comma separated list of property path's that specfiy which additional objects will be filled in the object (deep load). If nothing is specified only the object itself will be loaded, not of its relations will be included",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "The id of the instance to retrieve",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Get a single instance of ProjectStatusReport with the specified id",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectStatusReport"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "delete": {
        "operationId": "ProjectStatusReportApi_remove",
        "summary": "Remove the single instance of ProjectStatusReport with the specified id",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "The id of the instance to remove",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The instance of ProjectStatusReport has been removed"
          },
          "403": {
            "description": "Forbidden."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/ProjectTaxReport": {
      "get": {
        "operationId": "ProjectTaxReportApi_findAllByFilter",
        "summary": "Find all instances of ProjectTaxReport that match the given filter. If none are found, an empty result is returned",
        "parameters": [
          {
            "name": "filter",
            "required": false,
            "in": "query",
            "description": "the odata like filter expression use to match which instances are returned",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "expand",
            "required": false,
            "in": "query",
            "description": "a comma separated list of property path's that specfiy which additional objects will be filled in the object (deep load). If nothing is specified only the object itself will be loaded, not of its relations will be included",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orderBy",
            "required": false,
            "in": "query",
            "description": "a comma separated list of order by directives used to determine the order in which the objects are returned. Each directive is a single property name optionally followed by desc if descending is required. For example [first_name, last_name desc]",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "if the results are paged (pageSize is specified), this is the page number to return. The first page is 1",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "pageSize",
            "required": false,
            "in": "query",
            "description": "if specified, the results are paged and this is the size of each of those pages",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "All instances of ProjectTaxReport that match the filter",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ProjectTaxReport"
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "post": {
        "operationId": "ProjectTaxReportApi_create",
        "summary": "Creates new instances of ProjectTaxReport based on the values passed in. If the id is filled in, it will fail to create the new instance, otherwise it returns the the newly created objects",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ProjectTaxReport"
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "The instances of ProjectTaxReport that have been created",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ProjectTaxReport"
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "put": {
        "operationId": "ProjectTaxReportApi_update",
        "summary": "Update the values for the instances of ProjectTaxReport that are provided",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ProjectTaxReport"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The ids of the instances of ProjectTaxReport that have been updated",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "number"
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/ProjectTaxReport/{id}": {
      "get": {
        "operationId": "ProjectTaxReportApi_findOneById",
        "summary": "Find a single instance of ProjectTaxReport with the given id. If none are found, an empty result is returned",
        "parameters": [
          {
            "name": "expand",
            "required": false,
            "in": "query",
            "description": "a comma separated list of property path's that specfiy which additional objects will be filled in the object (deep load). If nothing is specified only the object itself will be loaded, not of its relations will be included",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "The id of the instance to retrieve",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Get a single instance of ProjectTaxReport with the specified id",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectTaxReport"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "delete": {
        "operationId": "ProjectTaxReportApi_remove",
        "summary": "Remove the single instance of ProjectTaxReport with the specified id",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "The id of the instance to remove",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The instance of ProjectTaxReport has been removed"
          },
          "403": {
            "description": "Forbidden."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/ProjectTaxSummary": {
      "get": {
        "operationId": "ProjectTaxSummaryApi_findAllByFilter",
        "summary": "Find all instances of ProjectTaxSummary that match the given filter. If none are found, an empty result is returned",
        "parameters": [
          {
            "name": "filter",
            "required": false,
            "in": "query",
            "description": "the odata like filter expression use to match which instances are returned",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "expand",
            "required": false,
            "in": "query",
            "description": "a comma separated list of property path's that specfiy which additional objects will be filled in the object (deep load). If nothing is specified only the object itself will be loaded, not of its relations will be included",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orderBy",
            "required": false,
            "in": "query",
            "description": "a comma separated list of order by directives used to determine the order in which the objects are returned. Each directive is a single property name optionally followed by desc if descending is required. For example [first_name, last_name desc]",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "if the results are paged (pageSize is specified), this is the page number to return. The first page is 1",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "pageSize",
            "required": false,
            "in": "query",
            "description": "if specified, the results are paged and this is the size of each of those pages",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "All instances of ProjectTaxSummary that match the filter",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ProjectTaxSummary"
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "post": {
        "operationId": "ProjectTaxSummaryApi_create",
        "summary": "Creates new instances of ProjectTaxSummary based on the values passed in. If the id is filled in, it will fail to create the new instance, otherwise it returns the the newly created objects",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ProjectTaxSummary"
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "The instances of ProjectTaxSummary that have been created",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ProjectTaxSummary"
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "put": {
        "operationId": "ProjectTaxSummaryApi_update",
        "summary": "Update the values for the instances of ProjectTaxSummary that are provided",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ProjectTaxSummary"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The ids of the instances of ProjectTaxSummary that have been updated",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "number"
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/ProjectTaxSummary/{id}": {
      "get": {
        "operationId": "ProjectTaxSummaryApi_findOneById",
        "summary": "Find a single instance of ProjectTaxSummary with the given id. If none are found, an empty result is returned",
        "parameters": [
          {
            "name": "expand",
            "required": false,
            "in": "query",
            "description": "a comma separated list of property path's that specfiy which additional objects will be filled in the object (deep load). If nothing is specified only the object itself will be loaded, not of its relations will be included",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "The id of the instance to retrieve",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Get a single instance of ProjectTaxSummary with the specified id",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectTaxSummary"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "delete": {
        "operationId": "ProjectTaxSummaryApi_remove",
        "summary": "Remove the single instance of ProjectTaxSummary with the specified id",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "The id of the instance to remove",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The instance of ProjectTaxSummary has been removed"
          },
          "403": {
            "description": "Forbidden."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/RoedSchedule1/{id}/reconcile/{date}": {
      "put": {
        "operationId": "RoedSchedule1Api_confirmReconciliation",
        "summary": "Confirm escrow and trade dates for orders on a roed",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "The id of the roed to confirm",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "date",
            "required": true,
            "in": "path",
            "description": "The date to fill escrow and trade dates if they are empty",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RoedSchedule1"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "None"
          },
          "403": {
            "description": "Forbidden."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/RoedSchedule1": {
      "get": {
        "operationId": "RoedSchedule1Api_findAllByFilter",
        "summary": "Find all instances of RoedSchedule1 that match the given filter. If none are found, an empty result is returned",
        "parameters": [
          {
            "name": "filter",
            "required": false,
            "in": "query",
            "description": "the odata like filter expression use to match which instances are returned",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "expand",
            "required": false,
            "in": "query",
            "description": "a comma separated list of property path's that specfiy which additional objects will be filled in the object (deep load). If nothing is specified only the object itself will be loaded, not of its relations will be included",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orderBy",
            "required": false,
            "in": "query",
            "description": "a comma separated list of order by directives used to determine the order in which the objects are returned. Each directive is a single property name optionally followed by desc if descending is required. For example [first_name, last_name desc]",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "if the results are paged (pageSize is specified), this is the page number to return. The first page is 1",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "pageSize",
            "required": false,
            "in": "query",
            "description": "if specified, the results are paged and this is the size of each of those pages",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "All instances of RoedSchedule1 that match the filter",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/RoedSchedule1"
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "post": {
        "operationId": "RoedSchedule1Api_create",
        "summary": "Creates new instances of RoedSchedule1 based on the values passed in. If the id is filled in, it will fail to create the new instance, otherwise it returns the the newly created objects",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/RoedSchedule1"
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "The instances of RoedSchedule1 that have been created",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/RoedSchedule1"
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "put": {
        "operationId": "RoedSchedule1Api_update",
        "summary": "Update the values for the instances of RoedSchedule1 that are provided",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/RoedSchedule1"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The ids of the instances of RoedSchedule1 that have been updated",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "number"
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/RoedSchedule1/{id}": {
      "get": {
        "operationId": "RoedSchedule1Api_findOneById",
        "summary": "Find a single instance of RoedSchedule1 with the given id. If none are found, an empty result is returned",
        "parameters": [
          {
            "name": "expand",
            "required": false,
            "in": "query",
            "description": "a comma separated list of property path's that specfiy which additional objects will be filled in the object (deep load). If nothing is specified only the object itself will be loaded, not of its relations will be included",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "The id of the instance to retrieve",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Get a single instance of RoedSchedule1 with the specified id",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RoedSchedule1"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "delete": {
        "operationId": "RoedSchedule1Api_remove",
        "summary": "Remove the single instance of RoedSchedule1 with the specified id",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "The id of the instance to remove",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The instance of RoedSchedule1 has been removed"
          },
          "403": {
            "description": "Forbidden."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/OrderAcknowledgement": {
      "get": {
        "operationId": "OrderAcknowledgementApi_findAllByFilter",
        "summary": "Find all instances of OrderAcknowledgement that match the given filter. If none are found, an empty result is returned",
        "parameters": [
          {
            "name": "filter",
            "required": false,
            "in": "query",
            "description": "the odata like filter expression use to match which instances are returned",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "expand",
            "required": false,
            "in": "query",
            "description": "a comma separated list of property path's that specfiy which additional objects will be filled in the object (deep load). If nothing is specified only the object itself will be loaded, not of its relations will be included",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orderBy",
            "required": false,
            "in": "query",
            "description": "a comma separated list of order by directives used to determine the order in which the objects are returned. Each directive is a single property name optionally followed by desc if descending is required. For example [first_name, last_name desc]",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "if the results are paged (pageSize is specified), this is the page number to return. The first page is 1",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "pageSize",
            "required": false,
            "in": "query",
            "description": "if specified, the results are paged and this is the size of each of those pages",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "All instances of OrderAcknowledgement that match the filter",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/OrderAcknowledgement"
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "post": {
        "operationId": "OrderAcknowledgementApi_create",
        "summary": "Creates new instances of OrderAcknowledgement based on the values passed in. If the id is filled in, it will fail to create the new instance, otherwise it returns the the newly created objects",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/OrderAcknowledgement"
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "The instances of OrderAcknowledgement that have been created",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/OrderAcknowledgement"
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "put": {
        "operationId": "OrderAcknowledgementApi_update",
        "summary": "Update the values for the instances of OrderAcknowledgement that are provided",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/OrderAcknowledgement"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The ids of the instances of OrderAcknowledgement that have been updated",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "number"
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/OrderAcknowledgement/{id}": {
      "get": {
        "operationId": "OrderAcknowledgementApi_findOneById",
        "summary": "Find a single instance of OrderAcknowledgement with the given id. If none are found, an empty result is returned",
        "parameters": [
          {
            "name": "expand",
            "required": false,
            "in": "query",
            "description": "a comma separated list of property path's that specfiy which additional objects will be filled in the object (deep load). If nothing is specified only the object itself will be loaded, not of its relations will be included",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "The id of the instance to retrieve",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Get a single instance of OrderAcknowledgement with the specified id",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrderAcknowledgement"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "delete": {
        "operationId": "OrderAcknowledgementApi_remove",
        "summary": "Remove the single instance of OrderAcknowledgement with the specified id",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "The id of the instance to remove",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The instance of OrderAcknowledgement has been removed"
          },
          "403": {
            "description": "Forbidden."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/InvestorIntendedTrades": {
      "get": {
        "operationId": "InvestorIntendedTradesApi_findAllByFilter",
        "summary": "Find all instances of InvestorIntendedTrades that match the given filter. If none are found, an empty result is returned",
        "parameters": [
          {
            "name": "filter",
            "required": false,
            "in": "query",
            "description": "the odata like filter expression use to match which instances are returned",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "expand",
            "required": false,
            "in": "query",
            "description": "a comma separated list of property path's that specfiy which additional objects will be filled in the object (deep load). If nothing is specified only the object itself will be loaded, not of its relations will be included",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orderBy",
            "required": false,
            "in": "query",
            "description": "a comma separated list of order by directives used to determine the order in which the objects are returned. Each directive is a single property name optionally followed by desc if descending is required. For example [first_name, last_name desc]",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "if the results are paged (pageSize is specified), this is the page number to return. The first page is 1",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "pageSize",
            "required": false,
            "in": "query",
            "description": "if specified, the results are paged and this is the size of each of those pages",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "All instances of InvestorIntendedTrades that match the filter",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/InvestorIntendedTrades"
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "post": {
        "operationId": "InvestorIntendedTradesApi_create",
        "summary": "Creates new instances of InvestorIntendedTrades based on the values passed in. If the id is filled in, it will fail to create the new instance, otherwise it returns the the newly created objects",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/InvestorIntendedTrades"
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "The instances of InvestorIntendedTrades that have been created",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/InvestorIntendedTrades"
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "put": {
        "operationId": "InvestorIntendedTradesApi_update",
        "summary": "Update the values for the instances of InvestorIntendedTrades that are provided",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/InvestorIntendedTrades"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The ids of the instances of InvestorIntendedTrades that have been updated",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "number"
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/InvestorIntendedTrades/{id}": {
      "get": {
        "operationId": "InvestorIntendedTradesApi_findOneById",
        "summary": "Find a single instance of InvestorIntendedTrades with the given id. If none are found, an empty result is returned",
        "parameters": [
          {
            "name": "expand",
            "required": false,
            "in": "query",
            "description": "a comma separated list of property path's that specfiy which additional objects will be filled in the object (deep load). If nothing is specified only the object itself will be loaded, not of its relations will be included",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "The id of the instance to retrieve",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Get a single instance of InvestorIntendedTrades with the specified id",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InvestorIntendedTrades"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "delete": {
        "operationId": "InvestorIntendedTradesApi_remove",
        "summary": "Remove the single instance of InvestorIntendedTrades with the specified id",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "The id of the instance to remove",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The instance of InvestorIntendedTrades has been removed"
          },
          "403": {
            "description": "Forbidden."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/ModuleAccess": {
      "get": {
        "operationId": "ModuleAccessApi_findAllByFilter",
        "summary": "Find all instances of ModuleAccess that match the given filter. If none are found, an empty result is returned",
        "parameters": [
          {
            "name": "filter",
            "required": false,
            "in": "query",
            "description": "the odata like filter expression use to match which instances are returned",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "expand",
            "required": false,
            "in": "query",
            "description": "a comma separated list of property path's that specfiy which additional objects will be filled in the object (deep load). If nothing is specified only the object itself will be loaded, not of its relations will be included",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orderBy",
            "required": false,
            "in": "query",
            "description": "a comma separated list of order by directives used to determine the order in which the objects are returned. Each directive is a single property name optionally followed by desc if descending is required. For example [first_name, last_name desc]",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "if the results are paged (pageSize is specified), this is the page number to return. The first page is 1",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "pageSize",
            "required": false,
            "in": "query",
            "description": "if specified, the results are paged and this is the size of each of those pages",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "All instances of ModuleAccess that match the filter",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ModuleAccess"
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "post": {
        "operationId": "ModuleAccessApi_create",
        "summary": "Creates new instances of ModuleAccess based on the values passed in. If the id is filled in, it will fail to create the new instance, otherwise it returns the the newly created objects",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ModuleAccess"
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "The instances of ModuleAccess that have been created",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ModuleAccess"
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "put": {
        "operationId": "ModuleAccessApi_update",
        "summary": "Update the values for the instances of ModuleAccess that are provided",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ModuleAccess"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The ids of the instances of ModuleAccess that have been updated",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "number"
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/ModuleAccess/{id}": {
      "get": {
        "operationId": "ModuleAccessApi_findOneById",
        "summary": "Find a single instance of ModuleAccess with the given id. If none are found, an empty result is returned",
        "parameters": [
          {
            "name": "expand",
            "required": false,
            "in": "query",
            "description": "a comma separated list of property path's that specfiy which additional objects will be filled in the object (deep load). If nothing is specified only the object itself will be loaded, not of its relations will be included",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "The id of the instance to retrieve",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Get a single instance of ModuleAccess with the specified id",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ModuleAccess"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "delete": {
        "operationId": "ModuleAccessApi_remove",
        "summary": "Remove the single instance of ModuleAccess with the specified id",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "The id of the instance to remove",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The instance of ModuleAccess has been removed"
          },
          "403": {
            "description": "Forbidden."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/AdminModule": {
      "get": {
        "operationId": "AdminModuleApi_findAllByFilter",
        "summary": "Find all instances of AdminModule that match the given filter. If none are found, an empty result is returned",
        "parameters": [
          {
            "name": "filter",
            "required": false,
            "in": "query",
            "description": "the odata like filter expression use to match which instances are returned",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "expand",
            "required": false,
            "in": "query",
            "description": "a comma separated list of property path's that specfiy which additional objects will be filled in the object (deep load). If nothing is specified only the object itself will be loaded, not of its relations will be included",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orderBy",
            "required": false,
            "in": "query",
            "description": "a comma separated list of order by directives used to determine the order in which the objects are returned. Each directive is a single property name optionally followed by desc if descending is required. For example [first_name, last_name desc]",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "if the results are paged (pageSize is specified), this is the page number to return. The first page is 1",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "pageSize",
            "required": false,
            "in": "query",
            "description": "if specified, the results are paged and this is the size of each of those pages",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "All instances of AdminModule that match the filter",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AdminModule"
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "post": {
        "operationId": "AdminModuleApi_create",
        "summary": "Creates new instances of AdminModule based on the values passed in. If the id is filled in, it will fail to create the new instance, otherwise it returns the the newly created objects",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/AdminModule"
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "The instances of AdminModule that have been created",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AdminModule"
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "put": {
        "operationId": "AdminModuleApi_update",
        "summary": "Update the values for the instances of AdminModule that are provided",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/AdminModule"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The ids of the instances of AdminModule that have been updated",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "number"
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/AdminModule/{id}": {
      "get": {
        "operationId": "AdminModuleApi_findOneById",
        "summary": "Find a single instance of AdminModule with the given id. If none are found, an empty result is returned",
        "parameters": [
          {
            "name": "expand",
            "required": false,
            "in": "query",
            "description": "a comma separated list of property path's that specfiy which additional objects will be filled in the object (deep load). If nothing is specified only the object itself will be loaded, not of its relations will be included",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "The id of the instance to retrieve",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Get a single instance of AdminModule with the specified id",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AdminModule"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "delete": {
        "operationId": "AdminModuleApi_remove",
        "summary": "Remove the single instance of AdminModule with the specified id",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "The id of the instance to remove",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The instance of AdminModule has been removed"
          },
          "403": {
            "description": "Forbidden."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/UserIssuerAssociation": {
      "get": {
        "operationId": "UserIssuerAssociationApi_findAllByFilter",
        "summary": "Find all instances of UserIssuerAssociation that match the given filter. If none are found, an empty result is returned",
        "parameters": [
          {
            "name": "filter",
            "required": false,
            "in": "query",
            "description": "the odata like filter expression use to match which instances are returned",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "expand",
            "required": false,
            "in": "query",
            "description": "a comma separated list of property path's that specfiy which additional objects will be filled in the object (deep load). If nothing is specified only the object itself will be loaded, not of its relations will be included",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orderBy",
            "required": false,
            "in": "query",
            "description": "a comma separated list of order by directives used to determine the order in which the objects are returned. Each directive is a single property name optionally followed by desc if descending is required. For example [first_name, last_name desc]",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "if the results are paged (pageSize is specified), this is the page number to return. The first page is 1",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "pageSize",
            "required": false,
            "in": "query",
            "description": "if specified, the results are paged and this is the size of each of those pages",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "All instances of UserIssuerAssociation that match the filter",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UserIssuerAssociation"
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "post": {
        "operationId": "UserIssuerAssociationApi_create",
        "summary": "Creates new instances of UserIssuerAssociation based on the values passed in. If the id is filled in, it will fail to create the new instance, otherwise it returns the the newly created objects",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/UserIssuerAssociation"
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "The instances of UserIssuerAssociation that have been created",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UserIssuerAssociation"
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "put": {
        "operationId": "UserIssuerAssociationApi_update",
        "summary": "Update the values for the instances of UserIssuerAssociation that are provided",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/UserIssuerAssociation"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The ids of the instances of UserIssuerAssociation that have been updated",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "number"
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/UserIssuerAssociation/{id}": {
      "get": {
        "operationId": "UserIssuerAssociationApi_findOneById",
        "summary": "Find a single instance of UserIssuerAssociation with the given id. If none are found, an empty result is returned",
        "parameters": [
          {
            "name": "expand",
            "required": false,
            "in": "query",
            "description": "a comma separated list of property path's that specfiy which additional objects will be filled in the object (deep load). If nothing is specified only the object itself will be loaded, not of its relations will be included",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "The id of the instance to retrieve",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Get a single instance of UserIssuerAssociation with the specified id",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserIssuerAssociation"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "delete": {
        "operationId": "UserIssuerAssociationApi_remove",
        "summary": "Remove the single instance of UserIssuerAssociation with the specified id",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "The id of the instance to remove",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The instance of UserIssuerAssociation has been removed"
          },
          "403": {
            "description": "Forbidden."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/UserFinancialKyc": {
      "get": {
        "operationId": "UserFinancialKycApi_findAllByFilter",
        "summary": "Find all instances of UserFinancialKyc that match the given filter. If none are found, an empty result is returned",
        "parameters": [
          {
            "name": "filter",
            "required": false,
            "in": "query",
            "description": "the odata like filter expression use to match which instances are returned",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "expand",
            "required": false,
            "in": "query",
            "description": "a comma separated list of property path's that specfiy which additional objects will be filled in the object (deep load). If nothing is specified only the object itself will be loaded, not of its relations will be included",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orderBy",
            "required": false,
            "in": "query",
            "description": "a comma separated list of order by directives used to determine the order in which the objects are returned. Each directive is a single property name optionally followed by desc if descending is required. For example [first_name, last_name desc]",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "if the results are paged (pageSize is specified), this is the page number to return. The first page is 1",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "pageSize",
            "required": false,
            "in": "query",
            "description": "if specified, the results are paged and this is the size of each of those pages",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "All instances of UserFinancialKyc that match the filter",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UserFinancialKyc"
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "post": {
        "operationId": "UserFinancialKycApi_create",
        "summary": "Creates new instances of UserFinancialKyc based on the values passed in. If the id is filled in, it will fail to create the new instance, otherwise it returns the the newly created objects",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/UserFinancialKyc"
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "The instances of UserFinancialKyc that have been created",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UserFinancialKyc"
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "put": {
        "operationId": "UserFinancialKycApi_update",
        "summary": "Update the values for the instances of UserFinancialKyc that are provided",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/UserFinancialKyc"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The ids of the instances of UserFinancialKyc that have been updated",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "number"
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/UserFinancialKyc/{id}": {
      "get": {
        "operationId": "UserFinancialKycApi_findOneById",
        "summary": "Find a single instance of UserFinancialKyc with the given id. If none are found, an empty result is returned",
        "parameters": [
          {
            "name": "expand",
            "required": false,
            "in": "query",
            "description": "a comma separated list of property path's that specfiy which additional objects will be filled in the object (deep load). If nothing is specified only the object itself will be loaded, not of its relations will be included",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "The id of the instance to retrieve",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Get a single instance of UserFinancialKyc with the specified id",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserFinancialKyc"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "delete": {
        "operationId": "UserFinancialKycApi_remove",
        "summary": "Remove the single instance of UserFinancialKyc with the specified id",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "The id of the instance to remove",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The instance of UserFinancialKyc has been removed"
          },
          "403": {
            "description": "Forbidden."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/UserInvitation": {
      "get": {
        "operationId": "UserInvitationApi_findAllByFilter",
        "summary": "Find all instances of UserInvitation that match the given filter. If none are found, an empty result is returned",
        "parameters": [
          {
            "name": "filter",
            "required": false,
            "in": "query",
            "description": "the odata like filter expression use to match which instances are returned",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "expand",
            "required": false,
            "in": "query",
            "description": "a comma separated list of property path's that specfiy which additional objects will be filled in the object (deep load). If nothing is specified only the object itself will be loaded, not of its relations will be included",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orderBy",
            "required": false,
            "in": "query",
            "description": "a comma separated list of order by directives used to determine the order in which the objects are returned. Each directive is a single property name optionally followed by desc if descending is required. For example [first_name, last_name desc]",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "if the results are paged (pageSize is specified), this is the page number to return. The first page is 1",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "pageSize",
            "required": false,
            "in": "query",
            "description": "if specified, the results are paged and this is the size of each of those pages",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "All instances of UserInvitation that match the filter",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UserInvitation"
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "post": {
        "operationId": "UserInvitationApi_create",
        "summary": "Creates new instances of UserInvitation based on the values passed in. If the id is filled in, it will fail to create the new instance, otherwise it returns the the newly created objects",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/UserInvitation"
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "The instances of UserInvitation that have been created",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UserInvitation"
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "put": {
        "operationId": "UserInvitationApi_update",
        "summary": "Update the values for the instances of UserInvitation that are provided",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/UserInvitation"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The ids of the instances of UserInvitation that have been updated",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "number"
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/UserInvitation/{id}": {
      "get": {
        "operationId": "UserInvitationApi_findOneById",
        "summary": "Find a single instance of UserInvitation with the given id. If none are found, an empty result is returned",
        "parameters": [
          {
            "name": "expand",
            "required": false,
            "in": "query",
            "description": "a comma separated list of property path's that specfiy which additional objects will be filled in the object (deep load). If nothing is specified only the object itself will be loaded, not of its relations will be included",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "The id of the instance to retrieve",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Get a single instance of UserInvitation with the specified id",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserInvitation"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "delete": {
        "operationId": "UserInvitationApi_remove",
        "summary": "Remove the single instance of UserInvitation with the specified id",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "The id of the instance to remove",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The instance of UserInvitation has been removed"
          },
          "403": {
            "description": "Forbidden."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/UserPdf": {
      "get": {
        "operationId": "UserPdfApi_findAllByFilter",
        "summary": "Find all UserPdf of AdminLog that match the given filter. If none are found, an empty result is returned",
        "parameters": [
          {
            "name": "filter",
            "required": false,
            "in": "query",
            "description": "the odata like filter expression use to match which instances are returned",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "expand",
            "required": false,
            "in": "query",
            "description": "a comma separated list of property path's that specfiy which additional objects will be filled in the object (deep load). If nothing is specified only the object itself will be loaded, not of its relations will be included",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orderBy",
            "required": false,
            "in": "query",
            "description": "a comma separated list of order by directives used to determine the order in which the objects are returned. Each directive is a single property name optionally followed by desc if descending is required. For example [first_name, last_name desc]",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "if the results are paged (pageSize is specified), this is the page number to return. The first page is 1",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "pageSize",
            "required": false,
            "in": "query",
            "description": "if specified, the results are paged and this is the size of each of those pages",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "All instances of UserPdf that match the filter",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UserPdf"
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "post": {
        "operationId": "UserPdfApi_create",
        "summary": "Create a new instance of UserPdf base on the value passed in. If the id is filled in, it will fail to create the new instance, otherwise it returns the id of the newly created object",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserPdf"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "A instance of UserPdf has been created, returns that newly created instance",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserPdf"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "put": {
        "operationId": "UserPdfApi_update",
        "summary": "Update the values for the instance of UserPdf that is provided",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserPdf"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The instance of UserPdf has been updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserPdf"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/UserPdf/{id}": {
      "get": {
        "operationId": "UserPdfApi_findOneById",
        "summary": "Find all UserPdf of AdminLog that match the given filter. If none are found, an empty result is returned",
        "parameters": [
          {
            "name": "expand",
            "required": false,
            "in": "query",
            "description": "a comma separated list of property path's that specfiy which additional objects will be filled in the object (deep load). If nothing is specified only the object itself will be loaded, not of its relations will be included",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "The id of the instance to retrieve",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Get a single instance of UserPdf with the specified id",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserPdf"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "delete": {
        "operationId": "UserPdfApi_remove",
        "summary": "Remove the single instance of UserPdf with the specified id",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "The id of the instance to remove",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The instance of UserPdf has been removed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserPdf"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/UserPdf/{id}/download": {
      "get": {
        "operationId": "UserPdfApi_download",
        "summary": "Download the file",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "The id of the pdf to download",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Get a single instance of UserPdf with the specified id",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserPdf"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/UserPdf/download/bundle": {
      "get": {
        "operationId": "UserPdfApi_downloadBundle",
        "summary": "Find all UserPdf of AdminLog that match the given filter, and structure the associated pdf files and download zipped bundle file",
        "parameters": [
          {
            "name": "filter",
            "required": true,
            "in": "query",
            "description": "the odata like filter expression use to match which instances are returned. pdf_type, pdf_name, fullName(user.first_name + user.last_name) are mandatory",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "pattern",
            "required": true,
            "in": "query",
            "description": "a comma separated list of naming pattern that specfiy how the pdf files are structured and named. There are three naming patterns. First and second patterns are for directory and third naming pattern is for pdf file name. If pattern is \"order.project.name,user.client_number,pdf_name\", you would create a root directory from the property users_pdf.order.project.name, inside of that create a directory from the property users_pdf.user.client_number and in that create a file name users_pdf.pdf_name with a \".pdf\" suffix.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Zipped bundle file of all instances of UserPdf that match the filter",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserPdf"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/UserAnswer": {
      "get": {
        "operationId": "UserAnswerApi_findAllByFilter",
        "summary": "Find all instances of UserAnswer that match the given filter. If none are found, an empty result is returned",
        "parameters": [
          {
            "name": "filter",
            "required": false,
            "in": "query",
            "description": "the odata like filter expression use to match which instances are returned",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "expand",
            "required": false,
            "in": "query",
            "description": "a comma separated list of property path's that specfiy which additional objects will be filled in the object (deep load). If nothing is specified only the object itself will be loaded, not of its relations will be included",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orderBy",
            "required": false,
            "in": "query",
            "description": "a comma separated list of order by directives used to determine the order in which the objects are returned. Each directive is a single property name optionally followed by desc if descending is required. For example [first_name, last_name desc]",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "if the results are paged (pageSize is specified), this is the page number to return. The first page is 1",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "pageSize",
            "required": false,
            "in": "query",
            "description": "if specified, the results are paged and this is the size of each of those pages",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "All instances of UserAnswer that match the filter",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UserAnswer"
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "post": {
        "operationId": "UserAnswerApi_create",
        "summary": "Creates new instances of UserAnswer based on the values passed in. If the id is filled in, it will fail to create the new instance, otherwise it returns the the newly created objects",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/UserAnswer"
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "The instances of UserAnswer that have been created",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UserAnswer"
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "put": {
        "operationId": "UserAnswerApi_update",
        "summary": "Update the values for the instances of UserAnswer that are provided",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/UserAnswer"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The ids of the instances of UserAnswer that have been updated",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "number"
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/UserAnswer/{id}": {
      "get": {
        "operationId": "UserAnswerApi_findOneById",
        "summary": "Find a single instance of UserAnswer with the given id. If none are found, an empty result is returned",
        "parameters": [
          {
            "name": "expand",
            "required": false,
            "in": "query",
            "description": "a comma separated list of property path's that specfiy which additional objects will be filled in the object (deep load). If nothing is specified only the object itself will be loaded, not of its relations will be included",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "The id of the instance to retrieve",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Get a single instance of UserAnswer with the specified id",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserAnswer"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "delete": {
        "operationId": "UserAnswerApi_remove",
        "summary": "Remove the single instance of UserAnswer with the specified id",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "The id of the instance to remove",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The instance of UserAnswer has been removed"
          },
          "403": {
            "description": "Forbidden."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/RegistrationQuestion": {
      "get": {
        "operationId": "RegistrationQuestionApi_findAllByFilter",
        "summary": "Find all instances of RegistrationQuestion that match the given filter. If none are found, an empty result is returned",
        "parameters": [
          {
            "name": "filter",
            "required": false,
            "in": "query",
            "description": "the odata like filter expression use to match which instances are returned",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "expand",
            "required": false,
            "in": "query",
            "description": "a comma separated list of property path's that specfiy which additional objects will be filled in the object (deep load). If nothing is specified only the object itself will be loaded, not of its relations will be included",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orderBy",
            "required": false,
            "in": "query",
            "description": "a comma separated list of order by directives used to determine the order in which the objects are returned. Each directive is a single property name optionally followed by desc if descending is required. For example [first_name, last_name desc]",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "if the results are paged (pageSize is specified), this is the page number to return. The first page is 1",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "pageSize",
            "required": false,
            "in": "query",
            "description": "if specified, the results are paged and this is the size of each of those pages",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "All instances of RegistrationQuestion that match the filter",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/RegistrationQuestion"
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "post": {
        "operationId": "RegistrationQuestionApi_create",
        "summary": "Creates new instances of RegistrationQuestion based on the values passed in. If the id is filled in, it will fail to create the new instance, otherwise it returns the the newly created objects",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/RegistrationQuestion"
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "The instances of RegistrationQuestion that have been created",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/RegistrationQuestion"
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "put": {
        "operationId": "RegistrationQuestionApi_update",
        "summary": "Update the values for the instances of RegistrationQuestion that are provided",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/RegistrationQuestion"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The ids of the instances of RegistrationQuestion that have been updated",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "number"
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/RegistrationQuestion/{id}": {
      "get": {
        "operationId": "RegistrationQuestionApi_findOneById",
        "summary": "Find a single instance of RegistrationQuestion with the given id. If none are found, an empty result is returned",
        "parameters": [
          {
            "name": "expand",
            "required": false,
            "in": "query",
            "description": "a comma separated list of property path's that specfiy which additional objects will be filled in the object (deep load). If nothing is specified only the object itself will be loaded, not of its relations will be included",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "The id of the instance to retrieve",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Get a single instance of RegistrationQuestion with the specified id",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RegistrationQuestion"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "delete": {
        "operationId": "RegistrationQuestionApi_remove",
        "summary": "Remove the single instance of RegistrationQuestion with the specified id",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "The id of the instance to remove",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The instance of RegistrationQuestion has been removed"
          },
          "403": {
            "description": "Forbidden."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/UserRequest": {
      "get": {
        "operationId": "UserRequestApi_findAllByFilter",
        "summary": "Find all instances of UserRequest that match the given filter. If none are found, an empty result is returned",
        "parameters": [
          {
            "name": "filter",
            "required": false,
            "in": "query",
            "description": "the odata like filter expression use to match which instances are returned",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "expand",
            "required": false,
            "in": "query",
            "description": "a comma separated list of property path's that specfiy which additional objects will be filled in the object (deep load). If nothing is specified only the object itself will be loaded, not of its relations will be included",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orderBy",
            "required": false,
            "in": "query",
            "description": "a comma separated list of order by directives used to determine the order in which the objects are returned. Each directive is a single property name optionally followed by desc if descending is required. For example [first_name, last_name desc]",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "if the results are paged (pageSize is specified), this is the page number to return. The first page is 1",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "pageSize",
            "required": false,
            "in": "query",
            "description": "if specified, the results are paged and this is the size of each of those pages",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "All instances of UserRequest that match the filter",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UserRequest"
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "post": {
        "operationId": "UserRequestApi_create",
        "summary": "Creates new instances of UserRequest based on the values passed in. If the id is filled in, it will fail to create the new instance, otherwise it returns the the newly created objects",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/UserRequest"
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "The instances of UserRequest that have been created",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UserRequest"
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "put": {
        "operationId": "UserRequestApi_update",
        "summary": "Update the values for the instances of UserRequest that are provided",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/UserRequest"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The ids of the instances of UserRequest that have been updated",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "number"
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/UserRequest/{id}": {
      "get": {
        "operationId": "UserRequestApi_findOneById",
        "summary": "Find a single instance of UserRequest with the given id. If none are found, an empty result is returned",
        "parameters": [
          {
            "name": "expand",
            "required": false,
            "in": "query",
            "description": "a comma separated list of property path's that specfiy which additional objects will be filled in the object (deep load). If nothing is specified only the object itself will be loaded, not of its relations will be included",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "The id of the instance to retrieve",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Get a single instance of UserRequest with the specified id",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserRequest"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "delete": {
        "operationId": "UserRequestApi_remove",
        "summary": "Remove the single instance of UserRequest with the specified id",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "The id of the instance to remove",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The instance of UserRequest has been removed"
          },
          "403": {
            "description": "Forbidden."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/UserSubscription": {
      "get": {
        "operationId": "UserSubscriptionApi_findAllByFilter",
        "summary": "Find all instances of UserSubscription that match the given filter. If none are found, an empty result is returned",
        "parameters": [
          {
            "name": "filter",
            "required": false,
            "in": "query",
            "description": "the odata like filter expression use to match which instances are returned",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "expand",
            "required": false,
            "in": "query",
            "description": "a comma separated list of property path's that specfiy which additional objects will be filled in the object (deep load). If nothing is specified only the object itself will be loaded, not of its relations will be included",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orderBy",
            "required": false,
            "in": "query",
            "description": "a comma separated list of order by directives used to determine the order in which the objects are returned. Each directive is a single property name optionally followed by desc if descending is required. For example [first_name, last_name desc]",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "if the results are paged (pageSize is specified), this is the page number to return. The first page is 1",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "pageSize",
            "required": false,
            "in": "query",
            "description": "if specified, the results are paged and this is the size of each of those pages",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "All instances of UserSubscription that match the filter",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UserSubscription"
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "post": {
        "operationId": "UserSubscriptionApi_create",
        "summary": "Creates new instances of UserSubscription based on the values passed in. If the id is filled in, it will fail to create the new instance, otherwise it returns the the newly created objects",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/UserSubscription"
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "The instances of UserSubscription that have been created",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UserSubscription"
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "put": {
        "operationId": "UserSubscriptionApi_update",
        "summary": "Update the values for the instances of UserSubscription that are provided",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/UserSubscription"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The ids of the instances of UserSubscription that have been updated",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "number"
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/UserSubscription/{id}": {
      "get": {
        "operationId": "UserSubscriptionApi_findOneById",
        "summary": "Find a single instance of UserSubscription with the given id. If none are found, an empty result is returned",
        "parameters": [
          {
            "name": "expand",
            "required": false,
            "in": "query",
            "description": "a comma separated list of property path's that specfiy which additional objects will be filled in the object (deep load). If nothing is specified only the object itself will be loaded, not of its relations will be included",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "The id of the instance to retrieve",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Get a single instance of UserSubscription with the specified id",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserSubscription"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "delete": {
        "operationId": "UserSubscriptionApi_remove",
        "summary": "Remove the single instance of UserSubscription with the specified id",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "The id of the instance to remove",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The instance of UserSubscription has been removed"
          },
          "403": {
            "description": "Forbidden."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/HubspotContactCobranders/checkCobranders": {
      "post": {
        "operationId": "HubspotContactCobrandersController_checkCobranders",
        "summary": "Cross check all cms cobranders with hubspot properties",
        "parameters": [],
        "responses": {
          "200": {
            "description": "The instances where the two are not properly connected"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/HubspotProject/checkProjects": {
      "post": {
        "operationId": "HubspotProjectController_checkProjects",
        "summary": "Cross check all cms projects with hubspot properties",
        "parameters": [],
        "responses": {
          "200": {
            "description": "The instances where the two are not properly connected"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/HubspotProject/syncProject/{id}": {
      "post": {
        "operationId": "HubspotProjectController_checkProject",
        "summary": "Ensure a single project is reflected in hubspot custom objects correctly",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "The id of the project to sync",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Any errors or notes encountered while performing the activity"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/HubspotDeal/new/{dealId}": {
      "post": {
        "operationId": "HubspotDealController_create",
        "summary": "Create a new order based on the details of a deal whoose id is provided",
        "parameters": [
          {
            "name": "dealId",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "A instance of order synced to the specified deal",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InvestmentOrder"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/HubspotDeal/checkOrders": {
      "post": {
        "operationId": "HubspotDealController_checkOrders",
        "summary": "Cross check all cms orders with hubspot deal",
        "parameters": [],
        "responses": {
          "200": {
            "description": "The instances where the two are not properly connected"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/HubspotDeal/checkDeals": {
      "post": {
        "operationId": "HubspotDealController_checkAllDeals",
        "summary": "Cross check all cms orders with hubspot deal",
        "parameters": [],
        "responses": {
          "200": {
            "description": "The instances where the two are not properly connected"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/HubspotDeal/syncOrder/{id}": {
      "post": {
        "operationId": "HubspotDealController_syncOrder",
        "summary": "Synchronize a single cms order with a corresponding hubspot deal",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "The id of the order to sync",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The set of errors that were encountered during the synchronization process"
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/Metrics": {
      "post": {
        "operationId": "MetricsApi_findOneById",
        "summary": "Get the data associated with the specified metric",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MetricsRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Get all data associated with a given metric",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/MetricResult"
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/Metrics/preference/{preference}": {
      "get": {
        "operationId": "MetricsApi_findByPreference",
        "summary": "Get a metrics based on a request saved in the current users specified preference",
        "parameters": [
          {
            "name": "preference",
            "required": true,
            "in": "path",
            "description": "The name of the preference to get the request from",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Get the metric values as specified in the saved request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/String"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "post": {
        "operationId": "MetricsApi_savePreferenceAnGet",
        "summary": "Save the given request as a preference and then get the mtrics",
        "parameters": [
          {
            "name": "preference",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MetricsRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Get all data associated with a given metric",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/MetricResult"
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/AdminUser": {
      "get": {
        "operationId": "AdminUserApi_findAllByFilter",
        "summary": "Find all instances of AdminUser that match the given filter. If none are found, an empty result is returned",
        "parameters": [
          {
            "name": "filter",
            "required": false,
            "in": "query",
            "description": "the odata like filter expression use to match which instances are returned",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "expand",
            "required": false,
            "in": "query",
            "description": "a comma separated list of property path's that specfiy which additional objects will be filled in the object (deep load). If nothing is specified only the object itself will be loaded, not of its relations will be included",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orderBy",
            "required": false,
            "in": "query",
            "description": "a comma separated list of order by directives used to determine the order in which the objects are returned. Each directive is a single property name optionally followed by desc if descending is required. For example [first_name, last_name desc]",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "if the results are paged (pageSize is specified), this is the page number to return. The first page is 1",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "pageSize",
            "required": false,
            "in": "query",
            "description": "if specified, the results are paged and this is the size of each of those pages",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "All instances of AdminUser that match the filter",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AdminUser"
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "post": {
        "operationId": "AdminUserApi_create",
        "summary": "Creates new instances of AdminUser based on the values passed in. If the id is filled in, it will fail to create the new instance, otherwise it returns the the newly created objects",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/AdminUser"
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "The instances of AdminUser that have been created",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AdminUser"
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "put": {
        "operationId": "AdminUserApi_update",
        "summary": "Update the values for the instances of AdminUser that are provided",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/AdminUser"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The ids of the instances of AdminUser that have been updated",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "number"
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/AdminUser/{id}": {
      "get": {
        "operationId": "AdminUserApi_findOneById",
        "summary": "Find a single instance of AdminUser with the given id. If none are found, an empty result is returned",
        "parameters": [
          {
            "name": "expand",
            "required": false,
            "in": "query",
            "description": "a comma separated list of property path's that specfiy which additional objects will be filled in the object (deep load). If nothing is specified only the object itself will be loaded, not of its relations will be included",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "The id of the instance to retrieve",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Get a single instance of AdminUser with the specified id",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AdminUser"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "delete": {
        "operationId": "AdminUserApi_remove",
        "summary": "Remove the single instance of AdminUser with the specified id",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "The id of the instance to remove",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The instance of AdminUser has been removed"
          },
          "403": {
            "description": "Forbidden."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/AllUserAnswer": {
      "get": {
        "operationId": "AllUserAnswerApi_findAllByFilter",
        "summary": "Find all instances of AllUserAnswer that match the given filter. If none are found, an empty result is returned",
        "parameters": [
          {
            "name": "filter",
            "required": false,
            "in": "query",
            "description": "the odata like filter expression use to match which instances are returned",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "expand",
            "required": false,
            "in": "query",
            "description": "a comma separated list of property path's that specfiy which additional objects will be filled in the object (deep load). If nothing is specified only the object itself will be loaded, not of its relations will be included",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orderBy",
            "required": false,
            "in": "query",
            "description": "a comma separated list of order by directives used to determine the order in which the objects are returned. Each directive is a single property name optionally followed by desc if descending is required. For example [first_name, last_name desc]",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "if the results are paged (pageSize is specified), this is the page number to return. The first page is 1",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "pageSize",
            "required": false,
            "in": "query",
            "description": "if specified, the results are paged and this is the size of each of those pages",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "All instances of AllUserAnswer that match the filter",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AllUserAnswer"
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "post": {
        "operationId": "AllUserAnswerApi_create",
        "summary": "Creates new instances of AllUserAnswer based on the values passed in. If the id is filled in, it will fail to create the new instance, otherwise it returns the the newly created objects",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/AllUserAnswer"
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "The instances of AllUserAnswer that have been created",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AllUserAnswer"
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "put": {
        "operationId": "AllUserAnswerApi_update",
        "summary": "Update the values for the instances of AllUserAnswer that are provided",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/AllUserAnswer"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The ids of the instances of AllUserAnswer that have been updated",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "number"
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/AllUserAnswer/{id}": {
      "get": {
        "operationId": "AllUserAnswerApi_findOneById",
        "summary": "Find a single instance of AllUserAnswer with the given id. If none are found, an empty result is returned",
        "parameters": [
          {
            "name": "expand",
            "required": false,
            "in": "query",
            "description": "a comma separated list of property path's that specfiy which additional objects will be filled in the object (deep load). If nothing is specified only the object itself will be loaded, not of its relations will be included",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "The id of the instance to retrieve",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Get a single instance of AllUserAnswer with the specified id",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AllUserAnswer"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "delete": {
        "operationId": "AllUserAnswerApi_remove",
        "summary": "Remove the single instance of AllUserAnswer with the specified id",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "The id of the instance to remove",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The instance of AllUserAnswer has been removed"
          },
          "403": {
            "description": "Forbidden."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/BackgroundProcess": {
      "get": {
        "operationId": "BackgroundProcessApi_findAllByFilter",
        "summary": "Find all instances of BackgroundProcess that match the given filter. If none are found, an empty result is returned",
        "parameters": [
          {
            "name": "filter",
            "required": false,
            "in": "query",
            "description": "the odata like filter expression use to match which instances are returned",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "expand",
            "required": false,
            "in": "query",
            "description": "a comma separated list of property path's that specfiy which additional objects will be filled in the object (deep load). If nothing is specified only the object itself will be loaded, not of its relations will be included",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orderBy",
            "required": false,
            "in": "query",
            "description": "a comma separated list of order by directives used to determine the order in which the objects are returned. Each directive is a single property name optionally followed by desc if descending is required. For example [first_name, last_name desc]",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "if the results are paged (pageSize is specified), this is the page number to return. The first page is 1",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "pageSize",
            "required": false,
            "in": "query",
            "description": "if specified, the results are paged and this is the size of each of those pages",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "All instances of BackgroundProcess that match the filter",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/BackgroundProcess"
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "post": {
        "operationId": "BackgroundProcessApi_create",
        "summary": "Creates new instances of BackgroundProcess based on the values passed in. If the id is filled in, it will fail to create the new instance, otherwise it returns the the newly created objects",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/BackgroundProcess"
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "The instances of BackgroundProcess that have been created",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/BackgroundProcess"
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "put": {
        "operationId": "BackgroundProcessApi_update",
        "summary": "Update the values for the instances of BackgroundProcess that are provided",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/BackgroundProcess"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The ids of the instances of BackgroundProcess that have been updated",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "number"
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/BackgroundProcess/{id}": {
      "get": {
        "operationId": "BackgroundProcessApi_findOneById",
        "summary": "Find a single instance of BackgroundProcess with the given id. If none are found, an empty result is returned",
        "parameters": [
          {
            "name": "expand",
            "required": false,
            "in": "query",
            "description": "a comma separated list of property path's that specfiy which additional objects will be filled in the object (deep load). If nothing is specified only the object itself will be loaded, not of its relations will be included",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "The id of the instance to retrieve",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Get a single instance of BackgroundProcess with the specified id",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BackgroundProcess"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "delete": {
        "operationId": "BackgroundProcessApi_remove",
        "summary": "Remove the single instance of BackgroundProcess with the specified id",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "The id of the instance to remove",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The instance of BackgroundProcess has been removed"
          },
          "403": {
            "description": "Forbidden."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/ComputedAccountPosition": {
      "get": {
        "operationId": "ComputedAccountPositionApi_findAllByFilter",
        "summary": "Find all instances of ComputedAccountPosition that match the given filter. If none are found, an empty result is returned",
        "parameters": [
          {
            "name": "filter",
            "required": false,
            "in": "query",
            "description": "the odata like filter expression use to match which instances are returned",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "expand",
            "required": false,
            "in": "query",
            "description": "a comma separated list of property path's that specfiy which additional objects will be filled in the object (deep load). If nothing is specified only the object itself will be loaded, not of its relations will be included",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orderBy",
            "required": false,
            "in": "query",
            "description": "a comma separated list of order by directives used to determine the order in which the objects are returned. Each directive is a single property name optionally followed by desc if descending is required. For example [first_name, last_name desc]",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "if the results are paged (pageSize is specified), this is the page number to return. The first page is 1",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "pageSize",
            "required": false,
            "in": "query",
            "description": "if specified, the results are paged and this is the size of each of those pages",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "All instances of ComputedAccountPosition that match the filter",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ComputedAccountPosition"
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/ComputedAccount": {
      "get": {
        "operationId": "ComputedAccountApi_findAllByFilter",
        "summary": "Find all instances of ComputedAccount that match the given filter. If none are found, an empty result is returned",
        "parameters": [
          {
            "name": "filter",
            "required": false,
            "in": "query",
            "description": "the odata like filter expression use to match which instances are returned",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "expand",
            "required": false,
            "in": "query",
            "description": "a comma separated list of property path's that specfiy which additional objects will be filled in the object (deep load). If nothing is specified only the object itself will be loaded, not of its relations will be included",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orderBy",
            "required": false,
            "in": "query",
            "description": "a comma separated list of order by directives used to determine the order in which the objects are returned. Each directive is a single property name optionally followed by desc if descending is required. For example [first_name, last_name desc]",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "if the results are paged (pageSize is specified), this is the page number to return. The first page is 1",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "pageSize",
            "required": false,
            "in": "query",
            "description": "if specified, the results are paged and this is the size of each of those pages",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "All instances of ComputedAccount that match the filter",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ComputedAccount"
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/Event": {
      "get": {
        "operationId": "EventApi_findAllByFilter",
        "summary": "Find all instances of Event that match the given filter. If none are found, an empty result is returned",
        "parameters": [
          {
            "name": "filter",
            "required": false,
            "in": "query",
            "description": "the odata like filter expression use to match which instances are returned",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "expand",
            "required": false,
            "in": "query",
            "description": "a comma separated list of property path's that specfiy which additional objects will be filled in the object (deep load). If nothing is specified only the object itself will be loaded, not of its relations will be included",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orderBy",
            "required": false,
            "in": "query",
            "description": "a comma separated list of order by directives used to determine the order in which the objects are returned. Each directive is a single property name optionally followed by desc if descending is required. For example [first_name, last_name desc]",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "if the results are paged (pageSize is specified), this is the page number to return. The first page is 1",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "pageSize",
            "required": false,
            "in": "query",
            "description": "if specified, the results are paged and this is the size of each of those pages",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "All instances of Event that match the filter",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Event"
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "post": {
        "operationId": "EventApi_create",
        "summary": "Creates new instances of Event based on the values passed in. If the id is filled in, it will fail to create the new instance, otherwise it returns the the newly created objects",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Event"
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "The instances of Event that have been created",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Event"
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "put": {
        "operationId": "EventApi_update",
        "summary": "Update the values for the instances of Event that are provided",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Event"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The ids of the instances of Event that have been updated",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "number"
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/Event/{id}": {
      "get": {
        "operationId": "EventApi_findOneById",
        "summary": "Find a single instance of Event with the given id. If none are found, an empty result is returned",
        "parameters": [
          {
            "name": "expand",
            "required": false,
            "in": "query",
            "description": "a comma separated list of property path's that specfiy which additional objects will be filled in the object (deep load). If nothing is specified only the object itself will be loaded, not of its relations will be included",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "The id of the instance to retrieve",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Get a single instance of Event with the specified id",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Event"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "delete": {
        "operationId": "EventApi_remove",
        "summary": "Remove the single instance of Event with the specified id",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "The id of the instance to remove",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The instance of Event has been removed"
          },
          "403": {
            "description": "Forbidden."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/OrderAcknowledgementQuestion": {
      "get": {
        "operationId": "OrderAcknowledgementQuestionApi_findAllByFilter",
        "summary": "Find all instances of OrderAcknowledgementQuestion that match the given filter. If none are found, an empty result is returned",
        "parameters": [
          {
            "name": "filter",
            "required": false,
            "in": "query",
            "description": "the odata like filter expression use to match which instances are returned",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "expand",
            "required": false,
            "in": "query",
            "description": "a comma separated list of property path's that specfiy which additional objects will be filled in the object (deep load). If nothing is specified only the object itself will be loaded, not of its relations will be included",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orderBy",
            "required": false,
            "in": "query",
            "description": "a comma separated list of order by directives used to determine the order in which the objects are returned. Each directive is a single property name optionally followed by desc if descending is required. For example [first_name, last_name desc]",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "if the results are paged (pageSize is specified), this is the page number to return. The first page is 1",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "pageSize",
            "required": false,
            "in": "query",
            "description": "if specified, the results are paged and this is the size of each of those pages",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "All instances of OrderAcknowledgementQuestion that match the filter",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/OrderAcknowledgementQuestion"
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "post": {
        "operationId": "OrderAcknowledgementQuestionApi_create",
        "summary": "Creates new instances of OrderAcknowledgementQuestion based on the values passed in. If the id is filled in, it will fail to create the new instance, otherwise it returns the the newly created objects",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/OrderAcknowledgementQuestion"
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "The instances of OrderAcknowledgementQuestion that have been created",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/OrderAcknowledgementQuestion"
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "put": {
        "operationId": "OrderAcknowledgementQuestionApi_update",
        "summary": "Update the values for the instances of OrderAcknowledgementQuestion that are provided",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/OrderAcknowledgementQuestion"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The ids of the instances of OrderAcknowledgementQuestion that have been updated",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "number"
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/OrderAcknowledgementQuestion/{id}": {
      "get": {
        "operationId": "OrderAcknowledgementQuestionApi_findOneById",
        "summary": "Find a single instance of OrderAcknowledgementQuestion with the given id. If none are found, an empty result is returned",
        "parameters": [
          {
            "name": "expand",
            "required": false,
            "in": "query",
            "description": "a comma separated list of property path's that specfiy which additional objects will be filled in the object (deep load). If nothing is specified only the object itself will be loaded, not of its relations will be included",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "The id of the instance to retrieve",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Get a single instance of OrderAcknowledgementQuestion with the specified id",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrderAcknowledgementQuestion"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "delete": {
        "operationId": "OrderAcknowledgementQuestionApi_remove",
        "summary": "Remove the single instance of OrderAcknowledgementQuestion with the specified id",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "The id of the instance to remove",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The instance of OrderAcknowledgementQuestion has been removed"
          },
          "403": {
            "description": "Forbidden."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/InvestorCobranding": {
      "get": {
        "operationId": "InvestorCobrandingApi_findAllByFilter",
        "summary": "Find all instances of InvestorCobranding that match the given filter. If none are found, an empty result is returned",
        "parameters": [
          {
            "name": "filter",
            "required": false,
            "in": "query",
            "description": "the odata like filter expression use to match which instances are returned",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "expand",
            "required": false,
            "in": "query",
            "description": "a comma separated list of property path's that specfiy which additional objects will be filled in the object (deep load). If nothing is specified only the object itself will be loaded, not of its relations will be included",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orderBy",
            "required": false,
            "in": "query",
            "description": "a comma separated list of order by directives used to determine the order in which the objects are returned. Each directive is a single property name optionally followed by desc if descending is required. For example [first_name, last_name desc]",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "if the results are paged (pageSize is specified), this is the page number to return. The first page is 1",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "pageSize",
            "required": false,
            "in": "query",
            "description": "if specified, the results are paged and this is the size of each of those pages",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "All instances of InvestorCobranding that match the filter",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/InvestorCobranding"
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/InvestorSocialProfile": {
      "get": {
        "operationId": "InvestorSocialProfileApi_findAllByFilter",
        "summary": "Find all instances of InvestorSocialProfile that match the given filter. If none are found, an empty result is returned",
        "parameters": [
          {
            "name": "filter",
            "required": false,
            "in": "query",
            "description": "the odata like filter expression use to match which instances are returned",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "expand",
            "required": false,
            "in": "query",
            "description": "a comma separated list of property path's that specfiy which additional objects will be filled in the object (deep load). If nothing is specified only the object itself will be loaded, not of its relations will be included",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orderBy",
            "required": false,
            "in": "query",
            "description": "a comma separated list of order by directives used to determine the order in which the objects are returned. Each directive is a single property name optionally followed by desc if descending is required. For example [first_name, last_name desc]",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "if the results are paged (pageSize is specified), this is the page number to return. The first page is 1",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "pageSize",
            "required": false,
            "in": "query",
            "description": "if specified, the results are paged and this is the size of each of those pages",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "All instances of InvestorSocialProfile that match the filter",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/InvestorSocialProfile"
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "post": {
        "operationId": "InvestorSocialProfileApi_create",
        "summary": "Creates new instances of InvestorSocialProfile based on the values passed in. If the id is filled in, it will fail to create the new instance, otherwise it returns the the newly created objects",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/InvestorSocialProfile"
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "The instances of InvestorSocialProfile that have been created",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/InvestorSocialProfile"
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "put": {
        "operationId": "InvestorSocialProfileApi_update",
        "summary": "Update the values for the instances of InvestorSocialProfile that are provided",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/InvestorSocialProfile"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The ids of the instances of InvestorSocialProfile that have been updated",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "number"
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/InvestorSocialProfile/{id}": {
      "get": {
        "operationId": "InvestorSocialProfileApi_findOneById",
        "summary": "Find a single instance of InvestorSocialProfile with the given id. If none are found, an empty result is returned",
        "parameters": [
          {
            "name": "expand",
            "required": false,
            "in": "query",
            "description": "a comma separated list of property path's that specfiy which additional objects will be filled in the object (deep load). If nothing is specified only the object itself will be loaded, not of its relations will be included",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "The id of the instance to retrieve",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Get a single instance of InvestorSocialProfile with the specified id",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InvestorSocialProfile"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "delete": {
        "operationId": "InvestorSocialProfileApi_remove",
        "summary": "Remove the single instance of InvestorSocialProfile with the specified id",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "The id of the instance to remove",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The instance of InvestorSocialProfile has been removed"
          },
          "403": {
            "description": "Forbidden."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/ProjectInterest": {
      "get": {
        "operationId": "ProjectInterestApi_findAllByFilter",
        "summary": "Find all instances of ProjectInterest that match the given filter. If none are found, an empty result is returned",
        "parameters": [
          {
            "name": "filter",
            "required": false,
            "in": "query",
            "description": "the odata like filter expression use to match which instances are returned",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "expand",
            "required": false,
            "in": "query",
            "description": "a comma separated list of property path's that specfiy which additional objects will be filled in the object (deep load). If nothing is specified only the object itself will be loaded, not of its relations will be included",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orderBy",
            "required": false,
            "in": "query",
            "description": "a comma separated list of order by directives used to determine the order in which the objects are returned. Each directive is a single property name optionally followed by desc if descending is required. For example [first_name, last_name desc]",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "if the results are paged (pageSize is specified), this is the page number to return. The first page is 1",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "pageSize",
            "required": false,
            "in": "query",
            "description": "if specified, the results are paged and this is the size of each of those pages",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "All instances of ProjectInterest that match the filter",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ProjectInterest"
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "post": {
        "operationId": "ProjectInterestApi_create",
        "summary": "Creates new instances of ProjectInterest based on the values passed in. If the id is filled in, it will fail to create the new instance, otherwise it returns the the newly created objects",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ProjectInterest"
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "The instances of ProjectInterest that have been created",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ProjectInterest"
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "put": {
        "operationId": "ProjectInterestApi_update",
        "summary": "Update the values for the instances of ProjectInterest that are provided",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ProjectInterest"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The ids of the instances of ProjectInterest that have been updated",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "number"
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/ProjectInterest/{id}": {
      "get": {
        "operationId": "ProjectInterestApi_findOneById",
        "summary": "Find a single instance of ProjectInterest with the given id. If none are found, an empty result is returned",
        "parameters": [
          {
            "name": "expand",
            "required": false,
            "in": "query",
            "description": "a comma separated list of property path's that specfiy which additional objects will be filled in the object (deep load). If nothing is specified only the object itself will be loaded, not of its relations will be included",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "The id of the instance to retrieve",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Get a single instance of ProjectInterest with the specified id",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProjectInterest"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "delete": {
        "operationId": "ProjectInterestApi_remove",
        "summary": "Remove the single instance of ProjectInterest with the specified id",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "The id of the instance to remove",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The instance of ProjectInterest has been removed"
          },
          "403": {
            "description": "Forbidden."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/SocialProfileFollowing": {
      "get": {
        "operationId": "SocialProfileFollowingApi_findAllByFilter",
        "summary": "Find all instances of SocialProfileFollowing that match the given filter. If none are found, an empty result is returned",
        "parameters": [
          {
            "name": "filter",
            "required": false,
            "in": "query",
            "description": "the odata like filter expression use to match which instances are returned",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "expand",
            "required": false,
            "in": "query",
            "description": "a comma separated list of property path's that specfiy which additional objects will be filled in the object (deep load). If nothing is specified only the object itself will be loaded, not of its relations will be included",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orderBy",
            "required": false,
            "in": "query",
            "description": "a comma separated list of order by directives used to determine the order in which the objects are returned. Each directive is a single property name optionally followed by desc if descending is required. For example [first_name, last_name desc]",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "if the results are paged (pageSize is specified), this is the page number to return. The first page is 1",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "pageSize",
            "required": false,
            "in": "query",
            "description": "if specified, the results are paged and this is the size of each of those pages",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "All instances of SocialProfileFollowing that match the filter",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SocialProfileFollowing"
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "post": {
        "operationId": "SocialProfileFollowingApi_create",
        "summary": "Creates new instances of SocialProfileFollowing based on the values passed in. If the id is filled in, it will fail to create the new instance, otherwise it returns the the newly created objects",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/SocialProfileFollowing"
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "The instances of SocialProfileFollowing that have been created",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SocialProfileFollowing"
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "put": {
        "operationId": "SocialProfileFollowingApi_update",
        "summary": "Update the values for the instances of SocialProfileFollowing that are provided",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/SocialProfileFollowing"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The ids of the instances of SocialProfileFollowing that have been updated",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "number"
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/SocialProfileFollowing/{id}": {
      "get": {
        "operationId": "SocialProfileFollowingApi_findOneById",
        "summary": "Find a single instance of SocialProfileFollowing with the given id. If none are found, an empty result is returned",
        "parameters": [
          {
            "name": "expand",
            "required": false,
            "in": "query",
            "description": "a comma separated list of property path's that specfiy which additional objects will be filled in the object (deep load). If nothing is specified only the object itself will be loaded, not of its relations will be included",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "The id of the instance to retrieve",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Get a single instance of SocialProfileFollowing with the specified id",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SocialProfileFollowing"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "delete": {
        "operationId": "SocialProfileFollowingApi_remove",
        "summary": "Remove the single instance of SocialProfileFollowing with the specified id",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "The id of the instance to remove",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The instance of SocialProfileFollowing has been removed"
          },
          "403": {
            "description": "Forbidden."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/UserSocialPost": {
      "get": {
        "operationId": "UserSocialPostApi_findAllByFilter",
        "summary": "Find all instances of UserSocialPost that match the given filter. If none are found, an empty result is returned",
        "parameters": [
          {
            "name": "filter",
            "required": false,
            "in": "query",
            "description": "the odata like filter expression use to match which instances are returned",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "expand",
            "required": false,
            "in": "query",
            "description": "a comma separated list of property path's that specfiy which additional objects will be filled in the object (deep load). If nothing is specified only the object itself will be loaded, not of its relations will be included",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orderBy",
            "required": false,
            "in": "query",
            "description": "a comma separated list of order by directives used to determine the order in which the objects are returned. Each directive is a single property name optionally followed by desc if descending is required. For example [first_name, last_name desc]",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "if the results are paged (pageSize is specified), this is the page number to return. The first page is 1",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "pageSize",
            "required": false,
            "in": "query",
            "description": "if specified, the results are paged and this is the size of each of those pages",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "All instances of UserSocialPost that match the filter",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UserSocialPost"
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "post": {
        "operationId": "UserSocialPostApi_create",
        "summary": "Creates new instances of UserSocialPost based on the values passed in. If the id is filled in, it will fail to create the new instance, otherwise it returns the the newly created objects",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/UserSocialPost"
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "The instances of UserSocialPost that have been created",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UserSocialPost"
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "put": {
        "operationId": "UserSocialPostApi_update",
        "summary": "Update the values for the instances of UserSocialPost that are provided",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/UserSocialPost"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The ids of the instances of UserSocialPost that have been updated",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "number"
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/UserSocialPost/{id}": {
      "get": {
        "operationId": "UserSocialPostApi_findOneById",
        "summary": "Find a single instance of UserSocialPost with the given id. If none are found, an empty result is returned",
        "parameters": [
          {
            "name": "expand",
            "required": false,
            "in": "query",
            "description": "a comma separated list of property path's that specfiy which additional objects will be filled in the object (deep load). If nothing is specified only the object itself will be loaded, not of its relations will be included",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "The id of the instance to retrieve",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Get a single instance of UserSocialPost with the specified id",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserSocialPost"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "delete": {
        "operationId": "UserSocialPostApi_remove",
        "summary": "Remove the single instance of UserSocialPost with the specified id",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "The id of the instance to remove",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The instance of UserSocialPost has been removed"
          },
          "403": {
            "description": "Forbidden."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/IssuerAdmin": {
      "get": {
        "operationId": "IssuerAdminApi_findAllByFilter",
        "summary": "Find all instances of IssuerAdmin that match the given filter. If none are found, an empty result is returned",
        "parameters": [
          {
            "name": "filter",
            "required": false,
            "in": "query",
            "description": "the odata like filter expression use to match which instances are returned",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "expand",
            "required": false,
            "in": "query",
            "description": "a comma separated list of property path's that specfiy which additional objects will be filled in the object (deep load). If nothing is specified only the object itself will be loaded, not of its relations will be included",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orderBy",
            "required": false,
            "in": "query",
            "description": "a comma separated list of order by directives used to determine the order in which the objects are returned. Each directive is a single property name optionally followed by desc if descending is required. For example [first_name, last_name desc]",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "if the results are paged (pageSize is specified), this is the page number to return. The first page is 1",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "pageSize",
            "required": false,
            "in": "query",
            "description": "if specified, the results are paged and this is the size of each of those pages",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "All instances of IssuerAdmin that match the filter",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/IssuerAdmin"
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "post": {
        "operationId": "IssuerAdminApi_create",
        "summary": "Creates new instances of IssuerAdmin based on the values passed in. If the id is filled in, it will fail to create the new instance, otherwise it returns the the newly created objects",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/IssuerAdmin"
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "The instances of IssuerAdmin that have been created",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/IssuerAdmin"
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "put": {
        "operationId": "IssuerAdminApi_update",
        "summary": "Update the values for the instances of IssuerAdmin that are provided",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/IssuerAdmin"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The ids of the instances of IssuerAdmin that have been updated",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "number"
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/IssuerAdmin/{id}": {
      "get": {
        "operationId": "IssuerAdminApi_findOneById",
        "summary": "Find a single instance of IssuerAdmin with the given id. If none are found, an empty result is returned",
        "parameters": [
          {
            "name": "expand",
            "required": false,
            "in": "query",
            "description": "a comma separated list of property path's that specfiy which additional objects will be filled in the object (deep load). If nothing is specified only the object itself will be loaded, not of its relations will be included",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "The id of the instance to retrieve",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Get a single instance of IssuerAdmin with the specified id",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IssuerAdmin"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "delete": {
        "operationId": "IssuerAdminApi_remove",
        "summary": "Remove the single instance of IssuerAdmin with the specified id",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "The id of the instance to remove",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The instance of IssuerAdmin has been removed"
          },
          "403": {
            "description": "Forbidden."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/Menu": {
      "get": {
        "operationId": "MenuApi_findAllByFilter",
        "summary": "Find all instances of Menu that match the given filter. If none are found, an empty result is returned",
        "parameters": [
          {
            "name": "filter",
            "required": false,
            "in": "query",
            "description": "the odata like filter expression use to match which instances are returned",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "expand",
            "required": false,
            "in": "query",
            "description": "a comma separated list of property path's that specfiy which additional objects will be filled in the object (deep load). If nothing is specified only the object itself will be loaded, not of its relations will be included",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orderBy",
            "required": false,
            "in": "query",
            "description": "a comma separated list of order by directives used to determine the order in which the objects are returned. Each directive is a single property name optionally followed by desc if descending is required. For example [first_name, last_name desc]",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "if the results are paged (pageSize is specified), this is the page number to return. The first page is 1",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "pageSize",
            "required": false,
            "in": "query",
            "description": "if specified, the results are paged and this is the size of each of those pages",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "All instances of Menu that match the filter",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Menu"
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "post": {
        "operationId": "MenuApi_create",
        "summary": "Creates new instances of Menu based on the values passed in. If the id is filled in, it will fail to create the new instance, otherwise it returns the the newly created objects",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Menu"
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "The instances of Menu that have been created",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Menu"
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "put": {
        "operationId": "MenuApi_update",
        "summary": "Update the values for the instances of Menu that are provided",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Menu"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The ids of the instances of Menu that have been updated",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "number"
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/Menu/{id}": {
      "get": {
        "operationId": "MenuApi_findOneById",
        "summary": "Find a single instance of Menu with the given id. If none are found, an empty result is returned",
        "parameters": [
          {
            "name": "expand",
            "required": false,
            "in": "query",
            "description": "a comma separated list of property path's that specfiy which additional objects will be filled in the object (deep load). If nothing is specified only the object itself will be loaded, not of its relations will be included",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "The id of the instance to retrieve",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Get a single instance of Menu with the specified id",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Menu"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "delete": {
        "operationId": "MenuApi_remove",
        "summary": "Remove the single instance of Menu with the specified id",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "The id of the instance to remove",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The instance of Menu has been removed"
          },
          "403": {
            "description": "Forbidden."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/NotableInvestorProfile": {
      "get": {
        "operationId": "NotableInvestorProfileApi_findAllByFilter",
        "summary": "Find all instances of NotableInvestorProfile that match the given filter. If none are found, an empty result is returned",
        "parameters": [
          {
            "name": "filter",
            "required": false,
            "in": "query",
            "description": "the odata like filter expression use to match which instances are returned",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "expand",
            "required": false,
            "in": "query",
            "description": "a comma separated list of property path's that specfiy which additional objects will be filled in the object (deep load). If nothing is specified only the object itself will be loaded, not of its relations will be included",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orderBy",
            "required": false,
            "in": "query",
            "description": "a comma separated list of order by directives used to determine the order in which the objects are returned. Each directive is a single property name optionally followed by desc if descending is required. For example [first_name, last_name desc]",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "if the results are paged (pageSize is specified), this is the page number to return. The first page is 1",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "pageSize",
            "required": false,
            "in": "query",
            "description": "if specified, the results are paged and this is the size of each of those pages",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "All instances of NotableInvestorProfile that match the filter",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/NotableInvestorProfile"
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "post": {
        "operationId": "NotableInvestorProfileApi_create",
        "summary": "Creates new instances of NotableInvestorProfile based on the values passed in. If the id is filled in, it will fail to create the new instance, otherwise it returns the the newly created objects",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/NotableInvestorProfile"
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "The instances of NotableInvestorProfile that have been created",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/NotableInvestorProfile"
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "put": {
        "operationId": "NotableInvestorProfileApi_update",
        "summary": "Update the values for the instances of NotableInvestorProfile that are provided",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/NotableInvestorProfile"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The ids of the instances of NotableInvestorProfile that have been updated",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "number"
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/NotableInvestorProfile/{id}": {
      "get": {
        "operationId": "NotableInvestorProfileApi_findOneById",
        "summary": "Find a single instance of NotableInvestorProfile with the given id. If none are found, an empty result is returned",
        "parameters": [
          {
            "name": "expand",
            "required": false,
            "in": "query",
            "description": "a comma separated list of property path's that specfiy which additional objects will be filled in the object (deep load). If nothing is specified only the object itself will be loaded, not of its relations will be included",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "The id of the instance to retrieve",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Get a single instance of NotableInvestorProfile with the specified id",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotableInvestorProfile"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "delete": {
        "operationId": "NotableInvestorProfileApi_remove",
        "summary": "Remove the single instance of NotableInvestorProfile with the specified id",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "The id of the instance to remove",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The instance of NotableInvestorProfile has been removed"
          },
          "403": {
            "description": "Forbidden."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/ProfileBackground": {
      "get": {
        "operationId": "ProfileBackgroundApi_findAllByFilter",
        "summary": "Find all instances of ProfileBackground that match the given filter. If none are found, an empty result is returned",
        "parameters": [
          {
            "name": "filter",
            "required": false,
            "in": "query",
            "description": "the odata like filter expression use to match which instances are returned",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "expand",
            "required": false,
            "in": "query",
            "description": "a comma separated list of property path's that specfiy which additional objects will be filled in the object (deep load). If nothing is specified only the object itself will be loaded, not of its relations will be included",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orderBy",
            "required": false,
            "in": "query",
            "description": "a comma separated list of order by directives used to determine the order in which the objects are returned. Each directive is a single property name optionally followed by desc if descending is required. For example [first_name, last_name desc]",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "if the results are paged (pageSize is specified), this is the page number to return. The first page is 1",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "pageSize",
            "required": false,
            "in": "query",
            "description": "if specified, the results are paged and this is the size of each of those pages",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "All instances of ProfileBackground that match the filter",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ProfileBackground"
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "post": {
        "operationId": "ProfileBackgroundApi_create",
        "summary": "Creates new instances of ProfileBackground based on the values passed in. If the id is filled in, it will fail to create the new instance, otherwise it returns the the newly created objects",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ProfileBackground"
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "The instances of ProfileBackground that have been created",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ProfileBackground"
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "put": {
        "operationId": "ProfileBackgroundApi_update",
        "summary": "Update the values for the instances of ProfileBackground that are provided",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ProfileBackground"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The ids of the instances of ProfileBackground that have been updated",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "number"
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/ProfileBackground/{id}": {
      "get": {
        "operationId": "ProfileBackgroundApi_findOneById",
        "summary": "Find a single instance of ProfileBackground with the given id. If none are found, an empty result is returned",
        "parameters": [
          {
            "name": "expand",
            "required": false,
            "in": "query",
            "description": "a comma separated list of property path's that specfiy which additional objects will be filled in the object (deep load). If nothing is specified only the object itself will be loaded, not of its relations will be included",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "The id of the instance to retrieve",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Get a single instance of ProfileBackground with the specified id",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProfileBackground"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "delete": {
        "operationId": "ProfileBackgroundApi_remove",
        "summary": "Remove the single instance of ProfileBackground with the specified id",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "The id of the instance to remove",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The instance of ProfileBackground has been removed"
          },
          "403": {
            "description": "Forbidden."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/ExemptDistributionOption": {
      "get": {
        "operationId": "ExemptDistributionOptionApi_findAllByFilter",
        "summary": "Find all instances of ExemptDistributionOption that match the given filter. If none are found, an empty result is returned",
        "parameters": [
          {
            "name": "filter",
            "required": false,
            "in": "query",
            "description": "the odata like filter expression use to match which instances are returned",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "expand",
            "required": false,
            "in": "query",
            "description": "a comma separated list of property path's that specfiy which additional objects will be filled in the object (deep load). If nothing is specified only the object itself will be loaded, not of its relations will be included",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orderBy",
            "required": false,
            "in": "query",
            "description": "a comma separated list of order by directives used to determine the order in which the objects are returned. Each directive is a single property name optionally followed by desc if descending is required. For example [first_name, last_name desc]",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "if the results are paged (pageSize is specified), this is the page number to return. The first page is 1",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "pageSize",
            "required": false,
            "in": "query",
            "description": "if specified, the results are paged and this is the size of each of those pages",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "All instances of ExemptDistributionOption that match the filter",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ExemptDistributionOption"
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "post": {
        "operationId": "ExemptDistributionOptionApi_create",
        "summary": "Creates new instances of ExemptDistributionOption based on the values passed in. If the id is filled in, it will fail to create the new instance, otherwise it returns the the newly created objects",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ExemptDistributionOption"
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "The instances of ExemptDistributionOption that have been created",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ExemptDistributionOption"
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "put": {
        "operationId": "ExemptDistributionOptionApi_update",
        "summary": "Update the values for the instances of ExemptDistributionOption that are provided",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ExemptDistributionOption"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The ids of the instances of ExemptDistributionOption that have been updated",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "number"
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/ExemptDistributionOption/{id}": {
      "get": {
        "operationId": "ExemptDistributionOptionApi_findOneById",
        "summary": "Find a single instance of ExemptDistributionOption with the given id. If none are found, an empty result is returned",
        "parameters": [
          {
            "name": "expand",
            "required": false,
            "in": "query",
            "description": "a comma separated list of property path's that specfiy which additional objects will be filled in the object (deep load). If nothing is specified only the object itself will be loaded, not of its relations will be included",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "The id of the instance to retrieve",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Get a single instance of ExemptDistributionOption with the specified id",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ExemptDistributionOption"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "delete": {
        "operationId": "ExemptDistributionOptionApi_remove",
        "summary": "Remove the single instance of ExemptDistributionOption with the specified id",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "The id of the instance to remove",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The instance of ExemptDistributionOption has been removed"
          },
          "403": {
            "description": "Forbidden."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/PropertySocialProfile": {
      "get": {
        "operationId": "PropertySocialProfileApi_findAllByFilter",
        "summary": "Find all instances of PropertySocialProfile that match the given filter. If none are found, an empty result is returned",
        "parameters": [
          {
            "name": "filter",
            "required": false,
            "in": "query",
            "description": "the odata like filter expression use to match which instances are returned",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "expand",
            "required": false,
            "in": "query",
            "description": "a comma separated list of property path's that specfiy which additional objects will be filled in the object (deep load). If nothing is specified only the object itself will be loaded, not of its relations will be included",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orderBy",
            "required": false,
            "in": "query",
            "description": "a comma separated list of order by directives used to determine the order in which the objects are returned. Each directive is a single property name optionally followed by desc if descending is required. For example [first_name, last_name desc]",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "if the results are paged (pageSize is specified), this is the page number to return. The first page is 1",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "pageSize",
            "required": false,
            "in": "query",
            "description": "if specified, the results are paged and this is the size of each of those pages",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "All instances of PropertySocialProfile that match the filter",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PropertySocialProfile"
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "post": {
        "operationId": "PropertySocialProfileApi_create",
        "summary": "Creates new instances of PropertySocialProfile based on the values passed in. If the id is filled in, it will fail to create the new instance, otherwise it returns the the newly created objects",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/PropertySocialProfile"
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "The instances of PropertySocialProfile that have been created",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PropertySocialProfile"
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "put": {
        "operationId": "PropertySocialProfileApi_update",
        "summary": "Update the values for the instances of PropertySocialProfile that are provided",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/PropertySocialProfile"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The ids of the instances of PropertySocialProfile that have been updated",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "number"
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/PropertySocialProfile/{id}": {
      "get": {
        "operationId": "PropertySocialProfileApi_findOneById",
        "summary": "Find a single instance of PropertySocialProfile with the given id. If none are found, an empty result is returned",
        "parameters": [
          {
            "name": "expand",
            "required": false,
            "in": "query",
            "description": "a comma separated list of property path's that specfiy which additional objects will be filled in the object (deep load). If nothing is specified only the object itself will be loaded, not of its relations will be included",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "The id of the instance to retrieve",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Get a single instance of PropertySocialProfile with the specified id",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PropertySocialProfile"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "delete": {
        "operationId": "PropertySocialProfileApi_remove",
        "summary": "Remove the single instance of PropertySocialProfile with the specified id",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "The id of the instance to remove",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The instance of PropertySocialProfile has been removed"
          },
          "403": {
            "description": "Forbidden."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/Setting": {
      "get": {
        "operationId": "SettingApi_findAllByFilter",
        "summary": "Find all instances of Setting that match the given filter. If none are found, an empty result is returned",
        "parameters": [
          {
            "name": "filter",
            "required": false,
            "in": "query",
            "description": "the odata like filter expression use to match which instances are returned",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "expand",
            "required": false,
            "in": "query",
            "description": "a comma separated list of property path's that specfiy which additional objects will be filled in the object (deep load). If nothing is specified only the object itself will be loaded, not of its relations will be included",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orderBy",
            "required": false,
            "in": "query",
            "description": "a comma separated list of order by directives used to determine the order in which the objects are returned. Each directive is a single property name optionally followed by desc if descending is required. For example [first_name, last_name desc]",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "if the results are paged (pageSize is specified), this is the page number to return. The first page is 1",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "pageSize",
            "required": false,
            "in": "query",
            "description": "if specified, the results are paged and this is the size of each of those pages",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "All instances of Setting that match the filter",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Setting"
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "post": {
        "operationId": "SettingApi_create",
        "summary": "Creates new instances of Setting based on the values passed in. If the id is filled in, it will fail to create the new instance, otherwise it returns the the newly created objects",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Setting"
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "The instances of Setting that have been created",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Setting"
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "put": {
        "operationId": "SettingApi_update",
        "summary": "Update the values for the instances of Setting that are provided",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/Setting"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The ids of the instances of Setting that have been updated",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "number"
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/Setting/{id}": {
      "get": {
        "operationId": "SettingApi_findOneById",
        "summary": "Find a single instance of Setting with the given id. If none are found, an empty result is returned",
        "parameters": [
          {
            "name": "expand",
            "required": false,
            "in": "query",
            "description": "a comma separated list of property path's that specfiy which additional objects will be filled in the object (deep load). If nothing is specified only the object itself will be loaded, not of its relations will be included",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "The id of the instance to retrieve",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Get a single instance of Setting with the specified id",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Setting"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "delete": {
        "operationId": "SettingApi_remove",
        "summary": "Remove the single instance of Setting with the specified id",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "The id of the instance to remove",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The instance of Setting has been removed"
          },
          "403": {
            "description": "Forbidden."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/SponsorSocialProfile": {
      "get": {
        "operationId": "SponsorSocialProfileApi_findAllByFilter",
        "summary": "Find all instances of SponsorSocialProfile that match the given filter. If none are found, an empty result is returned",
        "parameters": [
          {
            "name": "filter",
            "required": false,
            "in": "query",
            "description": "the odata like filter expression use to match which instances are returned",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "expand",
            "required": false,
            "in": "query",
            "description": "a comma separated list of property path's that specfiy which additional objects will be filled in the object (deep load). If nothing is specified only the object itself will be loaded, not of its relations will be included",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orderBy",
            "required": false,
            "in": "query",
            "description": "a comma separated list of order by directives used to determine the order in which the objects are returned. Each directive is a single property name optionally followed by desc if descending is required. For example [first_name, last_name desc]",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "if the results are paged (pageSize is specified), this is the page number to return. The first page is 1",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "pageSize",
            "required": false,
            "in": "query",
            "description": "if specified, the results are paged and this is the size of each of those pages",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "All instances of SponsorSocialProfile that match the filter",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SponsorSocialProfile"
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "post": {
        "operationId": "SponsorSocialProfileApi_create",
        "summary": "Creates new instances of SponsorSocialProfile based on the values passed in. If the id is filled in, it will fail to create the new instance, otherwise it returns the the newly created objects",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/SponsorSocialProfile"
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "The instances of SponsorSocialProfile that have been created",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SponsorSocialProfile"
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "put": {
        "operationId": "SponsorSocialProfileApi_update",
        "summary": "Update the values for the instances of SponsorSocialProfile that are provided",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/SponsorSocialProfile"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The ids of the instances of SponsorSocialProfile that have been updated",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "number"
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/SponsorSocialProfile/{id}": {
      "get": {
        "operationId": "SponsorSocialProfileApi_findOneById",
        "summary": "Find a single instance of SponsorSocialProfile with the given id. If none are found, an empty result is returned",
        "parameters": [
          {
            "name": "expand",
            "required": false,
            "in": "query",
            "description": "a comma separated list of property path's that specfiy which additional objects will be filled in the object (deep load). If nothing is specified only the object itself will be loaded, not of its relations will be included",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "The id of the instance to retrieve",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Get a single instance of SponsorSocialProfile with the specified id",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SponsorSocialProfile"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "delete": {
        "operationId": "SponsorSocialProfileApi_remove",
        "summary": "Remove the single instance of SponsorSocialProfile with the specified id",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "The id of the instance to remove",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The instance of SponsorSocialProfile has been removed"
          },
          "403": {
            "description": "Forbidden."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/SupportEngineer": {
      "get": {
        "operationId": "SupportEngineerApi_findAllByFilter",
        "summary": "Find all instances of SupportEngineer that match the given filter. If none are found, an empty result is returned",
        "parameters": [
          {
            "name": "filter",
            "required": false,
            "in": "query",
            "description": "the odata like filter expression use to match which instances are returned",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "expand",
            "required": false,
            "in": "query",
            "description": "a comma separated list of property path's that specfiy which additional objects will be filled in the object (deep load). If nothing is specified only the object itself will be loaded, not of its relations will be included",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orderBy",
            "required": false,
            "in": "query",
            "description": "a comma separated list of order by directives used to determine the order in which the objects are returned. Each directive is a single property name optionally followed by desc if descending is required. For example [first_name, last_name desc]",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "if the results are paged (pageSize is specified), this is the page number to return. The first page is 1",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "pageSize",
            "required": false,
            "in": "query",
            "description": "if specified, the results are paged and this is the size of each of those pages",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "All instances of SupportEngineer that match the filter",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SupportEngineer"
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "post": {
        "operationId": "SupportEngineerApi_create",
        "summary": "Creates new instances of SupportEngineer based on the values passed in. If the id is filled in, it will fail to create the new instance, otherwise it returns the the newly created objects",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/SupportEngineer"
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "The instances of SupportEngineer that have been created",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SupportEngineer"
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "put": {
        "operationId": "SupportEngineerApi_update",
        "summary": "Update the values for the instances of SupportEngineer that are provided",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/SupportEngineer"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The ids of the instances of SupportEngineer that have been updated",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "number"
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/SupportEngineer/{id}": {
      "get": {
        "operationId": "SupportEngineerApi_findOneById",
        "summary": "Find a single instance of SupportEngineer with the given id. If none are found, an empty result is returned",
        "parameters": [
          {
            "name": "expand",
            "required": false,
            "in": "query",
            "description": "a comma separated list of property path's that specfiy which additional objects will be filled in the object (deep load). If nothing is specified only the object itself will be loaded, not of its relations will be included",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "The id of the instance to retrieve",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Get a single instance of SupportEngineer with the specified id",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SupportEngineer"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "delete": {
        "operationId": "SupportEngineerApi_remove",
        "summary": "Remove the single instance of SupportEngineer with the specified id",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "The id of the instance to remove",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The instance of SupportEngineer has been removed"
          },
          "403": {
            "description": "Forbidden."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/UserBasic": {
      "get": {
        "operationId": "UserBasicApi_findAllByFilter",
        "summary": "Find all instances of UserBasic that match the given filter. If none are found, an empty result is returned",
        "parameters": [
          {
            "name": "filter",
            "required": false,
            "in": "query",
            "description": "the odata like filter expression use to match which instances are returned",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "expand",
            "required": false,
            "in": "query",
            "description": "a comma separated list of property path's that specfiy which additional objects will be filled in the object (deep load). If nothing is specified only the object itself will be loaded, not of its relations will be included",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orderBy",
            "required": false,
            "in": "query",
            "description": "a comma separated list of order by directives used to determine the order in which the objects are returned. Each directive is a single property name optionally followed by desc if descending is required. For example [first_name, last_name desc]",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "if the results are paged (pageSize is specified), this is the page number to return. The first page is 1",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "pageSize",
            "required": false,
            "in": "query",
            "description": "if specified, the results are paged and this is the size of each of those pages",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "All instances of UserBasic that match the filter",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UserBasic"
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "post": {
        "operationId": "UserBasicApi_create",
        "summary": "Creates new instances of UserBasic based on the values passed in. If the id is filled in, it will fail to create the new instance, otherwise it returns the the newly created objects",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/UserBasic"
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "The instances of UserBasic that have been created",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UserBasic"
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "put": {
        "operationId": "UserBasicApi_update",
        "summary": "Update the values for the instances of UserBasic that are provided",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/UserBasic"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The ids of the instances of UserBasic that have been updated",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "number"
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/UserBasic/{id}": {
      "get": {
        "operationId": "UserBasicApi_findOneById",
        "summary": "Find a single instance of UserBasic with the given id. If none are found, an empty result is returned",
        "parameters": [
          {
            "name": "expand",
            "required": false,
            "in": "query",
            "description": "a comma separated list of property path's that specfiy which additional objects will be filled in the object (deep load). If nothing is specified only the object itself will be loaded, not of its relations will be included",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "The id of the instance to retrieve",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Get a single instance of UserBasic with the specified id",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserBasic"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "delete": {
        "operationId": "UserBasicApi_remove",
        "summary": "Remove the single instance of UserBasic with the specified id",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "The id of the instance to remove",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The instance of UserBasic has been removed"
          },
          "403": {
            "description": "Forbidden."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/UserRelationship": {
      "get": {
        "operationId": "UserRelationshipApi_findAllByFilter",
        "summary": "Find all instances of UserRelationship that match the given filter. If none are found, an empty result is returned",
        "parameters": [
          {
            "name": "filter",
            "required": false,
            "in": "query",
            "description": "the odata like filter expression use to match which instances are returned",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "expand",
            "required": false,
            "in": "query",
            "description": "a comma separated list of property path's that specfiy which additional objects will be filled in the object (deep load). If nothing is specified only the object itself will be loaded, not of its relations will be included",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orderBy",
            "required": false,
            "in": "query",
            "description": "a comma separated list of order by directives used to determine the order in which the objects are returned. Each directive is a single property name optionally followed by desc if descending is required. For example [first_name, last_name desc]",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "if the results are paged (pageSize is specified), this is the page number to return. The first page is 1",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "pageSize",
            "required": false,
            "in": "query",
            "description": "if specified, the results are paged and this is the size of each of those pages",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "All instances of UserRelationship that match the filter",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UserRelationship"
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "post": {
        "operationId": "UserRelationshipApi_create",
        "summary": "Creates new instances of UserRelationship based on the values passed in. If the id is filled in, it will fail to create the new instance, otherwise it returns the the newly created objects",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/UserRelationship"
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "The instances of UserRelationship that have been created",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UserRelationship"
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "put": {
        "operationId": "UserRelationshipApi_update",
        "summary": "Update the values for the instances of UserRelationship that are provided",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/UserRelationship"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The ids of the instances of UserRelationship that have been updated",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "number"
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/UserRelationship/{id}": {
      "get": {
        "operationId": "UserRelationshipApi_findOneById",
        "summary": "Find a single instance of UserRelationship with the given id. If none are found, an empty result is returned",
        "parameters": [
          {
            "name": "expand",
            "required": false,
            "in": "query",
            "description": "a comma separated list of property path's that specfiy which additional objects will be filled in the object (deep load). If nothing is specified only the object itself will be loaded, not of its relations will be included",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "The id of the instance to retrieve",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Get a single instance of UserRelationship with the specified id",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserRelationship"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "delete": {
        "operationId": "UserRelationshipApi_remove",
        "summary": "Remove the single instance of UserRelationship with the specified id",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "The id of the instance to remove",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The instance of UserRelationship has been removed"
          },
          "403": {
            "description": "Forbidden."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/UserSignupEvent": {
      "get": {
        "operationId": "UserSignupEventApi_findAllByFilter",
        "summary": "Find all instances of UserSignupEvent that match the given filter. If none are found, an empty result is returned",
        "parameters": [
          {
            "name": "filter",
            "required": false,
            "in": "query",
            "description": "the odata like filter expression use to match which instances are returned",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "expand",
            "required": false,
            "in": "query",
            "description": "a comma separated list of property path's that specfiy which additional objects will be filled in the object (deep load). If nothing is specified only the object itself will be loaded, not of its relations will be included",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orderBy",
            "required": false,
            "in": "query",
            "description": "a comma separated list of order by directives used to determine the order in which the objects are returned. Each directive is a single property name optionally followed by desc if descending is required. For example [first_name, last_name desc]",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "if the results are paged (pageSize is specified), this is the page number to return. The first page is 1",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "pageSize",
            "required": false,
            "in": "query",
            "description": "if specified, the results are paged and this is the size of each of those pages",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "All instances of UserSignupEvent that match the filter",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UserSignupEvent"
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/UserBeneficiary": {
      "get": {
        "operationId": "UserBeneficiaryApi_findAllByFilter",
        "summary": "Find all instances of UserBeneficiary that match the given filter. If none are found, an empty result is returned",
        "parameters": [
          {
            "name": "filter",
            "required": false,
            "in": "query",
            "description": "the odata like filter expression use to match which instances are returned",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "expand",
            "required": false,
            "in": "query",
            "description": "a comma separated list of property path's that specfiy which additional objects will be filled in the object (deep load). If nothing is specified only the object itself will be loaded, not of its relations will be included",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orderBy",
            "required": false,
            "in": "query",
            "description": "a comma separated list of order by directives used to determine the order in which the objects are returned. Each directive is a single property name optionally followed by desc if descending is required. For example [first_name, last_name desc]",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "if the results are paged (pageSize is specified), this is the page number to return. The first page is 1",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "pageSize",
            "required": false,
            "in": "query",
            "description": "if specified, the results are paged and this is the size of each of those pages",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "All instances of UserBeneficiary that match the filter",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UserBeneficiary"
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "post": {
        "operationId": "UserBeneficiaryApi_create",
        "summary": "Creates new instances of UserBeneficiary based on the values passed in. If the id is filled in, it will fail to create the new instance, otherwise it returns the the newly created objects",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/UserBeneficiary"
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "The instances of UserBeneficiary that have been created",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UserBeneficiary"
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "put": {
        "operationId": "UserBeneficiaryApi_update",
        "summary": "Update the values for the instances of UserBeneficiary that are provided",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/UserBeneficiary"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The ids of the instances of UserBeneficiary that have been updated",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "number"
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/UserBeneficiary/{id}": {
      "get": {
        "operationId": "UserBeneficiaryApi_findOneById",
        "summary": "Find a single instance of UserBeneficiary with the given id. If none are found, an empty result is returned",
        "parameters": [
          {
            "name": "expand",
            "required": false,
            "in": "query",
            "description": "a comma separated list of property path's that specfiy which additional objects will be filled in the object (deep load). If nothing is specified only the object itself will be loaded, not of its relations will be included",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "The id of the instance to retrieve",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Get a single instance of UserBeneficiary with the specified id",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserBeneficiary"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "delete": {
        "operationId": "UserBeneficiaryApi_remove",
        "summary": "Remove the single instance of UserBeneficiary with the specified id",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "The id of the instance to remove",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The instance of UserBeneficiary has been removed"
          },
          "403": {
            "description": "Forbidden."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/UserCorporation": {
      "get": {
        "operationId": "UserCorporationApi_findAllByFilter",
        "summary": "Find all instances of UserCorporation that match the given filter. If none are found, an empty result is returned",
        "parameters": [
          {
            "name": "filter",
            "required": false,
            "in": "query",
            "description": "the odata like filter expression use to match which instances are returned",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "expand",
            "required": false,
            "in": "query",
            "description": "a comma separated list of property path's that specfiy which additional objects will be filled in the object (deep load). If nothing is specified only the object itself will be loaded, not of its relations will be included",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orderBy",
            "required": false,
            "in": "query",
            "description": "a comma separated list of order by directives used to determine the order in which the objects are returned. Each directive is a single property name optionally followed by desc if descending is required. For example [first_name, last_name desc]",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "if the results are paged (pageSize is specified), this is the page number to return. The first page is 1",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "pageSize",
            "required": false,
            "in": "query",
            "description": "if specified, the results are paged and this is the size of each of those pages",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "All instances of UserCorporation that match the filter",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UserCorporation"
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "post": {
        "operationId": "UserCorporationApi_create",
        "summary": "Creates new instances of UserCorporation based on the values passed in. If the id is filled in, it will fail to create the new instance, otherwise it returns the the newly created objects",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/UserCorporation"
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "The instances of UserCorporation that have been created",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UserCorporation"
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "put": {
        "operationId": "UserCorporationApi_update",
        "summary": "Update the values for the instances of UserCorporation that are provided",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/UserCorporation"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The ids of the instances of UserCorporation that have been updated",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "number"
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/UserCorporation/{id}": {
      "get": {
        "operationId": "UserCorporationApi_findOneById",
        "summary": "Find a single instance of UserCorporation with the given id. If none are found, an empty result is returned",
        "parameters": [
          {
            "name": "expand",
            "required": false,
            "in": "query",
            "description": "a comma separated list of property path's that specfiy which additional objects will be filled in the object (deep load). If nothing is specified only the object itself will be loaded, not of its relations will be included",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "The id of the instance to retrieve",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Get a single instance of UserCorporation with the specified id",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserCorporation"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "delete": {
        "operationId": "UserCorporationApi_remove",
        "summary": "Remove the single instance of UserCorporation with the specified id",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "The id of the instance to remove",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The instance of UserCorporation has been removed"
          },
          "403": {
            "description": "Forbidden."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/UserTrust": {
      "get": {
        "operationId": "UserTrustApi_findAllByFilter",
        "summary": "Find all instances of UserTrust that match the given filter. If none are found, an empty result is returned",
        "parameters": [
          {
            "name": "filter",
            "required": false,
            "in": "query",
            "description": "the odata like filter expression use to match which instances are returned",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "expand",
            "required": false,
            "in": "query",
            "description": "a comma separated list of property path's that specfiy which additional objects will be filled in the object (deep load). If nothing is specified only the object itself will be loaded, not of its relations will be included",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orderBy",
            "required": false,
            "in": "query",
            "description": "a comma separated list of order by directives used to determine the order in which the objects are returned. Each directive is a single property name optionally followed by desc if descending is required. For example [first_name, last_name desc]",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "if the results are paged (pageSize is specified), this is the page number to return. The first page is 1",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "pageSize",
            "required": false,
            "in": "query",
            "description": "if specified, the results are paged and this is the size of each of those pages",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "All instances of UserTrust that match the filter",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UserTrust"
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "post": {
        "operationId": "UserTrustApi_create",
        "summary": "Creates new instances of UserTrust based on the values passed in. If the id is filled in, it will fail to create the new instance, otherwise it returns the the newly created objects",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/UserTrust"
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "The instances of UserTrust that have been created",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UserTrust"
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "put": {
        "operationId": "UserTrustApi_update",
        "summary": "Update the values for the instances of UserTrust that are provided",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/UserTrust"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The ids of the instances of UserTrust that have been updated",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "number"
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/UserTrust/{id}": {
      "get": {
        "operationId": "UserTrustApi_findOneById",
        "summary": "Find a single instance of UserTrust with the given id. If none are found, an empty result is returned",
        "parameters": [
          {
            "name": "expand",
            "required": false,
            "in": "query",
            "description": "a comma separated list of property path's that specfiy which additional objects will be filled in the object (deep load). If nothing is specified only the object itself will be loaded, not of its relations will be included",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "The id of the instance to retrieve",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Get a single instance of UserTrust with the specified id",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserTrust"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "delete": {
        "operationId": "UserTrustApi_remove",
        "summary": "Remove the single instance of UserTrust with the specified id",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "The id of the instance to remove",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The instance of UserTrust has been removed"
          },
          "403": {
            "description": "Forbidden."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/WebHook": {
      "get": {
        "operationId": "WebHookApi_findAllByFilter",
        "summary": "Find all instances of WebHook that match the given filter. If none are found, an empty result is returned",
        "parameters": [
          {
            "name": "filter",
            "required": false,
            "in": "query",
            "description": "the odata like filter expression use to match which instances are returned",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "expand",
            "required": false,
            "in": "query",
            "description": "a comma separated list of property path's that specfiy which additional objects will be filled in the object (deep load). If nothing is specified only the object itself will be loaded, not of its relations will be included",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orderBy",
            "required": false,
            "in": "query",
            "description": "a comma separated list of order by directives used to determine the order in which the objects are returned. Each directive is a single property name optionally followed by desc if descending is required. For example [first_name, last_name desc]",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "if the results are paged (pageSize is specified), this is the page number to return. The first page is 1",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "pageSize",
            "required": false,
            "in": "query",
            "description": "if specified, the results are paged and this is the size of each of those pages",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "All instances of WebHook that match the filter",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/WebHook"
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "post": {
        "operationId": "WebHookApi_create",
        "summary": "Creates new instances of WebHook based on the values passed in. If the id is filled in, it will fail to create the new instance, otherwise it returns the the newly created objects",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/WebHook"
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "The instances of WebHook that have been created",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/WebHook"
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "put": {
        "operationId": "WebHookApi_update",
        "summary": "Update the values for the instances of WebHook that are provided",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/WebHook"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The ids of the instances of WebHook that have been updated",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "number"
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/WebHook/{id}": {
      "get": {
        "operationId": "WebHookApi_findOneById",
        "summary": "Find a single instance of WebHook with the given id. If none are found, an empty result is returned",
        "parameters": [
          {
            "name": "expand",
            "required": false,
            "in": "query",
            "description": "a comma separated list of property path's that specfiy which additional objects will be filled in the object (deep load). If nothing is specified only the object itself will be loaded, not of its relations will be included",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "The id of the instance to retrieve",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Get a single instance of WebHook with the specified id",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebHook"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "delete": {
        "operationId": "WebHookApi_remove",
        "summary": "Remove the single instance of WebHook with the specified id",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "The id of the instance to remove",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The instance of WebHook has been removed"
          },
          "403": {
            "description": "Forbidden."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/ComputedProjectTotalIncome": {
      "get": {
        "operationId": "ComputedProjectTotalIncomeApi_findAllByFilter",
        "summary": "Find all instances of ComputedProjectTotalIncome that match the given filter. If none are found, an empty result is returned",
        "parameters": [
          {
            "name": "filter",
            "required": false,
            "in": "query",
            "description": "the odata like filter expression use to match which instances are returned",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "expand",
            "required": false,
            "in": "query",
            "description": "a comma separated list of property path's that specfiy which additional objects will be filled in the object (deep load). If nothing is specified only the object itself will be loaded, not of its relations will be included",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orderBy",
            "required": false,
            "in": "query",
            "description": "a comma separated list of order by directives used to determine the order in which the objects are returned. Each directive is a single property name optionally followed by desc if descending is required. For example [first_name, last_name desc]",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "if the results are paged (pageSize is specified), this is the page number to return. The first page is 1",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "pageSize",
            "required": false,
            "in": "query",
            "description": "if specified, the results are paged and this is the size of each of those pages",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "All instances of ComputedProjectTotalIncome that match the filter",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ComputedProjectTotalIncome"
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/ComputedProjectIncome": {
      "get": {
        "operationId": "ComputedProjectIncomeApi_findAllByFilter",
        "summary": "Find all instances of ComputedProjectIncome that match the given filter. If none are found, an empty result is returned",
        "parameters": [
          {
            "name": "filter",
            "required": false,
            "in": "query",
            "description": "the odata like filter expression use to match which instances are returned",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "expand",
            "required": false,
            "in": "query",
            "description": "a comma separated list of property path's that specfiy which additional objects will be filled in the object (deep load). If nothing is specified only the object itself will be loaded, not of its relations will be included",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orderBy",
            "required": false,
            "in": "query",
            "description": "a comma separated list of order by directives used to determine the order in which the objects are returned. Each directive is a single property name optionally followed by desc if descending is required. For example [first_name, last_name desc]",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "if the results are paged (pageSize is specified), this is the page number to return. The first page is 1",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "pageSize",
            "required": false,
            "in": "query",
            "description": "if specified, the results are paged and this is the size of each of those pages",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "All instances of ComputedProjectIncome that match the filter",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ComputedProjectIncome"
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "post": {
        "operationId": "ComputedProjectIncomeApi_create",
        "summary": "Creates new instances of ComputedProjectIncome based on the values passed in. If the id is filled in, it will fail to create the new instance, otherwise it returns the the newly created objects",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ComputedProjectIncome"
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "The instances of ComputedProjectIncome that have been created",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ComputedProjectIncome"
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "put": {
        "operationId": "ComputedProjectIncomeApi_update",
        "summary": "Update the values for the instances of ComputedProjectIncome that are provided",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ComputedProjectIncome"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The ids of the instances of ComputedProjectIncome that have been updated",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "number"
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/ComputedProjectIncome/{id}": {
      "get": {
        "operationId": "ComputedProjectIncomeApi_findOneById",
        "summary": "Find a single instance of ComputedProjectIncome with the given id. If none are found, an empty result is returned",
        "parameters": [
          {
            "name": "expand",
            "required": false,
            "in": "query",
            "description": "a comma separated list of property path's that specfiy which additional objects will be filled in the object (deep load). If nothing is specified only the object itself will be loaded, not of its relations will be included",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "The id of the instance to retrieve",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Get a single instance of ComputedProjectIncome with the specified id",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ComputedProjectIncome"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "delete": {
        "operationId": "ComputedProjectIncomeApi_remove",
        "summary": "Remove the single instance of ComputedProjectIncome with the specified id",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "The id of the instance to remove",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The instance of ComputedProjectIncome has been removed"
          },
          "403": {
            "description": "Forbidden."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/ComputedAccountTotalIncome": {
      "get": {
        "operationId": "ComputedAccountTotalIncomeApi_findAllByFilter",
        "summary": "Find all instances of ComputedAccountTotalIncome that match the given filter. If none are found, an empty result is returned",
        "parameters": [
          {
            "name": "filter",
            "required": false,
            "in": "query",
            "description": "the odata like filter expression use to match which instances are returned",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "expand",
            "required": false,
            "in": "query",
            "description": "a comma separated list of property path's that specfiy which additional objects will be filled in the object (deep load). If nothing is specified only the object itself will be loaded, not of its relations will be included",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orderBy",
            "required": false,
            "in": "query",
            "description": "a comma separated list of order by directives used to determine the order in which the objects are returned. Each directive is a single property name optionally followed by desc if descending is required. For example [first_name, last_name desc]",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "if the results are paged (pageSize is specified), this is the page number to return. The first page is 1",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "pageSize",
            "required": false,
            "in": "query",
            "description": "if specified, the results are paged and this is the size of each of those pages",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "All instances of ComputedAccountTotalIncome that match the filter",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ComputedAccountTotalIncome"
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/ComputedAccountIncome": {
      "get": {
        "operationId": "ComputedAccountIncomeApi_findAllByFilter",
        "summary": "Find all instances of ComputedAccountIncome that match the given filter. If none are found, an empty result is returned",
        "parameters": [
          {
            "name": "filter",
            "required": false,
            "in": "query",
            "description": "the odata like filter expression use to match which instances are returned",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "expand",
            "required": false,
            "in": "query",
            "description": "a comma separated list of property path's that specfiy which additional objects will be filled in the object (deep load). If nothing is specified only the object itself will be loaded, not of its relations will be included",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "orderBy",
            "required": false,
            "in": "query",
            "description": "a comma separated list of order by directives used to determine the order in which the objects are returned. Each directive is a single property name optionally followed by desc if descending is required. For example [first_name, last_name desc]",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "if the results are paged (pageSize is specified), this is the page number to return. The first page is 1",
            "schema": {
              "type": "number"
            }
          },
          {
            "name": "pageSize",
            "required": false,
            "in": "query",
            "description": "if specified, the results are paged and this is the size of each of those pages",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "All instances of ComputedAccountIncome that match the filter",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ComputedAccountIncome"
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "post": {
        "operationId": "ComputedAccountIncomeApi_create",
        "summary": "Creates new instances of ComputedAccountIncome based on the values passed in. If the id is filled in, it will fail to create the new instance, otherwise it returns the the newly created objects",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ComputedAccountIncome"
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "The instances of ComputedAccountIncome that have been created",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ComputedAccountIncome"
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "put": {
        "operationId": "ComputedAccountIncomeApi_update",
        "summary": "Update the values for the instances of ComputedAccountIncome that are provided",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/ComputedAccountIncome"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "The ids of the instances of ComputedAccountIncome that have been updated",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "number"
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    },
    "/ComputedAccountIncome/{id}": {
      "get": {
        "operationId": "ComputedAccountIncomeApi_findOneById",
        "summary": "Find a single instance of ComputedAccountIncome with the given id. If none are found, an empty result is returned",
        "parameters": [
          {
            "name": "expand",
            "required": false,
            "in": "query",
            "description": "a comma separated list of property path's that specfiy which additional objects will be filled in the object (deep load). If nothing is specified only the object itself will be loaded, not of its relations will be included",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "The id of the instance to retrieve",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Get a single instance of ComputedAccountIncome with the specified id",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ComputedAccountIncome"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      },
      "delete": {
        "operationId": "ComputedAccountIncomeApi_remove",
        "summary": "Remove the single instance of ComputedAccountIncome with the specified id",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "The id of the instance to remove",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The instance of ComputedAccountIncome has been removed"
          },
          "403": {
            "description": "Forbidden."
          }
        },
        "security": [
          {
            "bearer": []
          }
        ]
      }
    }
  }
}